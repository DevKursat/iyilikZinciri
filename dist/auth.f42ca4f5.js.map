{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,uB,I,A,E,S,oB,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,iB,I,A,E,S,c,E,E,E,O,C,mB,I,A,E,S,gB,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,S,I,A,E,S,M,E,E,E,O,C,S,I,A,E,S,M,E,E,E,O,C,uB,I,A,E,S,oB,E,E,S,E,S,E,S,E,S,E,S,E,S,E,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SEwBO,eAAe,EAAc,CAAK,EACrC,GAAM,CAAA,SAAE,CAAQ,CAAA,iBAAE,CAAgB,CAAA,QAAE,CAAO,CAAE,CAAG,EAC1C,EAAa,AAAA,EAAA,OAAA,CAAQ,SAAS,GAAG,IAAI,EAAE,QAC7C,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,GAC1B,GAAM,CAAA,WAAE,CAAU,CAAA,iBAAE,CAAgB,CAAA,iBAAE,CAAgB,CAAE,CAAG,EACrD,EAAiB,GAAS,eAChC,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAU,AAAA,EAAA,uBAAA,CAAwB,0BAA0B,EACpF,AAAA,CAAA,EAAA,EAAA,qBAAA,AAAA,EAAsB,CAAC,CAAC,EAAkB,AAAA,EAAA,uBAAA,CAAwB,sBAAsB,EACxF,IAAM,EAAkB,AAAA,CAAA,EAAA,EAAA,kBAAA,AAAA,EAAmB,CACvC,SAAA,EACA,WAAA,EACA,iBAAA,CACR,GACU,EAAsB,AAAA,CAAA,EAAA,EAAA,yBAAA,AAAA,EAA0B,CAClD,iBAAkB,AAAA,CAAA,EAAA,EAAA,qCAAA,AAAA,EAAsC,CACpD,iBAAkB,CAC9B,EACA,GACU,CAAE,QAAS,CAAO,CAAE,CAAG,MAAM,EAAoB,CACnD,OAAQ,AAAA,CAAA,EAAA,EAAA,uBAAA,AAAA,EAAwB,EAAW,UAAU,EACrD,eAAgB,AAAA,CAAA,EA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","sources":["<anon>","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignUp.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmSignUp.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.ts","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resendSignUpCode.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/resendSignUpCode.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.ts","node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/updateUserAttributes.mjs","node_modules/@aws-amplify/auth/src/providers/cognito/apis/updateUserAttributes.ts","node_modules/@aws-amplify/core/dist/esm/singleton/apis/fetchAuthSession.mjs","node_modules/@aws-amplify/core/src/singleton/apis/fetchAuthSession.ts","node_modules/@aws-amplify/core/dist/esm/singleton/apis/internal/fetchAuthSession.mjs","node_modules/@aws-amplify/core/src/singleton/apis/internal/fetchAuthSession.ts","node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs","node_modules/@aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.ts"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire2757\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"brE3Z\", function(module, exports) {\n$parcel$export(module.exports, \"confirmResetPassword\", () => (parcelRequire(\"1XYd7\")).confirmResetPassword);\n$parcel$export(module.exports, \"confirmSignUp\", () => (parcelRequire(\"c7Zwg\")).confirmSignUp);\n$parcel$export(module.exports, \"getCurrentUser\", () => (parcelRequire(\"2yfk2\")).getCurrentUser);\n$parcel$export(module.exports, \"resendSignUpCode\", () => (parcelRequire(\"8XrSp\")).resendSignUpCode);\n$parcel$export(module.exports, \"resetPassword\", () => (parcelRequire(\"hPpH6\")).resetPassword);\n$parcel$export(module.exports, \"signIn\", () => (parcelRequire(\"aqcy4\")).signIn);\n$parcel$export(module.exports, \"signUp\", () => (parcelRequire(\"xBcsQ\")).signUp);\n$parcel$export(module.exports, \"updateUserAttributes\", () => (parcelRequire(\"bykg2\")).updateUserAttributes);\nparcelRequire(\"1XYd7\");parcelRequire(\"c7Zwg\");parcelRequire(\"2yfk2\");parcelRequire(\"8XrSp\");parcelRequire(\"hPpH6\");parcelRequire(\"aqcy4\");parcelRequire(\"xBcsQ\");parcelRequire(\"bykg2\");\n\n});\nparcelRegister(\"c7Zwg\", function(module, exports) {\n\n$parcel$export(module.exports, \"confirmSignUp\", () => $3b67ce6a1604acf5$export$2ce39ab6662e8c24);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\nvar $5RCQ5 = parcelRequire(\"5RCQ5\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $kDFKP = parcelRequire(\"kDFKP\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n\nvar $5XcLh = parcelRequire(\"5XcLh\");\n\n\nvar $epZMx = parcelRequire(\"epZMx\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ async function $3b67ce6a1604acf5$export$2ce39ab6662e8c24(input) {\n    const { username: username, confirmationCode: confirmationCode, options: options } = input;\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolId: userPoolId, userPoolClientId: userPoolClientId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmSignUpUsername);\n    (0, $7XpgE.assertValidationError)(!!confirmationCode, (0, $ewkqX.AuthValidationErrorCode).EmptyConfirmSignUpCode);\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const confirmSignUpClient = (0, $kDFKP.createConfirmSignUpClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: (0, $hXC67.getRegionFromUserPoolId)(authConfig.userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ConfirmSignUp)\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData\n    });\n    return new Promise((resolve, reject)=>{\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE'\n                }\n            };\n            const autoSignInStoreState = (0, $5XcLh.autoSignInStore).getState();\n            if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                (0, $epZMx.resetAutoSignIn)();\n                return;\n            }\n            (0, $5XcLh.autoSignInStore).dispatch({\n                type: 'SET_SESSION',\n                value: session\n            });\n            const stopListener = (0, $5RCQ5.HubInternal).listen('auth-internal', ({ payload: payload })=>{\n                switch(payload.event){\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n                            }\n                        });\n                        stopListener();\n                }\n            });\n            (0, $5RCQ5.HubInternal).dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut\n            });\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\n});\nparcelRegister(\"kDFKP\", function(module, exports) {\n\n$parcel$export(module.exports, \"createConfirmSignUpClient\", () => $90cfaee3eca5312c$export$f182f73f82c5c23a);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $luL8F = parcelRequire(\"luL8F\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $90cfaee3eca5312c$export$f182f73f82c5c23a = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ConfirmSignUp'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\nparcelRegister(\"8XrSp\", function(module, exports) {\n\n$parcel$export(module.exports, \"resendSignUpCode\", () => $d2f19f127c92a1d4$export$b295e842f1d42d13);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\n\nvar $7XpgE = parcelRequire(\"7XpgE\");\n\nvar $ewkqX = parcelRequire(\"ewkqX\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\nvar $7fUr4 = parcelRequire(\"7fUr4\");\n\n\n\n\n\n\n\nvar $foJAH = parcelRequire(\"foJAH\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ async function $d2f19f127c92a1d4$export$b295e842f1d42d13(input) {\n    const { username: username } = input;\n    (0, $7XpgE.assertValidationError)(!!username, (0, $ewkqX.AuthValidationErrorCode).EmptySignUpUsername);\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolClientId: userPoolClientId, userPoolId: userPoolId, userPoolEndpoint: userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = (0, $7fUr4.getUserContextData)({\n        username: username,\n        userPoolId: userPoolId,\n        userPoolClientId: userPoolClientId\n    });\n    const resendConfirmationCode = (0, $foJAH.createResendConfirmationCodeClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const { CodeDeliveryDetails: CodeDeliveryDetails } = await resendConfirmationCode({\n        region: (0, $hXC67.getRegionFromUserPoolId)(authConfig.userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).ResendSignUpCode)\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData: UserContextData\n    });\n    const { DeliveryMedium: DeliveryMedium, AttributeName: AttributeName, Destination: Destination } = {\n        ...CodeDeliveryDetails\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName ? AttributeName : undefined\n    };\n}\n\n});\nparcelRegister(\"foJAH\", function(module, exports) {\n\n$parcel$export(module.exports, \"createResendConfirmationCodeClient\", () => $5d9a1b3270d661d0$export$cf53d1782ddbc93c);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n\nvar $luL8F = parcelRequire(\"luL8F\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $5d9a1b3270d661d0$export$cf53d1782ddbc93c = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('ResendConfirmationCode'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\nparcelRegister(\"bykg2\", function(module, exports) {\n\n$parcel$export(module.exports, \"updateUserAttributes\", () => $c1c529a335aaa923$export$16ff8cb4f547be0);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\nvar $kwYKv = parcelRequire(\"kwYKv\");\n\nvar $bfiP6 = parcelRequire(\"bfiP6\");\nvar $k2DuP = parcelRequire(\"k2DuP\");\n\nvar $kOfpC = parcelRequire(\"kOfpC\");\n\nvar $hXC67 = parcelRequire(\"hXC67\");\n\nvar $ZiWkh = parcelRequire(\"ZiWkh\");\n\nvar $aEls4 = parcelRequire(\"aEls4\");\n\n\n\n\n\n\n\n\nvar $kU6O7 = parcelRequire(\"kU6O7\");\n\nvar $eAu1N = parcelRequire(\"eAu1N\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */ const $c1c529a335aaa923$export$16ff8cb4f547be0 = async (input)=>{\n    const { userAttributes: userAttributes, options: options } = input;\n    const authConfig = (0, $1qbEC.Amplify).getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    (0, $bfiP6.assertTokenProviderConfig)(authConfig);\n    const { userPoolEndpoint: userPoolEndpoint, userPoolId: userPoolId } = authConfig;\n    const { tokens: tokens } = await (0, $kwYKv.fetchAuthSession)({\n        forceRefresh: false\n    });\n    (0, $kOfpC.assertAuthTokens)(tokens);\n    const updateUserAttributesClient = (0, $kU6O7.createUpdateUserAttributesClient)({\n        endpointResolver: (0, $eAu1N.createCognitoUserPoolEndpointResolver)({\n            endpointOverride: userPoolEndpoint\n        })\n    });\n    const { CodeDeliveryDetailsList: CodeDeliveryDetailsList } = await updateUserAttributesClient({\n        region: (0, $hXC67.getRegionFromUserPoolId)(userPoolId),\n        userAgentValue: (0, $aEls4.getAuthUserAgentValue)((0, $k2DuP.AuthAction).UpdateUserAttributes)\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        UserAttributes: (0, $ZiWkh.toAttributeType)(userAttributes)\n    });\n    return {\n        ...$c1c529a335aaa923$var$getConfirmedAttributes(userAttributes),\n        ...$c1c529a335aaa923$var$getUnConfirmedAttributes(CodeDeliveryDetailsList)\n    };\n};\nfunction $c1c529a335aaa923$var$getConfirmedAttributes(attributes) {\n    const confirmedAttributes = {};\n    Object.keys(attributes)?.forEach((key)=>{\n        confirmedAttributes[key] = {\n            isUpdated: true,\n            nextStep: {\n                updateAttributeStep: 'DONE'\n            }\n        };\n    });\n    return confirmedAttributes;\n}\nfunction $c1c529a335aaa923$var$getUnConfirmedAttributes(codeDeliveryDetailsList) {\n    const unConfirmedAttributes = {};\n    codeDeliveryDetailsList?.forEach((codeDeliveryDetails)=>{\n        const { AttributeName: AttributeName, DeliveryMedium: DeliveryMedium, Destination: Destination } = codeDeliveryDetails;\n        if (AttributeName) unConfirmedAttributes[AttributeName] = {\n            isUpdated: false,\n            nextStep: {\n                updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n                codeDeliveryDetails: {\n                    attributeName: AttributeName,\n                    deliveryMedium: DeliveryMedium,\n                    destination: Destination\n                }\n            }\n        };\n    });\n    return unConfirmedAttributes;\n}\n\n});\nparcelRegister(\"kwYKv\", function(module, exports) {\n\n$parcel$export(module.exports, \"fetchAuthSession\", () => $83614fd30266723c$export$39430dfe49142ae);\n\nvar $1qbEC = parcelRequire(\"1qbEC\");\n\nvar $eL2i9 = parcelRequire(\"eL2i9\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetch the auth session including the tokens and credentials if they are available. By default it\n * will automatically refresh expired auth tokens if a valid refresh token is present. You can force a refresh\n * of non-expired tokens with `{ forceRefresh: true }` input.\n *\n * @param options - Options configuring the fetch behavior.\n * @throws {@link AuthError} - Throws error when session information cannot be refreshed.\n * @returns Promise<AuthSession>\n */ const $83614fd30266723c$export$39430dfe49142ae = (options)=>{\n    return (0, $eL2i9.fetchAuthSession)((0, $1qbEC.Amplify), options);\n};\n\n});\nparcelRegister(\"eL2i9\", function(module, exports) {\n\n$parcel$export(module.exports, \"fetchAuthSession\", () => $bb56c3c3b8aca32b$export$39430dfe49142ae);\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $bb56c3c3b8aca32b$export$39430dfe49142ae = (amplify, options)=>{\n    return amplify.Auth.fetchAuthSession(options);\n};\n\n});\n\n\nparcelRegister(\"kU6O7\", function(module, exports) {\n\n$parcel$export(module.exports, \"createUpdateUserAttributesClient\", () => $9e3e6b28dfccad5c$export$c388d1c910c14d32);\n\nvar $6vbP8 = parcelRequire(\"6vbP8\");\n\nvar $bdRfK = parcelRequire(\"bdRfK\");\n\nvar $2qp1o = parcelRequire(\"2qp1o\");\n\nvar $7OD1Z = parcelRequire(\"7OD1Z\");\n\n\n\nvar $luL8F = parcelRequire(\"luL8F\");\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst $9e3e6b28dfccad5c$export$c388d1c910c14d32 = (config)=>(0, $6vbP8.composeServiceApi)((0, $bdRfK.cognitoUserPoolTransferHandler), (0, $2qp1o.createUserPoolSerializer)('UpdateUserAttributes'), (0, $7OD1Z.createUserPoolDeserializer)(), {\n        ...(0, $luL8F.DEFAULT_SERVICE_CLIENT_API_CONFIG),\n        ...config\n    });\n\n});\n\n\n\n\n//# sourceMappingURL=auth.f42ca4f5.js.map\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, HubInternal } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { autoSignInStore } from '../../../client/utils/store/autoSignInStore.mjs';\nimport '../../../client/utils/store/signInStore.mjs';\nimport { resetAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            const autoSignInStoreState = autoSignInStore.getState();\n            if (!autoSignInStoreState.active ||\n                autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                resetAutoSignIn();\n                return;\n            }\n            autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport { confirmSignUp };\n//# sourceMappingURL=confirmSignUp.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, HubInternal, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { autoSignInStore } from '../../../client/utils/store';\nimport { resetAutoSignIn } from './autoSignIn';\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { Session: session } = await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            const autoSignInStoreState = autoSignInStore.getState();\n            if (!autoSignInStoreState.active ||\n                autoSignInStoreState.username !== username) {\n                resolve(signUpOut);\n                resetAutoSignIn();\n                return;\n            }\n            autoSignInStore.dispatch({ type: 'SET_SESSION', value: session });\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createConfirmSignUpClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createConfirmSignUpClient };\n//# sourceMappingURL=createConfirmSignUpClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nexport const createConfirmSignUpClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ConfirmSignUp'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../types/errors.mjs';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function resendSignUpCode(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const resendConfirmationCode = createResendConfirmationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await resendConfirmationCode({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName\n            ? AttributeName\n            : undefined,\n    };\n}\n\nexport { resendSignUpCode };\n//# sourceMappingURL=resendSignUpCode.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createResendConfirmationCodeClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Resend the confirmation code while signing up\n *\n * @param input -  The ResendSignUpCodeInput object\n * @returns ResendSignUpCodeOutput\n * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function resendSignUpCode(input) {\n    const { username } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const resendConfirmationCode = createResendConfirmationCodeClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetails } = await resendConfirmationCode({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode),\n    }, {\n        Username: username,\n        ClientMetadata: clientMetadata,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    const { DeliveryMedium, AttributeName, Destination } = {\n        ...CodeDeliveryDetails,\n    };\n    return {\n        destination: Destination,\n        deliveryMedium: DeliveryMedium,\n        attributeName: AttributeName\n            ? AttributeName\n            : undefined,\n    };\n}\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createResendConfirmationCodeClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ResendConfirmationCode'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createResendConfirmationCodeClient };\n//# sourceMappingURL=createResendConfirmationCodeClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createResendConfirmationCodeClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ResendConfirmationCode'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n","import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../errors/types/validation.mjs';\nimport '../types/errors.mjs';\nimport { createUpdateUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nconst updateUserAttributes = async (input) => {\n    const { userAttributes, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const updateUserAttributesClient = createUpdateUserAttributesClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetailsList } = await updateUserAttributesClient({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.UpdateUserAttributes),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        UserAttributes: toAttributeType(userAttributes),\n    });\n    return {\n        ...getConfirmedAttributes(userAttributes),\n        ...getUnConfirmedAttributes(CodeDeliveryDetailsList),\n    };\n};\nfunction getConfirmedAttributes(attributes) {\n    const confirmedAttributes = {};\n    Object.keys(attributes)?.forEach(key => {\n        confirmedAttributes[key] = {\n            isUpdated: true,\n            nextStep: {\n                updateAttributeStep: 'DONE',\n            },\n        };\n    });\n    return confirmedAttributes;\n}\nfunction getUnConfirmedAttributes(codeDeliveryDetailsList) {\n    const unConfirmedAttributes = {};\n    codeDeliveryDetailsList?.forEach(codeDeliveryDetails => {\n        const { AttributeName, DeliveryMedium, Destination } = codeDeliveryDetails;\n        if (AttributeName)\n            unConfirmedAttributes[AttributeName] = {\n                isUpdated: false,\n                nextStep: {\n                    updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n                    codeDeliveryDetails: {\n                        attributeName: AttributeName,\n                        deliveryMedium: DeliveryMedium,\n                        destination: Destination,\n                    },\n                },\n            };\n    });\n    return unConfirmedAttributes;\n}\n\nexport { updateUserAttributes };\n//# sourceMappingURL=updateUserAttributes.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { AuthAction, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../utils/types';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { toAttributeType } from '../utils/apiHelpers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { createUpdateUserAttributesClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Updates user's attributes while authenticated.\n *\n * @param input - The UpdateUserAttributesInput object\n * @returns UpdateUserAttributesOutput\n * @throws - {@link UpdateUserAttributesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport const updateUserAttributes = async (input) => {\n    const { userAttributes, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const clientMetadata = options?.clientMetadata;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolEndpoint, userPoolId } = authConfig;\n    const { tokens } = await fetchAuthSession({ forceRefresh: false });\n    assertAuthTokens(tokens);\n    const updateUserAttributesClient = createUpdateUserAttributesClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { CodeDeliveryDetailsList } = await updateUserAttributesClient({\n        region: getRegionFromUserPoolId(userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.UpdateUserAttributes),\n    }, {\n        AccessToken: tokens.accessToken.toString(),\n        ClientMetadata: clientMetadata,\n        UserAttributes: toAttributeType(userAttributes),\n    });\n    return {\n        ...getConfirmedAttributes(userAttributes),\n        ...getUnConfirmedAttributes(CodeDeliveryDetailsList),\n    };\n};\nfunction getConfirmedAttributes(attributes) {\n    const confirmedAttributes = {};\n    Object.keys(attributes)?.forEach(key => {\n        confirmedAttributes[key] = {\n            isUpdated: true,\n            nextStep: {\n                updateAttributeStep: 'DONE',\n            },\n        };\n    });\n    return confirmedAttributes;\n}\nfunction getUnConfirmedAttributes(codeDeliveryDetailsList) {\n    const unConfirmedAttributes = {};\n    codeDeliveryDetailsList?.forEach(codeDeliveryDetails => {\n        const { AttributeName, DeliveryMedium, Destination } = codeDeliveryDetails;\n        if (AttributeName)\n            unConfirmedAttributes[AttributeName] = {\n                isUpdated: false,\n                nextStep: {\n                    updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',\n                    codeDeliveryDetails: {\n                        attributeName: AttributeName,\n                        deliveryMedium: DeliveryMedium,\n                        destination: Destination,\n                    },\n                },\n            };\n    });\n    return unConfirmedAttributes;\n}\n","import { Amplify } from '../Amplify.mjs';\nimport { fetchAuthSession as fetchAuthSession$1 } from './internal/fetchAuthSession.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetch the auth session including the tokens and credentials if they are available. By default it\n * will automatically refresh expired auth tokens if a valid refresh token is present. You can force a refresh\n * of non-expired tokens with `{ forceRefresh: true }` input.\n *\n * @param options - Options configuring the fetch behavior.\n * @throws {@link AuthError} - Throws error when session information cannot be refreshed.\n * @returns Promise<AuthSession>\n */\nconst fetchAuthSession = (options) => {\n    return fetchAuthSession$1(Amplify, options);\n};\n\nexport { fetchAuthSession };\n//# sourceMappingURL=fetchAuthSession.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '../Amplify';\nimport { fetchAuthSession as fetchAuthSessionInternal } from './internal/fetchAuthSession';\n/**\n * Fetch the auth session including the tokens and credentials if they are available. By default it\n * will automatically refresh expired auth tokens if a valid refresh token is present. You can force a refresh\n * of non-expired tokens with `{ forceRefresh: true }` input.\n *\n * @param options - Options configuring the fetch behavior.\n * @throws {@link AuthError} - Throws error when session information cannot be refreshed.\n * @returns Promise<AuthSession>\n */\nexport const fetchAuthSession = (options) => {\n    return fetchAuthSessionInternal(Amplify, options);\n};\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst fetchAuthSession = (amplify, options) => {\n    return amplify.Auth.fetchAuthSession(options);\n};\n\nexport { fetchAuthSession };\n//# sourceMappingURL=fetchAuthSession.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const fetchAuthSession = (amplify, options) => {\n    return amplify.Auth.fetchAuthSession(options);\n};\n","import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createUpdateUserAttributesClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('UpdateUserAttributes'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n\nexport { createUpdateUserAttributesClient };\n//# sourceMappingURL=createUpdateUserAttributesClient.mjs.map\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createUpdateUserAttributesClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('UpdateUserAttributes'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","confirmResetPassword","confirmSignUp","getCurrentUser","resendSignUpCode","resetPassword","signIn","signUp","updateUserAttributes","$3b67ce6a1604acf5$export$2ce39ab6662e8c24","$1qbEC","$bfiP6","$k2DuP","$5RCQ5","$7XpgE","$ewkqX","$hXC67","$aEls4","$7fUr4","$kDFKP","$eAu1N","$5XcLh","$epZMx","input","username","confirmationCode","options","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolId","userPoolClientId","userPoolEndpoint","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptyConfirmSignUpUsername","EmptyConfirmSignUpCode","UserContextData","getUserContextData","confirmSignUpClient","createConfirmSignUpClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","Session","session","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignUp","Username","ConfirmationCode","ClientMetadata","ForceAliasCreation","forceAliasCreation","ClientId","Promise","resolve","reject","signUpOut","isSignUpComplete","nextStep","signUpStep","autoSignInStoreState","autoSignInStore","getState","active","resetAutoSignIn","dispatch","type","value","stopListener","HubInternal","listen","payload","event","data","error","$90cfaee3eca5312c$export$f182f73f82c5c23a","$6vbP8","$luL8F","$bdRfK","$2qp1o","$7OD1Z","config","composeServiceApi","cognitoUserPoolTransferHandler","createUserPoolSerializer","createUserPoolDeserializer","DEFAULT_SERVICE_CLIENT_API_CONFIG","$d2f19f127c92a1d4$export$b295e842f1d42d13","$foJAH","EmptySignUpUsername","resendConfirmationCode","createResendConfirmationCodeClient","CodeDeliveryDetails","ResendSignUpCode","DeliveryMedium","AttributeName","Destination","destination","deliveryMedium","attributeName","undefined","$5d9a1b3270d661d0$export$cf53d1782ddbc93c","$c1c529a335aaa923$export$16ff8cb4f547be0","$kwYKv","$kOfpC","$ZiWkh","$kU6O7","userAttributes","tokens","fetchAuthSession","forceRefresh","assertAuthTokens","updateUserAttributesClient","createUpdateUserAttributesClient","CodeDeliveryDetailsList","UpdateUserAttributes","AccessToken","accessToken","toString","UserAttributes","toAttributeType","$c1c529a335aaa923$var$getConfirmedAttributes","attributes","confirmedAttributes","keys","forEach","key","isUpdated","updateAttributeStep","$c1c529a335aaa923$var$getUnConfirmedAttributes","codeDeliveryDetailsList","unConfirmedAttributes","codeDeliveryDetails","$83614fd30266723c$export$39430dfe49142ae","$eL2i9","$bb56c3c3b8aca32b$export$39430dfe49142ae","amplify","$9e3e6b28dfccad5c$export$c388d1c910c14d32","fetchAuthSessionInternal"],"version":3,"file":"auth.f42ca4f5.js.map"}