// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (
  modules,
  entry,
  mainEntry,
  parcelRequireName,
  externals,
  distDir,
  publicUrl,
  devServer
) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var importMap = previousRequire.i || {};
  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        if (externals[name]) {
          return externals[name];
        }
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.require = nodeRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.distDir = distDir;
  newRequire.publicUrl = publicUrl;
  newRequire.devServer = devServer;
  newRequire.i = importMap;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  // Only insert newRequire.load when it is actually used.
  // The code in this file is linted against ES5, so dynamic import is not allowed.
  // INSERT_LOAD_HERE

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });
    }
  }
})({"jWhgi":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SERVER_PORT = 1234;
var HMR_SECURE = false;
var HMR_ENV_HASH = "439701173a9199ea";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "5e0263af3c14d121";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_SERVER_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_SERVER_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ , bundleNotFound = false;
function getHostname() {
    return HMR_HOST || (typeof location !== 'undefined' && location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || (typeof location !== 'undefined' ? location.port : HMR_SERVER_PORT);
}
// eslint-disable-next-line no-redeclare
let WebSocket = globalThis.WebSocket;
if (!WebSocket && typeof module.bundle.root === 'function') try {
    // eslint-disable-next-line no-global-assign
    WebSocket = module.bundle.root('ws');
} catch  {
// ignore.
}
var hostname = getHostname();
var port = getPort();
var protocol = HMR_SECURE || typeof location !== 'undefined' && location.protocol === 'https:' && ![
    'localhost',
    '127.0.0.1',
    '0.0.0.0'
].includes(hostname) ? 'wss' : 'ws';
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if (!parent || !parent.isParcelRequire) {
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        // If we're running in the dev server's node runner, listen for messages on the parent port.
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) {
            parentPort.on('message', async (message)=>{
                try {
                    await handleMessage(message);
                    parentPort.postMessage('updated');
                } catch  {
                    parentPort.postMessage('restart');
                }
            });
            // After the bundle has finished running, notify the dev server that the HMR update is complete.
            queueMicrotask(()=>parentPort.postMessage('ready'));
        }
    } catch  {
        if (typeof WebSocket !== 'undefined') try {
            ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
        } catch (err) {
            // Ignore cloudflare workers error.
            if (err.message && !err.message.includes('Disallowed operation called within global scope')) console.error(err.message);
        }
    }
    if (ws) {
        // $FlowFixMe
        ws.onmessage = async function(event /*: {data: string, ...} */ ) {
            var data /*: HMRMessage */  = JSON.parse(event.data);
            await handleMessage(data);
        };
        if (ws instanceof WebSocket) {
            ws.onerror = function(e) {
                if (e.message) console.error(e.message);
            };
            ws.onclose = function() {
                console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
            };
        }
    }
}
async function handleMessage(data /*: HMRMessage */ ) {
    checkedAssets = {} /*: {|[string]: boolean|} */ ;
    disposedAssets = {} /*: {|[string]: boolean|} */ ;
    assetsToAccept = [];
    assetsToDispose = [];
    bundleNotFound = false;
    if (data.type === 'reload') fullReload();
    else if (data.type === 'update') {
        // Remove error overlay if there is one
        if (typeof document !== 'undefined') removeErrorOverlay();
        let assets = data.assets;
        // Handle HMR Update
        let handled = assets.every((asset)=>{
            return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
        });
        // Dispatch a custom event in case a bundle was not found. This might mean
        // an asset on the server changed and we should reload the page. This event
        // gives the client an opportunity to refresh without losing state
        // (e.g. via React Server Components). If e.preventDefault() is not called,
        // we will trigger a full page reload.
        if (handled && bundleNotFound && assets.some((a)=>a.envHash !== HMR_ENV_HASH) && typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') handled = !window.dispatchEvent(new CustomEvent('parcelhmrreload', {
            cancelable: true
        }));
        if (handled) {
            console.clear();
            // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
            if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
            await hmrApplyUpdates(assets);
            hmrDisposeQueue();
            // Run accept callbacks. This will also re-execute other disposed assets in topological order.
            let processedAssets = {};
            for(let i = 0; i < assetsToAccept.length; i++){
                let id = assetsToAccept[i][1];
                if (!processedAssets[id]) {
                    hmrAccept(assetsToAccept[i][0], id);
                    processedAssets[id] = true;
                }
            }
        } else fullReload();
    }
    if (data.type === 'error') {
        // Log parcel errors to console
        for (let ansiDiagnostic of data.diagnostics.ansi){
            let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
            console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
        }
        if (typeof document !== 'undefined') {
            // Render the fancy html overlay
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html);
            // $FlowFixMe
            document.body.appendChild(overlay);
        }
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="${protocol === 'wss' ? 'https' : 'http'}://${hostname}:${port}/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if (typeof location !== 'undefined' && 'reload' in location) location.reload();
    else if (typeof extCtx !== 'undefined' && extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
    else try {
        let { workerData, parentPort } = module.bundle.root('node:worker_threads') /*: any*/ ;
        if (workerData !== null && workerData !== void 0 && workerData.__parcel) parentPort.postMessage('restart');
    } catch (err) {
        console.error("[parcel] \u26A0\uFE0F An HMR update was not accepted. Please restart the process.");
    }
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout || typeof document === 'undefined') return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    checkedAssets = {};
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else if (a !== null) {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) {
            bundleNotFound = true;
            return true;
        }
        return hmrAcceptCheckOne(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return null;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    if (!cached) return true;
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
    return false;
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"kTBnD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _buffer = require("buffer");
var _process = require("process");
var _awsAmplify = require("aws-amplify");
var _auth = require("aws-amplify/auth");
var _amplifyconfigurationJson = require("./src/amplifyconfiguration.json");
var _amplifyconfigurationJsonDefault = parcelHelpers.interopDefault(_amplifyconfigurationJson);
(0, _awsAmplify.Amplify).configure((0, _amplifyconfigurationJsonDefault.default));
// Function to get the correct base path for redirects
function getBasePath() {
    let path = window.location.pathname;
    // If the path includes a file name (e.g., index.html), remove it.
    const lastSlashIndex = path.lastIndexOf('/');
    // Return the path up to the last slash, ensuring it ends with a slash.
    return path.substring(0, lastSlashIndex + 1);
}
// --- Route Protection for Protected Pages ---
(async ()=>{
    const currentPath = window.location.pathname;
    const isPublicPage = currentPath.endsWith('/') || currentPath.endsWith('index.html') || currentPath.includes('verify.html') || currentPath.includes('forgot-password.html');
    // If we are on a protected page, check for a session.
    if (!isPublicPage) try {
        // This will throw an error if the user is not authenticated.
        await (0, _auth.getCurrentUser)();
    } catch (error) {
        // No session, redirect to login.
        window.location.href = getBasePath() + 'index.html';
    }
})();
// --- Logic for index.html (Login/Signup Page) ---
if (window.location.pathname.endsWith('/') || window.location.pathname.endsWith('index.html')) {
    const container = document.getElementById('auth-container-animated');
    const signInForm = document.querySelector('.form-container.sign-in');
    const signUpForm = document.querySelector('.form-container.sign-up');
    // --- Device-specific form toggling ---
    if (window.innerWidth <= 768) {
        // --- MOBILE ---
        const toggleContainer = document.querySelector('.toggle-container');
        if (toggleContainer) toggleContainer.remove(); // Remove the element entirely on mobile
        const showLoginMobileBtn = document.getElementById('show-login-mobile');
        const showSignupMobileBtn = document.getElementById('show-signup-mobile');
        signInForm.style.display = 'flex';
        signUpForm.style.display = 'none';
        if (showSignupMobileBtn) showSignupMobileBtn.addEventListener('click', (e)=>{
            e.preventDefault();
            signInForm.style.display = 'none';
            signUpForm.style.display = 'flex';
        });
        if (showLoginMobileBtn) showLoginMobileBtn.addEventListener('click', (e)=>{
            e.preventDefault();
            signInForm.style.display = 'flex';
            signUpForm.style.display = 'none';
        });
    } else {
        // --- DESKTOP ---
        const registerBtn = document.getElementById('register');
        const loginBtn = document.getElementById('login');
        if (registerBtn) registerBtn.addEventListener('click', ()=>container.classList.add('active'));
        if (loginBtn) loginBtn.addEventListener('click', ()=>container.classList.remove('active'));
    }
    // --- Signup Logic ---
    const signupPasswordInput = document.getElementById('signup-password');
    const strengthMeterContainer = document.getElementById('strength-meter-container');
    const strengthBar = document.getElementById('strength-bar');
    const strengthText = document.getElementById('strength-text');
    const signupFormEl = document.getElementById('signup-form');
    if (signupPasswordInput) {
        strengthText.textContent = "Kay\u0131t Ol";
        signupPasswordInput.addEventListener('input', ()=>{
            const password = signupPasswordInput.value;
            const requirements = [
                {
                    regex: /.{8,}/,
                    message: "En az 8 karakter"
                },
                {
                    regex: /[A-Z]/,
                    message: "B\xfcy\xfck harf (A-Z)"
                },
                {
                    regex: /[a-z]/,
                    message: "K\xfc\xe7\xfck harf (a-z)"
                },
                {
                    regex: /[0-9]/,
                    message: "Say\u0131 (0-9)"
                },
                {
                    regex: /[!@#$%^&*]/,
                    message: "\xd6zel karakter (!@#$%^&*)"
                }
            ];
            if (password.length === 0) {
                strengthText.textContent = "Kay\u0131t Ol";
                strengthMeterContainer.classList.remove('transformed');
                strengthBar.style.width = '0%';
                strengthBar.className = 'strength-bar';
                return;
            }
            let strength = 0;
            let firstUnmetRequirement = null;
            requirements.forEach((req)=>{
                if (req.regex.test(password)) strength++;
                else if (!firstUnmetRequirement) firstUnmetRequirement = req.message;
            });
            const strengthPercentage = strength / requirements.length * 100;
            strengthBar.style.width = `${strengthPercentage}%`;
            if (strength === requirements.length) {
                strengthText.textContent = "Kay\u0131t Ol";
                strengthMeterContainer.classList.add('transformed');
            } else {
                strengthText.textContent = `${strength}/${requirements.length}: ${firstUnmetRequirement || ''}`;
                strengthMeterContainer.classList.remove('transformed');
            }
            strengthBar.className = 'strength-bar';
            if (strengthPercentage === 100) strengthBar.classList.add('strong');
            else if (strengthPercentage >= 60) strengthBar.classList.add('medium');
            else strengthBar.classList.add('weak');
        });
        strengthMeterContainer.addEventListener('click', ()=>{
            if (strengthMeterContainer.classList.contains('transformed')) signupFormEl.requestSubmit();
        });
    }
    // --- Login Logic ---
    const loginEmailInput = document.getElementById('login-email');
    const loginPasswordInput = document.getElementById('login-password');
    const loginButtonContainer = document.getElementById('login-button-container');
    const loginFormEl = document.getElementById('login-form');
    function validateLoginInputs() {
        const email = loginEmailInput.value;
        const password = loginPasswordInput.value;
        loginButtonContainer.classList.toggle('transformed', email.length > 0 && password.length > 0);
    }
    if (loginEmailInput && loginPasswordInput) {
        loginEmailInput.addEventListener('input', validateLoginInputs);
        loginPasswordInput.addEventListener('input', validateLoginInputs);
    }
    if (loginButtonContainer) loginButtonContainer.addEventListener('click', ()=>{
        if (loginButtonContainer.classList.contains('transformed')) loginFormEl.requestSubmit();
    });
    // --- Form Submissions ---
    if (loginFormEl) loginFormEl.addEventListener('submit', async (e)=>{
        e.preventDefault();
        const username = loginEmailInput.value;
        const password = loginPasswordInput.value;
        try {
            await (0, _auth.signIn)({
                username,
                password
            });
            // After successful sign-in, get user attributes to decide the redirect.
            const { attributes } = await (0, _auth.getCurrentUser)();
            const isProfileComplete = attributes['custom:setup_complete'] && attributes['custom:setup_complete'].toLowerCase() === 'evet';
            if (isProfileComplete) window.location.href = `${getBasePath()}home.html`;
            else window.location.href = `${getBasePath()}profile-setup.html`;
        } catch (error) {
            console.error("Giri\u015F hatas\u0131:", error);
            loginPasswordInput.classList.remove('input-error'); // Clear previous errors
            if (error.name === 'UserNotConfirmedException') window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(username)}`;
            else if (error.name === 'NotAuthorizedException') {
                loginPasswordInput.classList.add('input-error');
                setTimeout(()=>loginPasswordInput.classList.remove('input-error'), 500);
                alert("Kullan\u0131c\u0131 ad\u0131 veya \u015Fifre hatal\u0131.");
            } else alert(error.message);
        }
    });
    if (signupFormEl) signupFormEl.addEventListener('submit', async (e)=>{
        e.preventDefault();
        const email = document.getElementById('signup-email').value;
        const password = signupPasswordInput.value;
        try {
            await (0, _auth.signUp)({
                username: email,
                password,
                attributes: {
                    email
                }
            });
            alert("Hesap ba\u015Far\u0131yla olu\u015Fturuldu! Do\u011Frulama kodu e-postana g\xf6nderildi. Spam (gereksiz) klas\xf6r\xfcn\xfc kontrol etmeyi unutma.");
            window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(email)}`;
        } catch (error) {
            console.error("Kay\u0131t hatas\u0131:", error);
            alert(error.message);
        }
    });
}
// --- Logic for verify.html ---
if (window.location.pathname.includes('verify.html')) {
    const { confirmSignUp, resendSignUpCode } = await require("94c3965f01f48f4e");
    const emailDisplay = document.getElementById('verify-email-display');
    const urlParams = new URLSearchParams(window.location.search);
    const emailFromUrl = urlParams.get('email');
    if (emailFromUrl) emailDisplay.textContent = emailFromUrl;
    document.getElementById('verify-form').addEventListener('submit', async (e)=>{
        e.preventDefault();
        const code = document.getElementById('verification-code').value;
        if (!emailFromUrl || !code) return alert("E-posta veya do\u011Frulama kodu eksik.");
        try {
            await confirmSignUp({
                username: emailFromUrl,
                confirmationCode: code
            });
            alert("E-posta ba\u015Far\u0131yla do\u011Fruland\u0131! L\xfctfen giri\u015F yap\u0131n.");
            window.location.href = `${getBasePath()}index.html`;
        } catch (error) {
            console.error("Do\u011Frulama hatas\u0131:", error);
            alert(error.message);
        }
    });
    const resendContainer = document.getElementById('resend-code-container');
    const securityMessages = [
        "Bu sayfa tamamen g\xfcvenlidir.",
        "E-posta ula\u015Fmad\u0131ysa spam (gereksiz) klas\xf6r\xfcn\xfcz\xfc kontrol edin."
    ];
    let messageIndex = 0;
    function setupResendButton() {
        resendContainer.innerHTML = `
            <div id="resend-code-progress"></div>
            <div id="resend-code-text"></div>
        `;
        const progressEl = document.getElementById('resend-code-progress');
        const textEl = document.getElementById('resend-code-text');
        let countdown = 30; // Countdown changed to 30 seconds
        resendContainer.classList.remove('ready');
        progressEl.style.transition = 'none'; // Disable transition for immediate reset
        progressEl.style.width = '0%';
        const interval = setInterval(()=>{
            countdown--;
            const progressPercentage = (30 - countdown) / 30 * 100;
            progressEl.style.transition = 'width 1s linear'; // Re-enable for smooth progress
            progressEl.style.width = `${progressPercentage}%`;
            textEl.textContent = `TEKRAR G\xd6NDER (${countdown}s)`;
            if (countdown <= 0) {
                clearInterval(interval);
                resendContainer.classList.add('ready');
                textEl.textContent = "KODU TEKRAR G\xd6NDER";
            }
        }, 1000);
    }
    resendContainer.addEventListener('click', async ()=>{
        if (resendContainer.classList.contains('ready')) {
            if (!emailFromUrl) return alert("E-posta adresi bulunamad\u0131.");
            try {
                await resendSignUpCode({
                    username: emailFromUrl
                });
                alert("Do\u011Frulama kodu tekrar g\xf6nderildi. Spam (gereksiz) klas\xf6r\xfcn\xfc kontrol etmeyi unutma.");
                setupResendButton(); // Restart timer
            } catch (error) {
                console.error("Kodu tekrar g\xf6nderme hatas\u0131:", error);
                alert(error.message);
            }
        } else {
            alert(securityMessages[messageIndex]); // Changed to alert
            messageIndex = (messageIndex + 1) % securityMessages.length;
        }
    });
    setupResendButton(); // Initial setup
}
// --- Logic for forgot-password.html ---
if (window.location.pathname.includes('forgot-password.html')) {
    const sendCodeForm = document.getElementById('send-code-form');
    const resetPasswordForm = document.getElementById('reset-password-form');
    const emailInput = document.getElementById('reset-email');
    sendCodeForm.addEventListener('submit', async (e)=>{
        e.preventDefault();
        try {
            await (0, _auth.resetPassword)({
                username: emailInput.value
            });
            alert("S\u0131f\u0131rlama kodu e-postana g\xf6nderildi. Spam (gereksiz) klas\xf6r\xfcn\xfc kontrol etmeyi unutma.");
            // Switch forms by toggling the 'hidden' class, which is the correct way
            sendCodeForm.classList.add('hidden');
            resetPasswordForm.classList.remove('hidden');
        } catch (error) {
            console.error("\u015Eifre s\u0131f\u0131rlama hatas\u0131:", error);
            if (error.name === 'UserNotConfirmedException' || error.name === 'InvalidParameterException') {
                const { resendSignUpCode } = await require("94c3965f01f48f4e");
                try {
                    await resendSignUpCode({
                        username: emailInput.value
                    });
                    alert("\u015Eifrenizi s\u0131f\u0131rlamak i\xe7in \xf6nce e-postan\u0131z\u0131 do\u011Frulaman\u0131z gerekiyor. Size yeni bir do\u011Frulama kodu g\xf6nderdik, l\xfctfen spam (gereksiz) klas\xf6r\xfcn\xfcz\xfc kontrol edin.");
                    window.location.href = `${getBasePath()}verify.html?email=${encodeURIComponent(emailInput.value)}`;
                } catch (resendError) {
                    console.error("Do\u011Frulama kodu g\xf6nderme hatas\u0131:", resendError);
                    alert("Bir hata olu\u015Ftu. L\xfctfen tekrar deneyin.");
                }
            } else alert(error.message);
        }
    });
    resetPasswordForm.addEventListener('submit', async (e)=>{
        e.preventDefault();
        const confirmationCode = document.getElementById('reset-code').value;
        const newPassword = document.getElementById('new-password').value;
        try {
            await (0, _auth.confirmResetPassword)({
                username: emailInput.value,
                confirmationCode,
                newPassword
            });
            alert("\u015Eifren ba\u015Far\u0131yla de\u011Fi\u015Ftirildi. \u015Eimdi giri\u015F yapabilirsin.");
            window.location.href = `${getBasePath()}index.html`;
        } catch (error) {
            console.error("Yeni \u015Fifre ayarlama hatas\u0131:", error);
            alert(error.message);
        }
    });
}
// --- Logic for home.html ---
if (window.location.pathname.includes('home.html')) {
    // NOTE: The settings menu and edit profile button are assumed to be dynamically added.
    // This code adds a listener to the document to catch the click on the button when it appears.
    document.addEventListener('click', (e)=>{
        // Assuming the button or its parent has an ID like 'edit-profile-option'
        if (e.target.matches('#edit-profile-option') || e.target.closest('#edit-profile-option')) {
            e.preventDefault();
            window.location.href = `${getBasePath()}profile-setup.html?mode=edit`;
        }
    });
    const dailyTaskText = document.getElementById('daily-task-text');
    const streakCircles = document.querySelectorAll('.streak-circle');
    const goodDeeds = [
        "Bir sokak hayvan\u0131na su ver.",
        "Ya\u015Fl\u0131 bir kom\u015Funun po\u015Fetlerini ta\u015F\u0131mas\u0131na yard\u0131m et.",
        "Toplu ta\u015F\u0131mada birine yer ver.",
        "Bug\xfcn birine i\xe7ten bir \u015Fekilde iltifat et.",
        "\xc7evrendeki bir \xe7\xf6p\xfc yere atma, \xe7\xf6p kutusuna at.",
        "Bir arkada\u015F\u0131na nas\u0131l oldu\u011Funu sor.",
        "Okudu\u011Fun g\xfczel bir kitab\u0131 birine hediye et.",
        "Bir fidan dik."
    ];
    function setRandomDeed() {
        const randomIndex = Math.floor(Math.random() * goodDeeds.length);
        dailyTaskText.textContent = goodDeeds[randomIndex];
    }
    streakCircles.forEach((circle)=>{
        circle.addEventListener('click', ()=>{
            circle.classList.toggle('completed');
        });
    });
    setRandomDeed();
}
// --- Logic for profile-setup.html ---
if (window.location.pathname.includes('profile-setup.html')) (async ()=>{
    try {
        const { attributes } = await (0, _auth.getCurrentUser)();
        const { updateUserAttributes } = await require("94c3965f01f48f4e");
        const urlParams = new URLSearchParams(window.location.search);
        const mode = urlParams.get('mode');
        const isEditMode = mode === 'edit';
        // --- DOM Elements ---
        const steps = document.querySelectorAll('.setup-step');
        const progressBarInner = document.querySelector('.progress-bar-inner');
        const h1 = document.querySelector('h1');
        const p = document.querySelector('p');
        const step1Btn = document.getElementById('step-1-btn');
        const step2Btn = document.getElementById('step-2-btn');
        const completeProfileBtn = document.getElementById('complete-profile-btn');
        const finalSubmitBtn = document.querySelector('#step-3-form button[type="submit"]');
        // --- Form Inputs ---
        const nameInput = document.getElementById('name');
        const birthdateInput = document.getElementById('birthdate');
        const genderInput = document.getElementById('gender');
        const genderOptions = document.querySelectorAll('.gender-option');
        const preferenceCards = document.querySelectorAll('.preference-card');
        const interestCounter = document.getElementById('interest-counter');
        const socialInputs = {
            instagram: document.getElementById('instagram'),
            tiktok: document.getElementById('tiktok'),
            x: document.getElementById('x'),
            facebook: document.getElementById('facebook'),
            reddit: document.getElementById('reddit'),
            linkedin: document.getElementById('linkedin')
        };
        let currentStep = 0;
        const preferences = [];
        // --- Page Setup for Edit Mode ---
        if (isEditMode) {
            // Change texts
            h1.textContent = "Profilini D\xfczenle";
            p.textContent = "Bilgilerini a\u015Fa\u011F\u0131dan g\xfcncelleyebilirsin.";
            step1Btn.textContent = "De\u011Fi\u015Fiklikleri Kaydet";
            step2Btn.textContent = "De\u011Fi\u015Fiklikleri Kaydet";
            completeProfileBtn.textContent = "Vazge\xe7";
            finalSubmitBtn.textContent = "De\u011Fi\u015Fiklikleri Kaydet";
            // Pre-fill data
            nameInput.value = attributes.name || '';
            birthdateInput.value = attributes.birthdate || '';
            genderInput.value = attributes.gender || '';
            // Select gender
            if (attributes.gender) genderOptions.forEach((opt)=>{
                if (opt.dataset.gender === attributes.gender) opt.classList.add('selected');
            });
            // Pre-fill social media
            for(const key in socialInputs)if (socialInputs[key]) socialInputs[key].value = attributes[`custom:social_${key}`] || '';
            // Select interests
            const savedPreferences = attributes['custom:iyilik_tercihleri'] ? attributes['custom:iyilik_tercihleri'].split(',') : [];
            savedPreferences.forEach((pref)=>{
                preferences.push(pref);
                const card = document.querySelector(`.preference-card[data-preference="${pref}"]`);
                if (card) card.classList.add('selected');
            });
            interestCounter.textContent = `(${preferences.length}/6)`;
        }
        // --- General Logic (applies to both modes) ---
        const updateProgressBar = ()=>{
            const progress = currentStep / (steps.length - 1) * 100;
            progressBarInner.style.width = `${progress}%`;
        };
        const showStep = (stepIndex)=>{
            steps.forEach((step, index)=>step.classList.toggle('active', index === stepIndex));
            updateProgressBar();
        };
        // Step 1 Logic
        genderOptions.forEach((option)=>{
            option.addEventListener('click', ()=>{
                genderOptions.forEach((opt)=>opt.classList.remove('selected'));
                option.classList.add('selected');
                genderInput.value = option.dataset.gender;
            });
        });
        document.getElementById('step-1-btn').addEventListener('click', ()=>{
            if (nameInput.value.trim() && birthdateInput.value && genderInput.value) {
                if (isEditMode) return submitProfile(false); // Save and stay
                currentStep = 1;
                showStep(currentStep);
            } else alert("L\xfctfen devam etmeden \xf6nce t\xfcm alanlar\u0131 doldurun.");
        });
        // Step 2 Logic
        preferenceCards.forEach((card)=>{
            card.addEventListener('click', ()=>{
                const preference = card.dataset.preference;
                if (preferences.includes(preference)) {
                    preferences.splice(preferences.indexOf(preference), 1);
                    card.classList.remove('selected');
                } else if (preferences.length < 6) {
                    preferences.push(preference);
                    card.classList.add('selected');
                } else alert("En fazla 6 ilgi alan\u0131 se\xe7ebilirsiniz.");
                interestCounter.textContent = `(${preferences.length}/6)`;
                const isStepValid = preferences.length >= 1;
                step2Btn.disabled = !isStepValid;
                completeProfileBtn.disabled = !isStepValid;
            });
        });
        step2Btn.addEventListener('click', ()=>{
            if (preferences.length >= 1) {
                if (isEditMode) return submitProfile(false); // Save and stay
                currentStep = 2;
                showStep(currentStep);
            } else alert("L\xfctfen en az 1 ilgi alan\u0131 se\xe7in.");
        });
        // Submission Logic
        const submitProfile = async (goToHome = true)=>{
            try {
                const attributesToUpdate = {
                    name: String(nameInput.value),
                    birthdate: String(birthdateInput.value),
                    gender: String(genderInput.value),
                    'custom:social_instagram': String(socialInputs.instagram.value),
                    'custom:social_tiktok': String(socialInputs.tiktok.value),
                    'custom:social_x': String(socialInputs.x.value),
                    'custom:social_facebook': String(socialInputs.facebook.value),
                    'custom:social_reddit': String(socialInputs.reddit.value),
                    'custom:social_linkedin': String(socialInputs.linkedin.value),
                    'custom:iyilik_tercihleri': String(preferences.join(',')),
                    'custom:setup_complete': 'evet'
                };
                await updateUserAttributes({
                    userAttributes: attributesToUpdate
                });
                if (goToHome) window.location.href = `${getBasePath()}home.html`;
                else alert("Profilin ba\u015Far\u0131yla g\xfcncellendi!");
            } catch (error) {
                console.error("Profil g\xfcncelleme hatas\u0131:", error);
                alert("Profiliniz g\xfcncellenirken bir hata olu\u015Ftu. L\xfctfen tekrar deneyin.");
            }
        };
        completeProfileBtn.addEventListener('click', ()=>{
            if (isEditMode) return window.location.href = `${getBasePath()}home.html`; // Cancel and go home
            submitProfile(true);
        });
        document.getElementById('step-3-form').addEventListener('submit', (e)=>{
            e.preventDefault();
            submitProfile(true);
        });
        // Initial State
        const isStepValid = preferences.length >= 1;
        step2Btn.disabled = !isStepValid;
        completeProfileBtn.disabled = !isStepValid;
        showStep(currentStep);
    } catch (error) {
        console.error("Authentication error on profile setup page, redirecting.", error);
        window.location.href = `${getBasePath()}index.html`;
    }
})();

},{"buffer":"bCaf4","process":"euskh","aws-amplify":"dobGB","aws-amplify/auth":"bLlRO","./src/amplifyconfiguration.json":"lMtgW","94c3965f01f48f4e":"jFQEh","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bCaf4":[function(require,module,exports,__globalThis) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' // eslint-disable-line dot-notation
 ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

},{"9c62938f1dccc73c":"9I2RJ","aceacb6a4531a9d2":"geXY6"}],"9I2RJ":[function(require,module,exports,__globalThis) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
    }
    return parts.join('');
}

},{}],"geXY6":[function(require,module,exports,__globalThis) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"euskh":[function(require,module,exports,__globalThis) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"dobGB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Amplify", ()=>(0, _initSingletonMjs.DefaultAmplify));
var _initSingletonMjs = require("./initSingleton.mjs");

},{"./initSingleton.mjs":"cRL9u","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cRL9u":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultAmplify", ()=>DefaultAmplify);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _cognito = require("@aws-amplify/auth/cognito");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const DefaultAmplify = {
    /**
     * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.
     *
     * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the
     * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.
     * @param libraryOptions The {@link LibraryOptions} additional options for the library.
     *
     * @example
     * import config from './amplifyconfiguration.json';
     *
     * Amplify.configure(config);
     */ configure (resourceConfig, libraryOptions) {
        const resolvedResourceConfig = (0, _utils.parseAmplifyConfig)(resourceConfig);
        const cookieBasedKeyValueStorage = new (0, _core.CookieStorage)({
            sameSite: 'lax'
        });
        const resolvedKeyValueStorage = libraryOptions?.ssr ? cookieBasedKeyValueStorage : (0, _core.defaultStorage);
        const resolvedCredentialsProvider = libraryOptions?.ssr ? new (0, _cognito.CognitoAWSCredentialsAndIdentityIdProvider)(new (0, _cognito.DefaultIdentityIdStore)(cookieBasedKeyValueStorage)) : (0, _cognito.cognitoCredentialsProvider);
        // If no Auth config is provided, no special handling will be required, configure as is.
        // Otherwise, we can assume an Auth config is provided from here on.
        if (!resolvedResourceConfig.Auth) {
            (0, _core.Amplify).configure(resolvedResourceConfig, libraryOptions);
            return;
        }
        // If Auth options are provided, always just configure as is.
        // Otherwise, we can assume no Auth libraryOptions were provided from here on.
        if (libraryOptions?.Auth) {
            (0, _core.Amplify).configure(resolvedResourceConfig, libraryOptions);
            return;
        }
        // If no Auth libraryOptions were previously configured, then always add default providers.
        if (!(0, _core.Amplify).libraryOptions.Auth) {
            (0, _cognito.cognitoUserPoolsTokenProvider).setAuthConfig(resolvedResourceConfig.Auth);
            (0, _cognito.cognitoUserPoolsTokenProvider).setKeyValueStorage(// TODO: allow configure with a public interface
            resolvedKeyValueStorage);
            (0, _core.Amplify).configure(resolvedResourceConfig, {
                ...libraryOptions,
                Auth: {
                    tokenProvider: (0, _cognito.cognitoUserPoolsTokenProvider),
                    credentialsProvider: resolvedCredentialsProvider
                }
            });
            return;
        }
        // At this point, Auth libraryOptions would have been previously configured and no overriding
        // Auth options were given, so we should preserve the currently configured Auth libraryOptions.
        if (libraryOptions) {
            const authLibraryOptions = (0, _core.Amplify).libraryOptions.Auth;
            // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.
            if (libraryOptions.ssr !== undefined) {
                (0, _cognito.cognitoUserPoolsTokenProvider).setKeyValueStorage(// TODO: allow configure with a public interface
                resolvedKeyValueStorage);
                authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;
            }
            (0, _core.Amplify).configure(resolvedResourceConfig, {
                Auth: authLibraryOptions,
                ...libraryOptions
            });
            return;
        }
        // Finally, if there were no libraryOptions given at all, we should simply not touch the currently
        // configured libraryOptions.
        (0, _core.Amplify).configure(resolvedResourceConfig);
    },
    /**
     * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling
     * `Amplify.configure`.
     *
     * @returns An {@link ResourcesConfig} object.
     */ getConfig () {
        return (0, _core.Amplify).getConfig();
    }
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/auth/cognito":"8Zj4n","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hJ80y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Hub", ()=>(0, _indexMjs.Hub));
parcelHelpers.export(exports, "decodeJWT", ()=>(0, _indexMjs1.decodeJWT));
parcelHelpers.export(exports, "Amplify", ()=>(0, _amplifyMjs.Amplify));
parcelHelpers.export(exports, "AmplifyClassV6", ()=>(0, _amplifyMjs.AmplifyClass));
parcelHelpers.export(exports, "fetchAuthSession", ()=>(0, _fetchAuthSessionMjs.fetchAuthSession));
parcelHelpers.export(exports, "clearCredentials", ()=>(0, _clearCredentialsMjs.clearCredentials));
parcelHelpers.export(exports, "createGetCredentialsForIdentityClient", ()=>(0, _createGetCredentialsForIdentityClientMjs.createGetCredentialsForIdentityClient));
parcelHelpers.export(exports, "createGetIdClient", ()=>(0, _createGetIdClientMjs.createGetIdClient));
parcelHelpers.export(exports, "cognitoIdentityPoolEndpointResolver", ()=>(0, _cognitoIdentityPoolEndpointResolverMjs.cognitoIdentityPoolEndpointResolver));
parcelHelpers.export(exports, "defaultStorage", ()=>(0, _indexMjs2.defaultStorage));
parcelHelpers.export(exports, "sessionStorage", ()=>(0, _indexMjs2.sessionStorage));
parcelHelpers.export(exports, "sharedInMemoryStorage", ()=>(0, _indexMjs2.sharedInMemoryStorage));
parcelHelpers.export(exports, "syncSessionStorage", ()=>(0, _indexMjs2.syncSessionStorage));
parcelHelpers.export(exports, "Cache", ()=>(0, _indexMjs3.Cache));
parcelHelpers.export(exports, "I18n", ()=>(0, _indexMjs4.I18n));
parcelHelpers.export(exports, "ConsoleLogger", ()=>(0, _consoleLoggerMjs.ConsoleLogger));
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _serviceWorkerMjs.ServiceWorkerClass));
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _cookieStorageMjs.CookieStorage));
var _indexMjs = require("./Hub/index.mjs");
var _indexMjs1 = require("./singleton/Auth/utils/index.mjs");
var _amplifyMjs = require("./singleton/Amplify.mjs");
var _fetchAuthSessionMjs = require("./singleton/apis/fetchAuthSession.mjs");
var _clearCredentialsMjs = require("./singleton/apis/clearCredentials.mjs");
var _createGetCredentialsForIdentityClientMjs = require("./foundation/factories/serviceClients/cognitoIdentity/createGetCredentialsForIdentityClient.mjs");
var _createGetIdClientMjs = require("./foundation/factories/serviceClients/cognitoIdentity/createGetIdClient.mjs");
var _cognitoIdentityPoolEndpointResolverMjs = require("./foundation/factories/serviceClients/cognitoIdentity/cognitoIdentityPoolEndpointResolver.mjs");
var _indexMjs2 = require("./storage/index.mjs");
var _indexMjs3 = require("./Cache/index.mjs");
var _indexMjs4 = require("./I18n/index.mjs");
var _consoleLoggerMjs = require("./Logger/ConsoleLogger.mjs");
var _serviceWorkerMjs = require("./ServiceWorker/ServiceWorker.mjs");
var _cookieStorageMjs = require("./storage/CookieStorage.mjs");

},{"./Hub/index.mjs":"cN8sN","./singleton/Auth/utils/index.mjs":"jzax8","./singleton/Amplify.mjs":"7YjAe","./singleton/apis/fetchAuthSession.mjs":"4o1Bn","./singleton/apis/clearCredentials.mjs":"km7Jc","./foundation/factories/serviceClients/cognitoIdentity/createGetCredentialsForIdentityClient.mjs":"lFgGa","./foundation/factories/serviceClients/cognitoIdentity/createGetIdClient.mjs":"hBzat","./foundation/factories/serviceClients/cognitoIdentity/cognitoIdentityPoolEndpointResolver.mjs":"3vpaS","./storage/index.mjs":"d2uDX","./Cache/index.mjs":"2Ws5t","./I18n/index.mjs":"iR4Yk","./Logger/ConsoleLogger.mjs":"dnAuQ","./ServiceWorker/ServiceWorker.mjs":"ehIJx","./storage/CookieStorage.mjs":"54VMX","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cN8sN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AMPLIFY_SYMBOL", ()=>AMPLIFY_SYMBOL);
parcelHelpers.export(exports, "Hub", ()=>Hub);
parcelHelpers.export(exports, "HubClass", ()=>HubClass);
parcelHelpers.export(exports, "HubInternal", ()=>HubInternal);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _constantsMjs = require("../constants.mjs");
var _amplifyErrorMjs = require("../errors/AmplifyError.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' ? Symbol('amplify_default') : '@@amplify_default';
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('Hub');
class HubClass {
    constructor(name){
        this.listeners = new Map();
        this.protectedChannels = [
            'core',
            'auth',
            'api',
            'analytics',
            'interactions',
            'pubsub',
            'storage',
            'ui',
            'xr'
        ];
        this.name = name;
    }
    /**
     * Used internally to remove a Hub listener.
     *
     * @remarks
     * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.
     */ _remove(channel, listener) {
        const holder = this.listeners.get(channel);
        if (!holder) {
            logger.warn(`No listeners for ${channel}`);
            return;
        }
        this.listeners.set(channel, [
            ...holder.filter(({ callback })=>callback !== listener)
        ]);
    }
    dispatch(channel, payload, source, ampSymbol) {
        if (typeof channel === 'string' && this.protectedChannels.indexOf(channel) > -1) {
            const hasAccess = ampSymbol === AMPLIFY_SYMBOL;
            if (!hasAccess) logger.warn(`WARNING: ${channel} is protected and dispatching on it can have unintended consequences`);
        }
        const capsule = {
            channel,
            payload: {
                ...payload
            },
            source,
            patternInfo: []
        };
        try {
            this._toListeners(capsule);
        } catch (e) {
            logger.error(e);
        }
    }
    listen(channel, callback, listenerName = 'noname') {
        let cb;
        if (typeof callback !== 'function') throw new (0, _amplifyErrorMjs.AmplifyError)({
            name: (0, _constantsMjs.NO_HUBCALLBACK_PROVIDED_EXCEPTION),
            message: 'No callback supplied to Hub'
        });
        else // Needs to be casted as a more generic type
        cb = callback;
        let holder = this.listeners.get(channel);
        if (!holder) {
            holder = [];
            this.listeners.set(channel, holder);
        }
        holder.push({
            name: listenerName,
            callback: cb
        });
        return ()=>{
            this._remove(channel, cb);
        };
    }
    _toListeners(capsule) {
        const { channel, payload } = capsule;
        const holder = this.listeners.get(channel);
        if (holder) holder.forEach((listener)=>{
            logger.debug(`Dispatching to ${channel} with `, payload);
            try {
                listener.callback(capsule);
            } catch (e) {
                logger.error(e);
            }
        });
    }
}
/* We export a __default__ instance of HubClass to use it as a
pseudo Singleton for the main messaging bus, however you can still create
your own instance of HubClass() for a separate "private bus" of events. */ const Hub = new HubClass('__default__');
/**
 * @internal
 *
 * Internal hub used for core Amplify functionality. Not intended for use outside of Amplify.
 *
 */ const HubInternal = new HubClass('internal-hub');

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","../constants.mjs":"dq3x2","../errors/AmplifyError.mjs":"G8oLh","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dnAuQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ConsoleLogger", ()=>ConsoleLogger);
var _constantsMjs = require("../constants.mjs");
var _typesMjs = require("./types.mjs");
/* eslint-disable no-console */ // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const LOG_LEVELS = {
    VERBOSE: 1,
    DEBUG: 2,
    INFO: 3,
    WARN: 4,
    ERROR: 5,
    NONE: 6
};
/**
 * Write logs
 * @class Logger
 */ class ConsoleLogger {
    /**
     * @constructor
     * @param {string} name - Name of the logger
     */ constructor(name, level = (0, _typesMjs.LogType).WARN){
        this.name = name;
        this.level = level;
        this._pluggables = [];
    }
    _padding(n) {
        return n < 10 ? '0' + n : '' + n;
    }
    _ts() {
        const dt = new Date();
        return [
            this._padding(dt.getMinutes()),
            this._padding(dt.getSeconds())
        ].join(':') + '.' + dt.getMilliseconds();
    }
    configure(config) {
        if (!config) return this._config;
        this._config = config;
        return this._config;
    }
    /**
     * Write log
     * @method
     * @memeberof Logger
     * @param {LogType|string} type - log type, default INFO
     * @param {string|object} msg - Logging message or object
     */ _log(type, ...msg) {
        let loggerLevelName = this.level;
        if (ConsoleLogger.LOG_LEVEL) loggerLevelName = ConsoleLogger.LOG_LEVEL;
        if (typeof window !== 'undefined' && window.LOG_LEVEL) loggerLevelName = window.LOG_LEVEL;
        const loggerLevel = LOG_LEVELS[loggerLevelName];
        const typeLevel = LOG_LEVELS[type];
        if (!(typeLevel >= loggerLevel)) // Do nothing if type is not greater than or equal to logger level (handle undefined)
        return;
        let log = console.log.bind(console);
        if (type === (0, _typesMjs.LogType).ERROR && console.error) log = console.error.bind(console);
        if (type === (0, _typesMjs.LogType).WARN && console.warn) log = console.warn.bind(console);
        if (ConsoleLogger.BIND_ALL_LOG_LEVELS) {
            if (type === (0, _typesMjs.LogType).INFO && console.info) log = console.info.bind(console);
            if (type === (0, _typesMjs.LogType).DEBUG && console.debug) log = console.debug.bind(console);
        }
        const prefix = `[${type}] ${this._ts()} ${this.name}`;
        let message = '';
        if (msg.length === 1 && typeof msg[0] === 'string') {
            message = `${prefix} - ${msg[0]}`;
            log(message);
        } else if (msg.length === 1) {
            message = `${prefix} ${msg[0]}`;
            log(prefix, msg[0]);
        } else if (typeof msg[0] === 'string') {
            let obj = msg.slice(1);
            if (obj.length === 1) obj = obj[0];
            message = `${prefix} - ${msg[0]} ${obj}`;
            log(`${prefix} - ${msg[0]}`, obj);
        } else {
            message = `${prefix} ${msg}`;
            log(prefix, msg);
        }
        for (const plugin of this._pluggables){
            const logEvent = {
                message,
                timestamp: Date.now()
            };
            plugin.pushLogs([
                logEvent
            ]);
        }
    }
    /**
     * Write General log. Default to INFO
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ log(...msg) {
        this._log((0, _typesMjs.LogType).INFO, ...msg);
    }
    /**
     * Write INFO log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ info(...msg) {
        this._log((0, _typesMjs.LogType).INFO, ...msg);
    }
    /**
     * Write WARN log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ warn(...msg) {
        this._log((0, _typesMjs.LogType).WARN, ...msg);
    }
    /**
     * Write ERROR log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ error(...msg) {
        this._log((0, _typesMjs.LogType).ERROR, ...msg);
    }
    /**
     * Write DEBUG log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ debug(...msg) {
        this._log((0, _typesMjs.LogType).DEBUG, ...msg);
    }
    /**
     * Write VERBOSE log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ verbose(...msg) {
        this._log((0, _typesMjs.LogType).VERBOSE, ...msg);
    }
    addPluggable(pluggable) {
        if (pluggable && pluggable.getCategoryName() === (0, _constantsMjs.AWS_CLOUDWATCH_CATEGORY)) {
            this._pluggables.push(pluggable);
            pluggable.configure(this._config);
        }
    }
    listPluggables() {
        return this._pluggables;
    }
}
ConsoleLogger.LOG_LEVEL = null;
ConsoleLogger.BIND_ALL_LOG_LEVELS = false;

},{"../constants.mjs":"dq3x2","./types.mjs":"3fkEs","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dq3x2":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Logging constants
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_CATEGORY", ()=>AWS_CLOUDWATCH_CATEGORY);
parcelHelpers.export(exports, "NO_HUBCALLBACK_PROVIDED_EXCEPTION", ()=>NO_HUBCALLBACK_PROVIDED_EXCEPTION);
parcelHelpers.export(exports, "USER_AGENT_HEADER", ()=>USER_AGENT_HEADER);
const AWS_CLOUDWATCH_CATEGORY = 'Logging';
const USER_AGENT_HEADER = 'x-amz-user-agent';
// Error exception code constants
const NO_HUBCALLBACK_PROVIDED_EXCEPTION = 'NoHubcallbackProvidedException';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fE9oC":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"3fkEs":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LogType", ()=>LogType);
var LogType;
(function(LogType) {
    LogType["DEBUG"] = "DEBUG";
    LogType["ERROR"] = "ERROR";
    LogType["INFO"] = "INFO";
    LogType["WARN"] = "WARN";
    LogType["VERBOSE"] = "VERBOSE";
    LogType["NONE"] = "NONE";
})(LogType || (LogType = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"G8oLh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyError", ()=>AmplifyError);
class AmplifyError extends Error {
    /**
     *  Constructs an AmplifyError.
     *
     * @param message text that describes the main problem.
     * @param underlyingError the underlying cause of the error.
     * @param recoverySuggestion suggestion to recover from the error.
     *
     */ constructor({ message, name, recoverySuggestion, underlyingError, metadata }){
        super(message);
        this.name = name;
        this.underlyingError = underlyingError;
        this.recoverySuggestion = recoverySuggestion;
        if (metadata) {
            // If metadata exists, explicitly only record the following properties.
            const { extendedRequestId, httpStatusCode, requestId } = metadata;
            this.metadata = {
                extendedRequestId,
                httpStatusCode,
                requestId
            };
        }
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = AmplifyError;
        Object.setPrototypeOf(this, AmplifyError.prototype);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4wxZl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyErrorCode", ()=>AmplifyErrorCode);
var AmplifyErrorCode;
(function(AmplifyErrorCode) {
    AmplifyErrorCode["NoEndpointId"] = "NoEndpointId";
    AmplifyErrorCode["PlatformNotSupported"] = "PlatformNotSupported";
    AmplifyErrorCode["Unknown"] = "Unknown";
    AmplifyErrorCode["NetworkError"] = "NetworkError";
})(AmplifyErrorCode || (AmplifyErrorCode = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6kl5J":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assert", ()=>assert);
var _errorsMjs = require("../types/errors.mjs");
var _createAssertionFunctionMjs = require("./createAssertionFunction.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const amplifyErrorMap = {
    [(0, _errorsMjs.AmplifyErrorCode).NoEndpointId]: {
        message: 'Endpoint ID was not found and was unable to be created.'
    },
    [(0, _errorsMjs.AmplifyErrorCode).PlatformNotSupported]: {
        message: 'Function not supported on current platform.'
    },
    [(0, _errorsMjs.AmplifyErrorCode).Unknown]: {
        message: 'An unknown error occurred.'
    },
    [(0, _errorsMjs.AmplifyErrorCode).NetworkError]: {
        message: 'A network error has occurred.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(amplifyErrorMap);

},{"../types/errors.mjs":"4wxZl","./createAssertionFunction.mjs":"23eMH","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"23eMH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAssertionFunction", ()=>createAssertionFunction);
var _amplifyErrorMjs = require("./AmplifyError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createAssertionFunction = (errorMap, AssertionError = (0, _amplifyErrorMjs.AmplifyError))=>(assertion, name, additionalContext)=>{
        const { message, recoverySuggestion } = errorMap[name];
        if (!assertion) throw new AssertionError({
            name,
            message: additionalContext ? `${message} ${additionalContext}` : message,
            recoverySuggestion
        });
    };

},{"./AmplifyError.mjs":"G8oLh","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jzax8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertIdentityPoolIdConfig", ()=>assertIdentityPoolIdConfig);
parcelHelpers.export(exports, "assertOAuthConfig", ()=>assertOAuthConfig);
parcelHelpers.export(exports, "assertTokenProviderConfig", ()=>assertTokenProviderConfig);
parcelHelpers.export(exports, "decodeJWT", ()=>decodeJWT);
var _base64DecoderMjs = require("../../../utils/convert/base64/base64Decoder.mjs");
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _errorHelpersMjs1 = require("./errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function assertTokenProviderConfig(cognitoConfig) {
    let assertionValid = true; // assume valid until otherwise proveed
    if (!cognitoConfig) assertionValid = false;
    else assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;
    (0, _errorHelpersMjs1.assert)(assertionValid, (0, _errorHelpersMjs1.AuthConfigurationErrorCode).AuthUserPoolException);
}
function assertOAuthConfig(cognitoConfig) {
    const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain && !!cognitoConfig?.loginWith?.oauth?.redirectSignOut && !!cognitoConfig?.loginWith?.oauth?.redirectSignIn && !!cognitoConfig?.loginWith?.oauth?.responseType;
    (0, _errorHelpersMjs1.assert)(validOAuthConfig, (0, _errorHelpersMjs1.AuthConfigurationErrorCode).OAuthNotConfigureException);
}
function assertIdentityPoolIdConfig(cognitoConfig) {
    const validConfig = !!cognitoConfig?.identityPoolId;
    (0, _errorHelpersMjs1.assert)(validConfig, (0, _errorHelpersMjs1.AuthConfigurationErrorCode).InvalidIdentityPoolIdException);
}
/**
 * Decodes payload of JWT token
 *
 * @param {String} token A string representing a token to be decoded
 * @throws {@link Error} - Throws error when token is invalid or payload malformed.
 */ function decodeJWT(token) {
    const tokenParts = token.split('.');
    if (tokenParts.length !== 3) throw new Error('Invalid token');
    try {
        const base64WithUrlSafe = tokenParts[1];
        const base64 = base64WithUrlSafe.replace(/-/g, '+').replace(/_/g, '/');
        const jsonStr = decodeURIComponent((0, _base64DecoderMjs.base64Decoder).convert(base64).split('').map((char)=>`%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`).join(''));
        const payload = JSON.parse(jsonStr);
        return {
            toString: ()=>token,
            payload
        };
    } catch (err) {
        throw new Error('Invalid token payload');
    }
}

},{"../../../utils/convert/base64/base64Decoder.mjs":"gEkly","../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","./errorHelpers.mjs":"juuoT","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gEkly":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base64Decoder", ()=>base64Decoder);
var _indexMjs = require("../../globalHelpers/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const base64Decoder = {
    convert (input, options) {
        let inputStr = input;
        // urlSafe character replacement options conform to the base64 url spec
        // https://datatracker.ietf.org/doc/html/rfc4648#page-7
        if (options?.urlSafe) inputStr = inputStr.replace(/-/g, '+').replace(/_/g, '/');
        return (0, _indexMjs.getAtob)()(inputStr);
    }
};

},{"../../globalHelpers/index.mjs":"kMIha","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kMIha":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAtob", ()=>getAtob);
parcelHelpers.export(exports, "getBtoa", ()=>getBtoa);
parcelHelpers.export(exports, "getCrypto", ()=>getCrypto);
var _amplifyErrorMjs = require("../../errors/AmplifyError.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _errorHelpersMjs = require("../../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const getCrypto = ()=>{
    if (typeof window === 'object' && typeof window.crypto === 'object') return window.crypto;
    // Next.js global polyfill
    if (typeof crypto === 'object') return crypto;
    throw new (0, _amplifyErrorMjs.AmplifyError)({
        name: 'MissingPolyfill',
        message: 'Cannot resolve the `crypto` function from the environment.'
    });
};
const getBtoa = ()=>{
    // browser
    if (typeof window !== 'undefined' && typeof window.btoa === 'function') return window.btoa;
    // Next.js global polyfill
    if (typeof btoa === 'function') return btoa;
    throw new (0, _amplifyErrorMjs.AmplifyError)({
        name: 'Base64EncoderError',
        message: 'Cannot resolve the `btoa` function from the environment.'
    });
};
const getAtob = ()=>{
    // browser
    if (typeof window !== 'undefined' && typeof window.atob === 'function') return window.atob;
    // Next.js global polyfill
    if (typeof atob === 'function') return atob;
    throw new (0, _amplifyErrorMjs.AmplifyError)({
        name: 'Base64EncoderError',
        message: 'Cannot resolve the `atob` function from the environment.'
    });
};

},{"../../errors/AmplifyError.mjs":"G8oLh","../../types/errors.mjs":"4wxZl","../../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"juuoT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthConfigurationErrorCode", ()=>AuthConfigurationErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _createAssertionFunctionMjs = require("../../../errors/createAssertionFunction.mjs");
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var AuthConfigurationErrorCode;
(function(AuthConfigurationErrorCode) {
    AuthConfigurationErrorCode["AuthTokenConfigException"] = "AuthTokenConfigException";
    AuthConfigurationErrorCode["AuthUserPoolAndIdentityPoolException"] = "AuthUserPoolAndIdentityPoolException";
    AuthConfigurationErrorCode["AuthUserPoolException"] = "AuthUserPoolException";
    AuthConfigurationErrorCode["InvalidIdentityPoolIdException"] = "InvalidIdentityPoolIdException";
    AuthConfigurationErrorCode["OAuthNotConfigureException"] = "OAuthNotConfigureException";
})(AuthConfigurationErrorCode || (AuthConfigurationErrorCode = {}));
const authConfigurationErrorMap = {
    [AuthConfigurationErrorCode.AuthTokenConfigException]: {
        message: 'Auth Token Provider not configured.',
        recoverySuggestion: 'Make sure to call Amplify.configure in your app.'
    },
    [AuthConfigurationErrorCode.AuthUserPoolAndIdentityPoolException]: {
        message: 'Auth UserPool or IdentityPool not configured.',
        recoverySuggestion: 'Make sure to call Amplify.configure in your app with UserPoolId and IdentityPoolId.'
    },
    [AuthConfigurationErrorCode.AuthUserPoolException]: {
        message: 'Auth UserPool not configured.',
        recoverySuggestion: 'Make sure to call Amplify.configure in your app with userPoolId and userPoolClientId.'
    },
    [AuthConfigurationErrorCode.InvalidIdentityPoolIdException]: {
        message: 'Invalid identity pool id provided.',
        recoverySuggestion: 'Make sure a valid identityPoolId is given in the config.'
    },
    [AuthConfigurationErrorCode.OAuthNotConfigureException]: {
        message: 'oauth param not configured.',
        recoverySuggestion: 'Make sure to call Amplify.configure with oauth parameter in your app.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(authConfigurationErrorMap);

},{"../../../errors/createAssertionFunction.mjs":"23eMH","../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7YjAe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Amplify", ()=>Amplify);
parcelHelpers.export(exports, "AmplifyClass", ()=>AmplifyClass);
var _indexMjs = require("../Hub/index.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../utils/retry/retry.mjs");
var _deepFreezeMjs = require("../utils/deepFreeze.mjs");
var _parseAWSExportsMjs = require("../parseAWSExports.mjs");
var _constantsMjs = require("./constants.mjs");
var _uuid = require("uuid");
var _parseAmplifyConfigMjs = require("../utils/parseAmplifyConfig.mjs");
var _errorHelpersMjs1 = require("./Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs1 = require("../Platform/index.mjs");
var _typesMjs = require("../Platform/types.mjs");
var _typesMjs1 = require("../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../Reachability/Reachability.mjs");
var _indexMjs2 = require("../utils/sessionListener/index.mjs");
var _indexMjs3 = require("./Auth/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class AmplifyClass {
    constructor(){
        this.oAuthListener = undefined;
        this.isConfigured = false;
        this.resourcesConfig = {};
        this.libraryOptions = {};
        this.Auth = new (0, _indexMjs3.AuthClass)();
    }
    /**
     * Configures Amplify for use with your back-end resources.
     *
     * @remarks
     * This API does not perform any merging of either `resourcesConfig` or `libraryOptions`. The most recently
     * provided values will be used after configuration.
     *
     * @remarks
     * `configure` can be used to specify additional library options where available for supported categories.
     *
     * @param resourceConfig - Back-end resource configuration. Typically provided via the `aws-exports.js` file.
     * @param libraryOptions - Additional options for customizing the behavior of the library.
     */ configure(resourcesConfig, libraryOptions) {
        const resolvedResourceConfig = (0, _parseAmplifyConfigMjs.parseAmplifyConfig)(resourcesConfig);
        this.resourcesConfig = resolvedResourceConfig;
        if (libraryOptions) this.libraryOptions = libraryOptions;
        // Make resource config immutable
        this.resourcesConfig = (0, _deepFreezeMjs.deepFreeze)(this.resourcesConfig);
        this.Auth.configure(this.resourcesConfig.Auth, this.libraryOptions.Auth);
        (0, _indexMjs.Hub).dispatch('core', {
            event: 'configure',
            data: this.resourcesConfig
        }, 'Configure', (0, _indexMjs.AMPLIFY_SYMBOL));
        this.notifyOAuthListener();
        this.isConfigured = true;
    }
    /**
     * Provides access to the current back-end resource configuration for the Library.
     *
     * @returns Returns the immutable back-end resource configuration.
     */ getConfig() {
        if (!this.isConfigured) // eslint-disable-next-line no-console
        console.warn(`Amplify has not been configured. Please call Amplify.configure() before using this service.`);
        return this.resourcesConfig;
    }
    /** @internal */ [(0, _constantsMjs.ADD_OAUTH_LISTENER)](listener) {
        if (this.resourcesConfig.Auth?.Cognito.loginWith?.oauth) // when Amplify has been configured with a valid OAuth config while adding the listener, run it directly
        listener(this.resourcesConfig.Auth?.Cognito);
        else // otherwise register the listener and run it later when Amplify gets configured with a valid oauth config
        this.oAuthListener = listener;
    }
    notifyOAuthListener() {
        if (!this.resourcesConfig.Auth?.Cognito.loginWith?.oauth || !this.oAuthListener) return;
        this.oAuthListener(this.resourcesConfig.Auth?.Cognito);
        // the listener should only be notified once with a valid oauth config
        this.oAuthListener = undefined;
    }
}
/**
 * The `Amplify` utility is used to configure the library.
 *
 * @remarks
 * `Amplify` orchestrates cross-category communication within the library.
 */ const Amplify = new AmplifyClass();

},{"../Hub/index.mjs":"cN8sN","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../utils/retry/retry.mjs":"apIO9","../utils/deepFreeze.mjs":"6CmWw","../parseAWSExports.mjs":"jOmdm","./constants.mjs":"eR9Tg","uuid":"f1qTK","../utils/parseAmplifyConfig.mjs":"6LVoV","./Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../Platform/index.mjs":"kdTt1","../Platform/types.mjs":"4dWla","../BackgroundProcessManager/types.mjs":"8jG07","../Reachability/Reachability.mjs":"d55uC","../utils/sessionListener/index.mjs":"9sYmd","./Auth/index.mjs":"10LNi","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gZWZH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getClientInfo", ()=>getClientInfo);
var _consoleLoggerMjs = require("../../Logger/ConsoleLogger.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('getClientInfo');
function getClientInfo() {
    if (typeof window === 'undefined') return {};
    return browserClientInfo();
}
function browserClientInfo() {
    if (typeof window === 'undefined') {
        logger.warn('No window object available to get browser client info');
        return {};
    }
    const nav = window.navigator;
    if (!nav) {
        logger.warn('No navigator object available to get browser client info');
        return {};
    }
    const { platform, product, vendor, userAgent, language } = nav;
    const type = getBrowserType(userAgent);
    const timezone = browserTimezone();
    return {
        platform,
        make: product || vendor,
        model: type.type,
        version: type.version,
        appVersion: [
            type.type,
            type.version
        ].join('/'),
        language,
        timezone
    };
}
function browserTimezone() {
    const tzMatch = /\(([A-Za-z\s].*)\)/.exec(new Date().toString());
    return tzMatch ? tzMatch[1] || '' : '';
}
function getBrowserType(userAgent) {
    // The latest user agents for Opera: https://www.whatismybrowser.com/guides/the-latest-user-agent/opera
    const operaMatch = /.+(Opera[\s[A-Z]*|OPR[\sA-Z]*)\/([0-9.]+).*/i.exec(userAgent);
    if (operaMatch) return {
        type: operaMatch[1],
        version: operaMatch[2]
    };
    // The latest user agents for Edge: https://www.whatismybrowser.com/guides/the-latest-user-agent/edge
    const ieMatch = /.+(Trident|Edge|Edg|EdgA|EdgiOS)\/([0-9.]+).*/i.exec(userAgent);
    if (ieMatch) return {
        type: ieMatch[1],
        version: ieMatch[2]
    };
    // The latest user agents for web browsers on Firefox and Chrome
    // https://www.whatismybrowser.com/guides/the-latest-user-agent/firefox
    // https://www.whatismybrowser.com/guides/the-latest-user-agent/chrome
    const cfMatch = /.+(Chrome|CriOS|Firefox|FxiOS)\/([0-9.]+).*/i.exec(userAgent);
    if (cfMatch) return {
        type: cfMatch[1],
        version: cfMatch[2]
    };
    // The latest user agents for Safari: https://www.whatismybrowser.com/guides/the-latest-user-agent/safari
    const sMatch = /.+(Safari)\/([0-9.]+).*/i.exec(userAgent);
    if (sMatch) return {
        type: sMatch[1],
        version: sMatch[2]
    };
    const awkMatch = /.+(AppleWebKit)\/([0-9.]+).*/i.exec(userAgent);
    if (awkMatch) return {
        type: awkMatch[1],
        version: awkMatch[2]
    };
    const anyMatch = /.*([A-Z]+)\/([0-9.]+).*/i.exec(userAgent);
    if (anyMatch) return {
        type: anyMatch[1],
        version: anyMatch[2]
    };
    return {
        type: '',
        version: ''
    };
}

},{"../../Logger/ConsoleLogger.mjs":"dnAuQ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"apIO9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retry", ()=>retry);
var _consoleLoggerMjs = require("../../Logger/ConsoleLogger.mjs");
var _isNonRetryableErrorMjs = require("./isNonRetryableError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('retryUtil');
/**
 * @private
 * Internal use of Amplify only
 */ async function retry(functionToRetry, args, delayFn, onTerminate) {
    if (typeof functionToRetry !== 'function') throw Error('functionToRetry must be a function');
    // TODO(eslint): remove this linter suppression with refactoring.
    // eslint-disable-next-line no-async-promise-executor
    return new Promise(async (resolve, reject)=>{
        let attempt = 0;
        let terminated = false;
        let timeout;
        let wakeUp = ()=>{
        // no-op
        }; // will be replaced with a resolver()
        // used after the loop if terminated while waiting for a timer.
        let lastError;
        onTerminate && onTerminate.then(()=>{
            // signal not to try anymore.
            terminated = true;
            // stop sleeping if we're sleeping.
            clearTimeout(timeout);
            wakeUp();
        });
        // TODO(eslint): remove this linter suppression with refactoring.
        // eslint-disable-next-line no-unmodified-loop-condition
        while(!terminated){
            attempt++;
            logger.debug(`${functionToRetry.name} attempt #${attempt} with this vars: ${JSON.stringify(args)}`);
            try {
                resolve(await functionToRetry(...args));
                return;
            } catch (err) {
                lastError = err;
                logger.debug(`error on ${functionToRetry.name}`, err);
                if ((0, _isNonRetryableErrorMjs.isNonRetryableError)(err)) {
                    logger.debug(`${functionToRetry.name} non retryable error`, err);
                    reject(err);
                    return;
                }
                const retryIn = delayFn(attempt, args, err);
                logger.debug(`${functionToRetry.name} retrying in ${retryIn} ms`);
                // we check `terminated` again here because it could have flipped
                // in the time it took `functionToRetry` to return.
                if (retryIn === false || terminated) {
                    reject(err);
                    return;
                } else await new Promise((_resolve)=>{
                    wakeUp = _resolve; // export wakeUp for onTerminate handling
                    timeout = setTimeout(wakeUp, retryIn);
                });
            }
        }
        // reached if terminated while waiting for a timer.
        reject(lastError);
    });
}

},{"../../Logger/ConsoleLogger.mjs":"dnAuQ","./isNonRetryableError.mjs":"fr0Zr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fr0Zr":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isNonRetryableError", ()=>isNonRetryableError);
const isNonRetryableError = (obj)=>{
    const key = 'nonRetryable';
    return obj && obj[key];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6CmWw":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deepFreeze", ()=>deepFreeze);
const deepFreeze = (object)=>{
    const propNames = Reflect.ownKeys(object);
    for (const name of propNames){
        const value = object[name];
        if (value && typeof value === 'object' || typeof value === 'function') deepFreeze(value);
    }
    return Object.freeze(object);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jOmdm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAWSExports", ()=>parseAWSExports);
var _consoleLoggerMjs = require("./Logger/ConsoleLogger.mjs");
var _amplifyErrorMjs = require("./errors/AmplifyError.mjs");
var _errorsMjs = require("./types/errors.mjs");
var _errorHelpersMjs = require("./errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('parseAWSExports');
const authTypeMapping = {
    API_KEY: 'apiKey',
    AWS_IAM: 'iam',
    AMAZON_COGNITO_USER_POOLS: 'userPool',
    OPENID_CONNECT: 'oidc',
    NONE: 'none',
    AWS_LAMBDA: 'lambda',
    // `LAMBDA` is an incorrect value that was added during the v6 rewrite.
    // Keeping it as a valid value until v7 to prevent breaking customers who might
    // be relying on it as a workaround.
    // ref: https://github.com/aws-amplify/amplify-js/pull/12922
    // TODO: @v7 remove next line
    LAMBDA: 'lambda'
};
/**
 * Converts the object imported from `aws-exports.js` or `amplifyconfiguration.json` files generated by
 * the Amplify CLI into an object that conforms to the {@link ResourcesConfig}.
 *
 * @param config A configuration object imported  from `aws-exports.js` or `amplifyconfiguration.json`.
 *
 * @returns An object that conforms to the {@link ResourcesConfig} .
 */ const parseAWSExports = (config = {})=>{
    if (!Object.prototype.hasOwnProperty.call(config, 'aws_project_region')) throw new (0, _amplifyErrorMjs.AmplifyError)({
        name: 'InvalidParameterException',
        message: 'Invalid config parameter.',
        recoverySuggestion: 'Ensure passing the config object imported from  `amplifyconfiguration.json`.'
    });
    const { aws_appsync_apiKey, aws_appsync_authenticationType, aws_appsync_graphqlEndpoint, aws_appsync_region, aws_bots_config, aws_cognito_identity_pool_id, aws_cognito_sign_up_verification_method, aws_cognito_mfa_configuration, aws_cognito_mfa_types, aws_cognito_password_protection_settings, aws_cognito_verification_mechanisms, aws_cognito_signup_attributes, aws_cognito_social_providers, aws_cognito_username_attributes, aws_mandatory_sign_in, aws_mobile_analytics_app_id, aws_mobile_analytics_app_region, aws_user_files_s3_bucket, aws_user_files_s3_bucket_region, aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing, aws_user_pools_id, aws_user_pools_web_client_id, geo, oauth, predictions, aws_cloud_logic_custom, Notifications, modelIntrospection } = config;
    const amplifyConfig = {};
    // Analytics
    if (aws_mobile_analytics_app_id) amplifyConfig.Analytics = {
        Pinpoint: {
            appId: aws_mobile_analytics_app_id,
            region: aws_mobile_analytics_app_region
        }
    };
    // Notifications
    const { InAppMessaging, Push } = Notifications ?? {};
    if (InAppMessaging?.AWSPinpoint || Push?.AWSPinpoint) {
        if (InAppMessaging?.AWSPinpoint) {
            const { appId, region } = InAppMessaging.AWSPinpoint;
            amplifyConfig.Notifications = {
                InAppMessaging: {
                    Pinpoint: {
                        appId,
                        region
                    }
                }
            };
        }
        if (Push?.AWSPinpoint) {
            const { appId, region } = Push.AWSPinpoint;
            amplifyConfig.Notifications = {
                ...amplifyConfig.Notifications,
                PushNotification: {
                    Pinpoint: {
                        appId,
                        region
                    }
                }
            };
        }
    }
    // Interactions
    if (Array.isArray(aws_bots_config)) amplifyConfig.Interactions = {
        LexV1: Object.fromEntries(aws_bots_config.map((bot)=>[
                bot.name,
                bot
            ]))
    };
    // API
    if (aws_appsync_graphqlEndpoint) {
        const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];
        if (!defaultAuthMode) logger.debug(`Invalid authentication type ${aws_appsync_authenticationType}. Falling back to IAM.`);
        amplifyConfig.API = {
            GraphQL: {
                endpoint: aws_appsync_graphqlEndpoint,
                apiKey: aws_appsync_apiKey,
                region: aws_appsync_region,
                defaultAuthMode: defaultAuthMode ?? 'iam'
            }
        };
        if (modelIntrospection) amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;
    }
    // Auth
    const mfaConfig = aws_cognito_mfa_configuration ? {
        status: aws_cognito_mfa_configuration && aws_cognito_mfa_configuration.toLowerCase(),
        totpEnabled: aws_cognito_mfa_types?.includes('TOTP') ?? false,
        smsEnabled: aws_cognito_mfa_types?.includes('SMS') ?? false
    } : undefined;
    const passwordFormatConfig = aws_cognito_password_protection_settings ? {
        minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,
        requireLowercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_LOWERCASE') ?? false,
        requireUppercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_UPPERCASE') ?? false,
        requireNumbers: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_NUMBERS') ?? false,
        requireSpecialCharacters: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes('REQUIRES_SYMBOLS') ?? false
    } : undefined;
    const mergedUserAttributes = Array.from(new Set([
        ...aws_cognito_verification_mechanisms ?? [],
        ...aws_cognito_signup_attributes ?? []
    ]));
    const userAttributes = mergedUserAttributes.reduce((attributes, key)=>({
            ...attributes,
            // All user attributes generated by the CLI are required
            [key.toLowerCase()]: {
                required: true
            }
        }), {});
    const loginWithEmailEnabled = aws_cognito_username_attributes?.includes('EMAIL') ?? false;
    const loginWithPhoneEnabled = aws_cognito_username_attributes?.includes('PHONE_NUMBER') ?? false;
    if (aws_cognito_identity_pool_id || aws_user_pools_id) amplifyConfig.Auth = {
        Cognito: {
            identityPoolId: aws_cognito_identity_pool_id,
            allowGuestAccess: aws_mandatory_sign_in !== 'enable',
            signUpVerificationMethod: aws_cognito_sign_up_verification_method,
            userAttributes,
            userPoolClientId: aws_user_pools_web_client_id,
            userPoolId: aws_user_pools_id,
            mfa: mfaConfig,
            passwordFormat: passwordFormatConfig,
            loginWith: {
                username: !(loginWithEmailEnabled || loginWithPhoneEnabled),
                email: loginWithEmailEnabled,
                phone: loginWithPhoneEnabled
            }
        }
    };
    const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;
    const hasSocialProviderConfig = aws_cognito_social_providers ? aws_cognito_social_providers.length > 0 : false;
    if (amplifyConfig.Auth && hasOAuthConfig) amplifyConfig.Auth.Cognito.loginWith = {
        ...amplifyConfig.Auth.Cognito.loginWith,
        oauth: {
            ...getOAuthConfig(oauth),
            ...hasSocialProviderConfig && {
                providers: parseSocialProviders(aws_cognito_social_providers)
            }
        }
    };
    // Storage
    if (aws_user_files_s3_bucket) amplifyConfig.Storage = {
        S3: {
            bucket: aws_user_files_s3_bucket,
            region: aws_user_files_s3_bucket_region,
            dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing
        }
    };
    // Geo
    if (geo) {
        const { amazon_location_service } = geo;
        amplifyConfig.Geo = {
            LocationService: {
                maps: amazon_location_service.maps,
                geofenceCollections: amazon_location_service.geofenceCollections,
                searchIndices: amazon_location_service.search_indices,
                region: amazon_location_service.region
            }
        };
    }
    // REST API
    if (aws_cloud_logic_custom) amplifyConfig.API = {
        ...amplifyConfig.API,
        REST: aws_cloud_logic_custom.reduce((acc, api)=>{
            const { name, endpoint, region, service } = api;
            return {
                ...acc,
                [name]: {
                    endpoint,
                    ...service ? {
                        service
                    } : undefined,
                    ...region ? {
                        region
                    } : undefined
                }
            };
        }, {})
    };
    // Predictions
    if (predictions) {
        // map VoiceId from speechGenerator defaults to voiceId
        const { VoiceId: voiceId } = predictions?.convert?.speechGenerator?.defaults ?? {};
        amplifyConfig.Predictions = voiceId ? {
            ...predictions,
            convert: {
                ...predictions.convert,
                speechGenerator: {
                    ...predictions.convert.speechGenerator,
                    defaults: {
                        voiceId
                    }
                }
            }
        } : predictions;
    }
    return amplifyConfig;
};
const getRedirectUrl = (redirectStr)=>redirectStr?.split(',') ?? [];
const getOAuthConfig = ({ domain, scope, redirectSignIn, redirectSignOut, responseType })=>({
        domain,
        scopes: scope,
        redirectSignIn: getRedirectUrl(redirectSignIn),
        redirectSignOut: getRedirectUrl(redirectSignOut),
        responseType
    });
const parseSocialProviders = (aws_cognito_social_providers)=>{
    return aws_cognito_social_providers.map((provider)=>{
        const updatedProvider = provider.toLowerCase();
        return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);
    });
};

},{"./Logger/ConsoleLogger.mjs":"dnAuQ","./errors/AmplifyError.mjs":"G8oLh","./types/errors.mjs":"4wxZl","./errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eR9Tg":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ADD_OAUTH_LISTENER", ()=>ADD_OAUTH_LISTENER);
const ADD_OAUTH_LISTENER = Symbol('oauth-listener');

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"f1qTK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX", ()=>(0, _maxJsDefault.default));
parcelHelpers.export(exports, "NIL", ()=>(0, _nilJsDefault.default));
parcelHelpers.export(exports, "parse", ()=>(0, _parseJsDefault.default));
parcelHelpers.export(exports, "stringify", ()=>(0, _stringifyJsDefault.default));
parcelHelpers.export(exports, "v1", ()=>(0, _v1JsDefault.default));
parcelHelpers.export(exports, "v1ToV6", ()=>(0, _v1ToV6JsDefault.default));
parcelHelpers.export(exports, "v3", ()=>(0, _v3JsDefault.default));
parcelHelpers.export(exports, "v4", ()=>(0, _v4JsDefault.default));
parcelHelpers.export(exports, "v5", ()=>(0, _v5JsDefault.default));
parcelHelpers.export(exports, "v6", ()=>(0, _v6JsDefault.default));
parcelHelpers.export(exports, "v6ToV1", ()=>(0, _v6ToV1JsDefault.default));
parcelHelpers.export(exports, "v7", ()=>(0, _v7JsDefault.default));
parcelHelpers.export(exports, "validate", ()=>(0, _validateJsDefault.default));
parcelHelpers.export(exports, "version", ()=>(0, _versionJsDefault.default));
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _nilJs = require("./nil.js");
var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v1ToV6Js = require("./v1ToV6.js");
var _v1ToV6JsDefault = parcelHelpers.interopDefault(_v1ToV6Js);
var _v3Js = require("./v3.js");
var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
var _v4Js = require("./v4.js");
var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
var _v5Js = require("./v5.js");
var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
var _v6Js = require("./v6.js");
var _v6JsDefault = parcelHelpers.interopDefault(_v6Js);
var _v6ToV1Js = require("./v6ToV1.js");
var _v6ToV1JsDefault = parcelHelpers.interopDefault(_v6ToV1Js);
var _v7Js = require("./v7.js");
var _v7JsDefault = parcelHelpers.interopDefault(_v7Js);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
var _versionJs = require("./version.js");
var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);

},{"./max.js":"fxbVO","./nil.js":"9xbEn","./parse.js":"9yQPA","./stringify.js":"9dsAN","./v1.js":"042CM","./v1ToV6.js":"8wxBW","./v3.js":"fqBn5","./v4.js":"7Sd5x","./v5.js":"3itEG","./v6.js":"fSAwa","./v6ToV1.js":"9iYgm","./v7.js":"92zQH","./validate.js":"3wmxZ","./version.js":"bY08K","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fxbVO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = 'ffffffff-ffff-ffff-ffff-ffffffffffff';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9xbEn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = '00000000-0000-0000-0000-000000000000';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9yQPA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
function parse(uuid) {
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError('Invalid UUID');
    let v;
    return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 0xff, v >>> 8 & 0xff, v & 0xff, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 0xff, (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff, v / 0x100000000 & 0xff, v >>> 24 & 0xff, v >>> 16 & 0xff, v >>> 8 & 0xff, v & 0xff);
}
exports.default = parse;

},{"./validate.js":"3wmxZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3wmxZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regexJs = require("./regex.js");
var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
function validate(uuid) {
    return typeof uuid === 'string' && (0, _regexJsDefault.default).test(uuid);
}
exports.default = validate;

},{"./regex.js":"9mE1W","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9mE1W":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9dsAN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unsafeStringify", ()=>unsafeStringify);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
const byteToHex = [];
for(let i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).slice(1));
function unsafeStringify(arr, offset = 0) {
    return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}
function stringify(arr, offset = 0) {
    const uuid = unsafeStringify(arr, offset);
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError('Stringified UUID is invalid');
    return uuid;
}
exports.default = stringify;

},{"./validate.js":"3wmxZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"042CM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateV1State", ()=>updateV1State);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
const _state = {};
function v1(options, buf, offset) {
    let bytes;
    const isV6 = options?._v6 ?? false;
    if (options) {
        const optionsKeys = Object.keys(options);
        if (optionsKeys.length === 1 && optionsKeys[0] === '_v6') options = undefined;
    }
    if (options) bytes = v1Bytes(options.random ?? options.rng?.() ?? (0, _rngJsDefault.default)(), options.msecs, options.nsecs, options.clockseq, options.node, buf, offset);
    else {
        const now = Date.now();
        const rnds = (0, _rngJsDefault.default)();
        updateV1State(_state, now, rnds);
        bytes = v1Bytes(rnds, _state.msecs, _state.nsecs, isV6 ? undefined : _state.clockseq, isV6 ? undefined : _state.node, buf, offset);
    }
    return buf ?? (0, _stringifyJs.unsafeStringify)(bytes);
}
function updateV1State(state, now, rnds) {
    state.msecs ??= -Infinity;
    state.nsecs ??= 0;
    if (now === state.msecs) {
        state.nsecs++;
        if (state.nsecs >= 10000) {
            state.node = undefined;
            state.nsecs = 0;
        }
    } else if (now > state.msecs) state.nsecs = 0;
    else if (now < state.msecs) state.node = undefined;
    if (!state.node) {
        state.node = rnds.slice(10, 16);
        state.node[0] |= 0x01;
        state.clockseq = (rnds[8] << 8 | rnds[9]) & 0x3fff;
    }
    state.msecs = now;
    return state;
}
function v1Bytes(rnds, msecs, nsecs, clockseq, node, buf, offset = 0) {
    if (rnds.length < 16) throw new Error('Random bytes length must be >= 16');
    if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
    } else {
        if (offset < 0 || offset + 16 > buf.length) throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    msecs ??= Date.now();
    nsecs ??= 0;
    clockseq ??= (rnds[8] << 8 | rnds[9]) & 0x3fff;
    node ??= rnds.slice(10, 16);
    msecs += 12219292800000;
    const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    buf[offset++] = tl >>> 24 & 0xff;
    buf[offset++] = tl >>> 16 & 0xff;
    buf[offset++] = tl >>> 8 & 0xff;
    buf[offset++] = tl & 0xff;
    const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    buf[offset++] = tmh >>> 8 & 0xff;
    buf[offset++] = tmh & 0xff;
    buf[offset++] = tmh >>> 24 & 0xf | 0x10;
    buf[offset++] = tmh >>> 16 & 0xff;
    buf[offset++] = clockseq >>> 8 | 0x80;
    buf[offset++] = clockseq & 0xff;
    for(let n = 0; n < 6; ++n)buf[offset++] = node[n];
    return buf;
}
exports.default = v1;

},{"./rng.js":"aMz2Q","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aMz2Q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rng);
let getRandomValues;
const rnds8 = new Uint8Array(16);
function rng() {
    if (!getRandomValues) {
        if (typeof crypto === 'undefined' || !crypto.getRandomValues) throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        getRandomValues = crypto.getRandomValues.bind(crypto);
    }
    return getRandomValues(rnds8);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8wxBW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>v1ToV6);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
var _stringifyJs = require("./stringify.js");
function v1ToV6(uuid) {
    const v1Bytes = typeof uuid === 'string' ? (0, _parseJsDefault.default)(uuid) : uuid;
    const v6Bytes = _v1ToV6(v1Bytes);
    return typeof uuid === 'string' ? (0, _stringifyJs.unsafeStringify)(v6Bytes) : v6Bytes;
}
function _v1ToV6(v1Bytes) {
    return Uint8Array.of((v1Bytes[6] & 0x0f) << 4 | v1Bytes[7] >> 4 & 0x0f, (v1Bytes[7] & 0x0f) << 4 | (v1Bytes[4] & 0xf0) >> 4, (v1Bytes[4] & 0x0f) << 4 | (v1Bytes[5] & 0xf0) >> 4, (v1Bytes[5] & 0x0f) << 4 | (v1Bytes[0] & 0xf0) >> 4, (v1Bytes[0] & 0x0f) << 4 | (v1Bytes[1] & 0xf0) >> 4, (v1Bytes[1] & 0x0f) << 4 | (v1Bytes[2] & 0xf0) >> 4, 0x60 | v1Bytes[2] & 0x0f, v1Bytes[3], v1Bytes[8], v1Bytes[9], v1Bytes[10], v1Bytes[11], v1Bytes[12], v1Bytes[13], v1Bytes[14], v1Bytes[15]);
}

},{"./parse.js":"9yQPA","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fqBn5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DNS", ()=>(0, _v35Js.DNS));
parcelHelpers.export(exports, "URL", ()=>(0, _v35Js.URL));
var _md5Js = require("./md5.js");
var _md5JsDefault = parcelHelpers.interopDefault(_md5Js);
var _v35Js = require("./v35.js");
var _v35JsDefault = parcelHelpers.interopDefault(_v35Js);
function v3(value, namespace, buf, offset) {
    return (0, _v35JsDefault.default)(0x30, (0, _md5JsDefault.default), value, namespace, buf, offset);
}
v3.DNS = (0, _v35Js.DNS);
v3.URL = (0, _v35Js.URL);
exports.default = v3;

},{"./md5.js":"hhNhp","./v35.js":"iruG5","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hhNhp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function md5(bytes) {
    const words = uint8ToUint32(bytes);
    const md5Bytes = wordsToMd5(words, bytes.length * 8);
    return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
    const bytes = new Uint8Array(input.length * 4);
    for(let i = 0; i < input.length * 4; i++)bytes[i] = input[i >> 2] >>> i % 4 * 8 & 0xff;
    return bytes;
}
function getOutputLength(inputLength8) {
    return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
    const xpad = new Uint32Array(getOutputLength(len)).fill(0);
    xpad.set(x);
    xpad[len >> 5] |= 0x80 << len % 32;
    xpad[xpad.length - 1] = len;
    x = xpad;
    let a = 1732584193;
    let b = -271733879;
    let c = -1732584194;
    let d = 271733878;
    for(let i = 0; i < x.length; i += 16){
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
    }
    return Uint32Array.of(a, b, c, d);
}
function uint8ToUint32(input) {
    if (input.length === 0) return new Uint32Array();
    const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
    for(let i = 0; i < input.length; i++)output[i >> 2] |= (input[i] & 0xff) << i % 4 * 8;
    return output;
}
function safeAdd(x, y) {
    const lsw = (x & 0xffff) + (y & 0xffff);
    const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 0xffff;
}
function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
    return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
    return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
exports.default = md5;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iruG5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringToBytes", ()=>stringToBytes);
parcelHelpers.export(exports, "DNS", ()=>DNS);
parcelHelpers.export(exports, "URL", ()=>URL);
parcelHelpers.export(exports, "default", ()=>v35);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
var _stringifyJs = require("./stringify.js");
function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = new Uint8Array(str.length);
    for(let i = 0; i < str.length; ++i)bytes[i] = str.charCodeAt(i);
    return bytes;
}
const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
function v35(version, hash, value, namespace, buf, offset) {
    const valueBytes = typeof value === 'string' ? stringToBytes(value) : value;
    const namespaceBytes = typeof namespace === 'string' ? (0, _parseJsDefault.default)(namespace) : namespace;
    if (typeof namespace === 'string') namespace = (0, _parseJsDefault.default)(namespace);
    if (namespace?.length !== 16) throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    let bytes = new Uint8Array(16 + valueBytes.length);
    bytes.set(namespaceBytes);
    bytes.set(valueBytes, namespaceBytes.length);
    bytes = hash(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
        offset = offset || 0;
        for(let i = 0; i < 16; ++i)buf[offset + i] = bytes[i];
        return buf;
    }
    return (0, _stringifyJs.unsafeStringify)(bytes);
}

},{"./parse.js":"9yQPA","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7Sd5x":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nativeJs = require("./native.js");
var _nativeJsDefault = parcelHelpers.interopDefault(_nativeJs);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
function v4(options, buf, offset) {
    if ((0, _nativeJsDefault.default).randomUUID && !buf && !options) return (0, _nativeJsDefault.default).randomUUID();
    options = options || {};
    const rnds = options.random ?? options.rng?.() ?? (0, _rngJsDefault.default)();
    if (rnds.length < 16) throw new Error('Random bytes length must be >= 16');
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;
    if (buf) {
        offset = offset || 0;
        if (offset < 0 || offset + 16 > buf.length) throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
        for(let i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, _stringifyJs.unsafeStringify)(rnds);
}
exports.default = v4;

},{"./native.js":"kD2Fc","./rng.js":"aMz2Q","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kD2Fc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
exports.default = {
    randomUUID
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3itEG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DNS", ()=>(0, _v35Js.DNS));
parcelHelpers.export(exports, "URL", ()=>(0, _v35Js.URL));
var _sha1Js = require("./sha1.js");
var _sha1JsDefault = parcelHelpers.interopDefault(_sha1Js);
var _v35Js = require("./v35.js");
var _v35JsDefault = parcelHelpers.interopDefault(_v35Js);
function v5(value, namespace, buf, offset) {
    return (0, _v35JsDefault.default)(0x50, (0, _sha1JsDefault.default), value, namespace, buf, offset);
}
v5.DNS = (0, _v35Js.DNS);
v5.URL = (0, _v35Js.URL);
exports.default = v5;

},{"./sha1.js":"glDwi","./v35.js":"iruG5","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"glDwi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function f(s, x, y, z) {
    switch(s){
        case 0:
            return x & y ^ ~x & z;
        case 1:
            return x ^ y ^ z;
        case 2:
            return x & y ^ x & z ^ y & z;
        case 3:
            return x ^ y ^ z;
    }
}
function ROTL(x, n) {
    return x << n | x >>> 32 - n;
}
function sha1(bytes) {
    const K = [
        0x5a827999,
        0x6ed9eba1,
        0x8f1bbcdc,
        0xca62c1d6
    ];
    const H = [
        0x67452301,
        0xefcdab89,
        0x98badcfe,
        0x10325476,
        0xc3d2e1f0
    ];
    const newBytes = new Uint8Array(bytes.length + 1);
    newBytes.set(bytes);
    newBytes[bytes.length] = 0x80;
    bytes = newBytes;
    const l = bytes.length / 4 + 2;
    const N = Math.ceil(l / 16);
    const M = new Array(N);
    for(let i = 0; i < N; ++i){
        const arr = new Uint32Array(16);
        for(let j = 0; j < 16; ++j)arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        M[i] = arr;
    }
    M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
    M[N - 1][14] = Math.floor(M[N - 1][14]);
    M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;
    for(let i = 0; i < N; ++i){
        const W = new Uint32Array(80);
        for(let t = 0; t < 16; ++t)W[t] = M[i][t];
        for(let t = 16; t < 80; ++t)W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for(let t = 0; t < 80; ++t){
            const s = Math.floor(t / 20);
            const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
            e = d;
            d = c;
            c = ROTL(b, 30) >>> 0;
            b = a;
            a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
    }
    return Uint8Array.of(H[0] >> 24, H[0] >> 16, H[0] >> 8, H[0], H[1] >> 24, H[1] >> 16, H[1] >> 8, H[1], H[2] >> 24, H[2] >> 16, H[2] >> 8, H[2], H[3] >> 24, H[3] >> 16, H[3] >> 8, H[3], H[4] >> 24, H[4] >> 16, H[4] >> 8, H[4]);
}
exports.default = sha1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fSAwa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _stringifyJs = require("./stringify.js");
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v1ToV6Js = require("./v1ToV6.js");
var _v1ToV6JsDefault = parcelHelpers.interopDefault(_v1ToV6Js);
function v6(options, buf, offset) {
    options ??= {};
    offset ??= 0;
    let bytes = (0, _v1JsDefault.default)({
        ...options,
        _v6: true
    }, new Uint8Array(16));
    bytes = (0, _v1ToV6JsDefault.default)(bytes);
    if (buf) {
        for(let i = 0; i < 16; i++)buf[offset + i] = bytes[i];
        return buf;
    }
    return (0, _stringifyJs.unsafeStringify)(bytes);
}
exports.default = v6;

},{"./stringify.js":"9dsAN","./v1.js":"042CM","./v1ToV6.js":"8wxBW","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9iYgm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>v6ToV1);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);
var _stringifyJs = require("./stringify.js");
function v6ToV1(uuid) {
    const v6Bytes = typeof uuid === 'string' ? (0, _parseJsDefault.default)(uuid) : uuid;
    const v1Bytes = _v6ToV1(v6Bytes);
    return typeof uuid === 'string' ? (0, _stringifyJs.unsafeStringify)(v1Bytes) : v1Bytes;
}
function _v6ToV1(v6Bytes) {
    return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);
}

},{"./parse.js":"9yQPA","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"92zQH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateV7State", ()=>updateV7State);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
const _state = {};
function v7(options, buf, offset) {
    let bytes;
    if (options) bytes = v7Bytes(options.random ?? options.rng?.() ?? (0, _rngJsDefault.default)(), options.msecs, options.seq, buf, offset);
    else {
        const now = Date.now();
        const rnds = (0, _rngJsDefault.default)();
        updateV7State(_state, now, rnds);
        bytes = v7Bytes(rnds, _state.msecs, _state.seq, buf, offset);
    }
    return buf ?? (0, _stringifyJs.unsafeStringify)(bytes);
}
function updateV7State(state, now, rnds) {
    state.msecs ??= -Infinity;
    state.seq ??= 0;
    if (now > state.msecs) {
        state.seq = rnds[6] << 23 | rnds[7] << 16 | rnds[8] << 8 | rnds[9];
        state.msecs = now;
    } else {
        state.seq = state.seq + 1 | 0;
        if (state.seq === 0) state.msecs++;
    }
    return state;
}
function v7Bytes(rnds, msecs, seq, buf, offset = 0) {
    if (rnds.length < 16) throw new Error('Random bytes length must be >= 16');
    if (!buf) {
        buf = new Uint8Array(16);
        offset = 0;
    } else {
        if (offset < 0 || offset + 16 > buf.length) throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    msecs ??= Date.now();
    seq ??= rnds[6] * 0x7f << 24 | rnds[7] << 16 | rnds[8] << 8 | rnds[9];
    buf[offset++] = msecs / 0x10000000000 & 0xff;
    buf[offset++] = msecs / 0x100000000 & 0xff;
    buf[offset++] = msecs / 0x1000000 & 0xff;
    buf[offset++] = msecs / 0x10000 & 0xff;
    buf[offset++] = msecs / 0x100 & 0xff;
    buf[offset++] = msecs & 0xff;
    buf[offset++] = 0x70 | seq >>> 28 & 0x0f;
    buf[offset++] = seq >>> 20 & 0xff;
    buf[offset++] = 0x80 | seq >>> 14 & 0x3f;
    buf[offset++] = seq >>> 6 & 0xff;
    buf[offset++] = seq << 2 & 0xff | rnds[10] & 0x03;
    buf[offset++] = rnds[11];
    buf[offset++] = rnds[12];
    buf[offset++] = rnds[13];
    buf[offset++] = rnds[14];
    buf[offset++] = rnds[15];
    return buf;
}
exports.default = v7;

},{"./rng.js":"aMz2Q","./stringify.js":"9dsAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bY08K":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
function version(uuid) {
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError('Invalid UUID');
    return parseInt(uuid.slice(14, 15), 16);
}
exports.default = version;

},{"./validate.js":"3wmxZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6LVoV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseAmplifyConfig", ()=>parseAmplifyConfig);
var _parseAWSExportsMjs = require("../parseAWSExports.mjs");
var _parseAmplifyOutputsMjs = require("../parseAmplifyOutputs.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Parses the variety of configuration shapes that Amplify can accept into a ResourcesConfig.
 *
 * @param amplifyConfig An Amplify configuration object conforming to one of the supported schemas.
 * @return A ResourcesConfig for the provided configuration object.
 */ const parseAmplifyConfig = (amplifyConfig)=>{
    if (Object.keys(amplifyConfig).some((key)=>key.startsWith('aws_'))) return (0, _parseAWSExportsMjs.parseAWSExports)(amplifyConfig);
    else if ((0, _parseAmplifyOutputsMjs.isAmplifyOutputs)(amplifyConfig)) return (0, _parseAmplifyOutputsMjs.parseAmplifyOutputs)(amplifyConfig);
    else return amplifyConfig;
};

},{"../parseAWSExports.mjs":"jOmdm","../parseAmplifyOutputs.mjs":"bKNwZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bKNwZ":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAmplifyOutputs", ()=>isAmplifyOutputs);
parcelHelpers.export(exports, "parseAmplifyOutputs", ()=>parseAmplifyOutputs);
parcelHelpers.export(exports, "parseAnalytics", ()=>parseAnalytics);
function isAmplifyOutputs(config) {
    // version format initially will be '1' but is expected to be something like x.y where x is major and y minor version
    const { version } = config;
    if (!version) return false;
    return version.startsWith('1');
}
function parseStorage(amplifyOutputsStorageProperties) {
    if (!amplifyOutputsStorageProperties) return undefined;
    const { bucket_name, aws_region, buckets } = amplifyOutputsStorageProperties;
    return {
        S3: {
            bucket: bucket_name,
            region: aws_region,
            buckets: buckets && createBucketInfoMap(buckets)
        }
    };
}
function parseAuth(amplifyOutputsAuthProperties) {
    if (!amplifyOutputsAuthProperties) return undefined;
    const { user_pool_id, user_pool_client_id, identity_pool_id, password_policy, mfa_configuration, mfa_methods, unauthenticated_identities_enabled, oauth, username_attributes, standard_required_attributes, groups } = amplifyOutputsAuthProperties;
    const authConfig = {
        Cognito: {
            userPoolId: user_pool_id,
            userPoolClientId: user_pool_client_id,
            groups
        }
    };
    if (identity_pool_id) authConfig.Cognito = {
        ...authConfig.Cognito,
        identityPoolId: identity_pool_id
    };
    if (password_policy) authConfig.Cognito.passwordFormat = {
        requireLowercase: password_policy.require_lowercase,
        requireNumbers: password_policy.require_numbers,
        requireUppercase: password_policy.require_uppercase,
        requireSpecialCharacters: password_policy.require_symbols,
        minLength: password_policy.min_length ?? 6
    };
    if (mfa_configuration) authConfig.Cognito.mfa = {
        status: getMfaStatus(mfa_configuration),
        smsEnabled: mfa_methods?.includes('SMS'),
        totpEnabled: mfa_methods?.includes('TOTP')
    };
    if (unauthenticated_identities_enabled) authConfig.Cognito.allowGuestAccess = unauthenticated_identities_enabled;
    if (oauth) authConfig.Cognito.loginWith = {
        oauth: {
            domain: oauth.domain,
            redirectSignIn: oauth.redirect_sign_in_uri,
            redirectSignOut: oauth.redirect_sign_out_uri,
            responseType: oauth.response_type === 'token' ? 'token' : 'code',
            scopes: oauth.scopes,
            providers: getOAuthProviders(oauth.identity_providers)
        }
    };
    if (username_attributes) authConfig.Cognito.loginWith = {
        ...authConfig.Cognito.loginWith,
        email: username_attributes.includes('email'),
        phone: username_attributes.includes('phone_number'),
        // Signing in with a username is not currently supported in Gen2, this should always evaluate to false
        username: username_attributes.includes('username')
    };
    if (standard_required_attributes) authConfig.Cognito.userAttributes = standard_required_attributes.reduce((acc, curr)=>({
            ...acc,
            [curr]: {
                required: true
            }
        }), {});
    return authConfig;
}
function parseAnalytics(amplifyOutputsAnalyticsProperties) {
    if (!amplifyOutputsAnalyticsProperties?.amazon_pinpoint) return undefined;
    const { amazon_pinpoint } = amplifyOutputsAnalyticsProperties;
    return {
        Pinpoint: {
            appId: amazon_pinpoint.app_id,
            region: amazon_pinpoint.aws_region
        }
    };
}
function parseGeo(amplifyOutputsAnalyticsProperties) {
    if (!amplifyOutputsAnalyticsProperties) return undefined;
    const { aws_region, geofence_collections, maps, search_indices } = amplifyOutputsAnalyticsProperties;
    return {
        LocationService: {
            region: aws_region,
            searchIndices: search_indices,
            geofenceCollections: geofence_collections,
            maps
        }
    };
}
function parseData(amplifyOutputsDataProperties) {
    if (!amplifyOutputsDataProperties) return undefined;
    const { aws_region, default_authorization_type, url, api_key, model_introspection } = amplifyOutputsDataProperties;
    const GraphQL = {
        endpoint: url,
        defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
        region: aws_region,
        apiKey: api_key,
        modelIntrospection: model_introspection
    };
    return {
        GraphQL
    };
}
function parseCustom(amplifyOutputsCustomProperties) {
    if (!amplifyOutputsCustomProperties?.events) return undefined;
    const { url, aws_region, api_key, default_authorization_type } = amplifyOutputsCustomProperties.events;
    const Events = {
        endpoint: url,
        defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
        region: aws_region,
        apiKey: api_key
    };
    return {
        Events
    };
}
function parseNotifications(amplifyOutputsNotificationsProperties) {
    if (!amplifyOutputsNotificationsProperties) return undefined;
    const { aws_region, channels, amazon_pinpoint_app_id } = amplifyOutputsNotificationsProperties;
    const hasInAppMessaging = channels.includes('IN_APP_MESSAGING');
    const hasPushNotification = channels.includes('APNS') || channels.includes('FCM');
    if (!(hasInAppMessaging || hasPushNotification)) return undefined;
    // At this point, we know the Amplify outputs contains at least one supported channel
    const notificationsConfig = {};
    if (hasInAppMessaging) notificationsConfig.InAppMessaging = {
        Pinpoint: {
            appId: amazon_pinpoint_app_id,
            region: aws_region
        }
    };
    if (hasPushNotification) notificationsConfig.PushNotification = {
        Pinpoint: {
            appId: amazon_pinpoint_app_id,
            region: aws_region
        }
    };
    return notificationsConfig;
}
function parseAmplifyOutputs(amplifyOutputs) {
    const resourcesConfig = {};
    if (amplifyOutputs.storage) resourcesConfig.Storage = parseStorage(amplifyOutputs.storage);
    if (amplifyOutputs.auth) resourcesConfig.Auth = parseAuth(amplifyOutputs.auth);
    if (amplifyOutputs.analytics) resourcesConfig.Analytics = parseAnalytics(amplifyOutputs.analytics);
    if (amplifyOutputs.geo) resourcesConfig.Geo = parseGeo(amplifyOutputs.geo);
    if (amplifyOutputs.data) resourcesConfig.API = parseData(amplifyOutputs.data);
    if (amplifyOutputs.custom) {
        const customConfig = parseCustom(amplifyOutputs.custom);
        if (customConfig && 'Events' in customConfig) resourcesConfig.API = {
            ...resourcesConfig.API,
            ...customConfig
        };
    }
    if (amplifyOutputs.notifications) resourcesConfig.Notifications = parseNotifications(amplifyOutputs.notifications);
    return resourcesConfig;
}
const authModeNames = {
    AMAZON_COGNITO_USER_POOLS: 'userPool',
    API_KEY: 'apiKey',
    AWS_IAM: 'iam',
    AWS_LAMBDA: 'lambda',
    OPENID_CONNECT: 'oidc'
};
function getGraphQLAuthMode(authType) {
    return authModeNames[authType];
}
const providerNames = {
    GOOGLE: 'Google',
    LOGIN_WITH_AMAZON: 'Amazon',
    FACEBOOK: 'Facebook',
    SIGN_IN_WITH_APPLE: 'Apple'
};
function getOAuthProviders(providers = []) {
    return providers.reduce((oAuthProviders, provider)=>{
        if (providerNames[provider] !== undefined) oAuthProviders.push(providerNames[provider]);
        return oAuthProviders;
    }, []);
}
function getMfaStatus(mfaConfiguration) {
    if (mfaConfiguration === 'OPTIONAL') return 'optional';
    if (mfaConfiguration === 'REQUIRED') return 'on';
    return 'off';
}
function createBucketInfoMap(buckets) {
    const mappedBuckets = {};
    buckets.forEach(({ name, bucket_name: bucketName, aws_region: region, paths })=>{
        if (name in mappedBuckets) throw new Error(`Duplicate friendly name found: ${name}. Name must be unique.`);
        const sanitizedPaths = paths ? Object.entries(paths).reduce((acc, [key, value])=>{
            if (value !== undefined) acc[key] = value;
            return acc;
        }, {}) : undefined;
        mappedBuckets[name] = {
            bucketName,
            region,
            paths: sanitizedPaths
        };
    });
    return mappedBuckets;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7twCg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jsSha256 = require("./jsSha256");
parcelHelpers.exportAll(_jsSha256, exports);

},{"./jsSha256":"7FEbM","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7FEbM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Sha256", ()=>Sha256);
var _tslib = require("tslib");
var _constants = require("./constants");
var _rawSha256 = require("./RawSha256");
var _util = require("@aws-crypto/util");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.secret = secret;
        this.hash = new (0, _rawSha256.RawSha256)();
        this.reset();
    }
    Sha256.prototype.update = function(toHash) {
        if ((0, _util.isEmptyData)(toHash) || this.error) return;
        try {
            this.hash.update((0, _util.convertToBuffer)(toHash));
        } catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */ Sha256.prototype.digestSync = function() {
        if (this.error) throw this.error;
        if (this.outer) {
            if (!this.outer.finished) this.outer.update(this.hash.digest());
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */ Sha256.prototype.digest = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.digestSync()
                ];
            });
        });
    };
    Sha256.prototype.reset = function() {
        this.hash = new (0, _rawSha256.RawSha256)();
        if (this.secret) {
            this.outer = new (0, _rawSha256.RawSha256)();
            var inner = bufferFromSecret(this.secret);
            var outer = new Uint8Array((0, _constants.BLOCK_SIZE));
            outer.set(inner);
            for(var i = 0; i < (0, _constants.BLOCK_SIZE); i++){
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for(var i = 0; i < inner.byteLength; i++)inner[i] = 0;
        }
    };
    return Sha256;
}();
function bufferFromSecret(secret) {
    var input = (0, _util.convertToBuffer)(secret);
    if (input.byteLength > (0, _constants.BLOCK_SIZE)) {
        var bufferHash = new (0, _rawSha256.RawSha256)();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array((0, _constants.BLOCK_SIZE));
    buffer.set(input);
    return buffer;
}

},{"tslib":"iC1Dx","./constants":"i492E","./RawSha256":"7mhM1","@aws-crypto/util":"23GMw","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iC1Dx":[function(require,module,exports,__globalThis) {
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__esDecorate", ()=>__esDecorate);
parcelHelpers.export(exports, "__runInitializers", ()=>__runInitializers);
parcelHelpers.export(exports, "__propKey", ()=>__propKey);
parcelHelpers.export(exports, "__setFunctionName", ()=>__setFunctionName);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
parcelHelpers.export(exports, "__addDisposableResource", ()=>__addDisposableResource);
parcelHelpers.export(exports, "__disposeResources", ()=>__disposeResources);
parcelHelpers.export(exports, "__rewriteRelativeImportExtension", ()=>__rewriteRelativeImportExtension);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
var ownKeys = function(o) {
    ownKeys = Object.getOwnPropertyNames || function(o) {
        var ar = [];
        for(var k in o)if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
        return ar;
    };
    return ownKeys(o);
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k = ownKeys(mod), i = 0; i < k.length; i++)if (k[i] !== "default") __createBinding(result, mod, k[i]);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop())try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } else s |= 1;
        } catch (e) {
            fail(e);
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
function __rewriteRelativeImportExtension(path, preserveJsx) {
    if (typeof path === "string" && /^\.\.?\//.test(path)) return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function(m, tsx, d, ext, cm) {
        return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : d + ext + "." + cm.toLowerCase() + "js";
    });
    return path;
}
exports.default = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __esDecorate: __esDecorate,
    __runInitializers: __runInitializers,
    __propKey: __propKey,
    __setFunctionName: __setFunctionName,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources,
    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"i492E":[function(require,module,exports,__globalThis) {
/**
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BLOCK_SIZE", ()=>BLOCK_SIZE);
parcelHelpers.export(exports, "DIGEST_LENGTH", ()=>DIGEST_LENGTH);
parcelHelpers.export(exports, "KEY", ()=>KEY);
parcelHelpers.export(exports, "INIT", ()=>INIT);
parcelHelpers.export(exports, "MAX_HASHABLE_LENGTH", ()=>MAX_HASHABLE_LENGTH);
var BLOCK_SIZE = 64;
var DIGEST_LENGTH = 32;
var KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
var INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7mhM1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RawSha256", ()=>RawSha256);
var _constants = require("./constants");
/**
 * @internal
 */ var RawSha256 = /** @class */ function() {
    function RawSha256() {
        this.state = Int32Array.from((0, _constants.INIT));
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */ this.finished = false;
    }
    RawSha256.prototype.update = function(data) {
        if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > (0, _constants.MAX_HASHABLE_LENGTH)) throw new Error("Cannot hash more than 2^53 - 1 bits");
        while(byteLength > 0){
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === (0, _constants.BLOCK_SIZE)) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function() {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % (0, _constants.BLOCK_SIZE) >= (0, _constants.BLOCK_SIZE) - 8) {
                for(var i = this.bufferLength; i < (0, _constants.BLOCK_SIZE); i++)bufferView.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(var i = this.bufferLength; i < (0, _constants.BLOCK_SIZE) - 8; i++)bufferView.setUint8(i, 0);
            bufferView.setUint32((0, _constants.BLOCK_SIZE) - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32((0, _constants.BLOCK_SIZE) - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array((0, _constants.DIGEST_LENGTH));
        for(var i = 0; i < 8; i++){
            out[i * 4] = this.state[i] >>> 24 & 0xff;
            out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
            out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
            out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for(var i = 0; i < (0, _constants.BLOCK_SIZE); i++){
            if (i < 16) this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
            else {
                var u = this.temp[i - 2];
                var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                u = this.temp[i - 15];
                var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + ((0, _constants.KEY)[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}();

},{"./constants":"i492E","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"23GMw":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertToBuffer", ()=>(0, _convertToBuffer.convertToBuffer));
parcelHelpers.export(exports, "isEmptyData", ()=>(0, _isEmptyData.isEmptyData));
parcelHelpers.export(exports, "numToUint8", ()=>(0, _numToUint8.numToUint8));
parcelHelpers.export(exports, "uint32ArrayFrom", ()=>(0, _uint32ArrayFrom.uint32ArrayFrom));
var _convertToBuffer = require("./convertToBuffer");
var _isEmptyData = require("./isEmptyData");
var _numToUint8 = require("./numToUint8");
var _uint32ArrayFrom = require("./uint32ArrayFrom");

},{"./convertToBuffer":"7LXFK","./isEmptyData":"bMPgC","./numToUint8":"204gn","./uint32ArrayFrom":"lLlb4","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7LXFK":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertToBuffer", ()=>convertToBuffer);
var _utilUtf8 = require("@smithy/util-utf8");
var Buffer = require("1373df1d6c1e369e").Buffer;
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : (0, _utilUtf8.fromUtf8);
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"1373df1d6c1e369e":"bCaf4","@smithy/util-utf8":"eKhSF","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eKhSF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fromUtf8 = require("./fromUtf8");
parcelHelpers.exportAll(_fromUtf8, exports);
var _toUint8Array = require("./toUint8Array");
parcelHelpers.exportAll(_toUint8Array, exports);
var _toUtf8 = require("./toUtf8");
parcelHelpers.exportAll(_toUtf8, exports);

},{"./fromUtf8":"8DhNL","./toUint8Array":"ef3z2","./toUtf8":"9KyLL","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8DhNL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
const fromUtf8 = (input)=>new TextEncoder().encode(input);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ef3z2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toUint8Array", ()=>toUint8Array);
var _fromUtf8 = require("./fromUtf8");
const toUint8Array = (data)=>{
    if (typeof data === "string") return (0, _fromUtf8.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
};

},{"./fromUtf8":"8DhNL","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9KyLL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
const toUtf8 = (input)=>new TextDecoder("utf-8").decode(input);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bMPgC":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEmptyData", ()=>isEmptyData);
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"204gn":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "numToUint8", ()=>numToUint8);
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff
    ]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lLlb4":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// IE 11 does not support Array.from, so we do it manually
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uint32ArrayFrom", ()=>uint32ArrayFrom);
function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length){
            return_array[a_index] = a_lookUpTable[a_index];
            a_index += 1;
        }
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6gSS1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromHex", ()=>fromHex);
parcelHelpers.export(exports, "toHex", ()=>toHex);
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = `0${encodedByte}`;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for(let i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kdTt1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Platform", ()=>Platform);
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>getAmplifyUserAgent);
parcelHelpers.export(exports, "getAmplifyUserAgentObject", ()=>getAmplifyUserAgentObject);
parcelHelpers.export(exports, "sanitizeAmplifyVersion", ()=>sanitizeAmplifyVersion);
var _typesMjs = require("./types.mjs");
var _versionMjs = require("./version.mjs");
var _detectFrameworkMjs = require("./detectFramework.mjs");
var _customUserAgentMjs = require("./customUserAgent.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const BASE_USER_AGENT = `aws-amplify`;
/** Sanitize Amplify version string be removing special character + and character post the special character  */ const sanitizeAmplifyVersion = (amplifyVersion)=>amplifyVersion.replace(/\+.*/, '');
class PlatformBuilder {
    constructor(){
        this.userAgent = `${BASE_USER_AGENT}/${sanitizeAmplifyVersion((0, _versionMjs.version))}`;
    }
    get framework() {
        return (0, _detectFrameworkMjs.detectFramework)();
    }
    get isReactNative() {
        return this.framework === (0, _typesMjs.Framework).ReactNative || this.framework === (0, _typesMjs.Framework).Expo;
    }
    observeFrameworkChanges(fcn) {
        (0, _detectFrameworkMjs.observeFrameworkChanges)(fcn);
    }
}
const Platform = new PlatformBuilder();
const getAmplifyUserAgentObject = ({ category, action } = {})=>{
    const userAgent = [
        [
            BASE_USER_AGENT,
            sanitizeAmplifyVersion((0, _versionMjs.version))
        ]
    ];
    if (category) userAgent.push([
        category,
        action
    ]);
    userAgent.push([
        'framework',
        (0, _detectFrameworkMjs.detectFramework)()
    ]);
    if (category && action) {
        const customState = (0, _customUserAgentMjs.getCustomUserAgent)(category, action);
        if (customState) customState.forEach((state)=>{
            userAgent.push(state);
        });
    }
    return userAgent;
};
const getAmplifyUserAgent = (customUserAgentDetails)=>{
    const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);
    const userAgentString = userAgent.map(([agentKey, agentValue])=>agentKey && agentValue ? `${agentKey}/${agentValue}` : agentKey).join(' ');
    return userAgentString;
};

},{"./types.mjs":"4dWla","./version.mjs":"98Nna","./detectFramework.mjs":"dFN9d","./customUserAgent.mjs":"dwiQF","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4dWla":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AiAction", ()=>AiAction);
parcelHelpers.export(exports, "AnalyticsAction", ()=>AnalyticsAction);
parcelHelpers.export(exports, "ApiAction", ()=>ApiAction);
parcelHelpers.export(exports, "AuthAction", ()=>AuthAction);
parcelHelpers.export(exports, "Category", ()=>Category);
parcelHelpers.export(exports, "DataStoreAction", ()=>DataStoreAction);
parcelHelpers.export(exports, "Framework", ()=>Framework);
parcelHelpers.export(exports, "GeoAction", ()=>GeoAction);
parcelHelpers.export(exports, "InAppMessagingAction", ()=>InAppMessagingAction);
parcelHelpers.export(exports, "InteractionsAction", ()=>InteractionsAction);
parcelHelpers.export(exports, "PredictionsAction", ()=>PredictionsAction);
parcelHelpers.export(exports, "PubSubAction", ()=>PubSubAction);
parcelHelpers.export(exports, "PushNotificationAction", ()=>PushNotificationAction);
parcelHelpers.export(exports, "StorageAction", ()=>StorageAction);
var Framework;
(function(Framework) {
    // < 100 - Web frameworks
    Framework["WebUnknown"] = "0";
    Framework["React"] = "1";
    Framework["NextJs"] = "2";
    Framework["Angular"] = "3";
    Framework["VueJs"] = "4";
    Framework["Nuxt"] = "5";
    Framework["Svelte"] = "6";
    // 100s - Server side frameworks
    Framework["ServerSideUnknown"] = "100";
    Framework["ReactSSR"] = "101";
    Framework["NextJsSSR"] = "102";
    Framework["AngularSSR"] = "103";
    Framework["VueJsSSR"] = "104";
    Framework["NuxtSSR"] = "105";
    Framework["SvelteSSR"] = "106";
    // 200s - Mobile framework
    Framework["ReactNative"] = "201";
    Framework["Expo"] = "202";
})(Framework || (Framework = {}));
var Category;
(function(Category) {
    Category["AI"] = "ai";
    Category["API"] = "api";
    Category["Auth"] = "auth";
    Category["Analytics"] = "analytics";
    Category["DataStore"] = "datastore";
    Category["Geo"] = "geo";
    Category["InAppMessaging"] = "inappmessaging";
    Category["Interactions"] = "interactions";
    Category["Predictions"] = "predictions";
    Category["PubSub"] = "pubsub";
    Category["PushNotification"] = "pushnotification";
    Category["Storage"] = "storage";
})(Category || (Category = {}));
var AiAction;
(function(AiAction) {
    AiAction["CreateConversation"] = "1";
    AiAction["GetConversation"] = "2";
    AiAction["ListConversations"] = "3";
    AiAction["DeleteConversation"] = "4";
    AiAction["SendMessage"] = "5";
    AiAction["ListMessages"] = "6";
    AiAction["OnMessage"] = "7";
    AiAction["Generation"] = "8";
    AiAction["UpdateConversation"] = "9";
})(AiAction || (AiAction = {}));
var AnalyticsAction;
(function(AnalyticsAction) {
    AnalyticsAction["Record"] = "1";
    AnalyticsAction["IdentifyUser"] = "2";
})(AnalyticsAction || (AnalyticsAction = {}));
var ApiAction;
(function(ApiAction) {
    ApiAction["GraphQl"] = "1";
    ApiAction["Get"] = "2";
    ApiAction["Post"] = "3";
    ApiAction["Put"] = "4";
    ApiAction["Patch"] = "5";
    ApiAction["Del"] = "6";
    ApiAction["Head"] = "7";
})(ApiAction || (ApiAction = {}));
var AuthAction;
(function(AuthAction) {
    AuthAction["SignUp"] = "1";
    AuthAction["ConfirmSignUp"] = "2";
    AuthAction["ResendSignUpCode"] = "3";
    AuthAction["SignIn"] = "4";
    AuthAction["FetchMFAPreference"] = "6";
    AuthAction["UpdateMFAPreference"] = "7";
    AuthAction["SetUpTOTP"] = "10";
    AuthAction["VerifyTOTPSetup"] = "11";
    AuthAction["ConfirmSignIn"] = "12";
    AuthAction["DeleteUserAttributes"] = "15";
    AuthAction["DeleteUser"] = "16";
    AuthAction["UpdateUserAttributes"] = "17";
    AuthAction["FetchUserAttributes"] = "18";
    AuthAction["ConfirmUserAttribute"] = "22";
    AuthAction["SignOut"] = "26";
    AuthAction["UpdatePassword"] = "27";
    AuthAction["ResetPassword"] = "28";
    AuthAction["ConfirmResetPassword"] = "29";
    AuthAction["FederatedSignIn"] = "30";
    AuthAction["RememberDevice"] = "32";
    AuthAction["ForgetDevice"] = "33";
    AuthAction["FetchDevices"] = "34";
    AuthAction["SendUserAttributeVerificationCode"] = "35";
    AuthAction["SignInWithRedirect"] = "36";
    AuthAction["StartWebAuthnRegistration"] = "37";
    AuthAction["CompleteWebAuthnRegistration"] = "38";
    AuthAction["ListWebAuthnCredentials"] = "39";
    AuthAction["DeleteWebAuthnCredential"] = "40";
})(AuthAction || (AuthAction = {}));
var DataStoreAction;
(function(DataStoreAction) {
    DataStoreAction["Subscribe"] = "1";
    DataStoreAction["GraphQl"] = "2";
})(DataStoreAction || (DataStoreAction = {}));
var GeoAction;
(function(GeoAction) {
    GeoAction["SearchByText"] = "0";
    GeoAction["SearchByCoordinates"] = "1";
    GeoAction["SearchForSuggestions"] = "2";
    GeoAction["SearchByPlaceId"] = "3";
    GeoAction["SaveGeofences"] = "4";
    GeoAction["GetGeofence"] = "5";
    GeoAction["ListGeofences"] = "6";
    GeoAction["DeleteGeofences"] = "7";
})(GeoAction || (GeoAction = {}));
var InAppMessagingAction;
(function(InAppMessagingAction) {
    InAppMessagingAction["SyncMessages"] = "1";
    InAppMessagingAction["IdentifyUser"] = "2";
    InAppMessagingAction["NotifyMessageInteraction"] = "3";
})(InAppMessagingAction || (InAppMessagingAction = {}));
var InteractionsAction;
(function(InteractionsAction) {
    InteractionsAction["None"] = "0";
})(InteractionsAction || (InteractionsAction = {}));
var PredictionsAction;
(function(PredictionsAction) {
    PredictionsAction["Convert"] = "1";
    PredictionsAction["Identify"] = "2";
    PredictionsAction["Interpret"] = "3";
})(PredictionsAction || (PredictionsAction = {}));
var PubSubAction;
(function(PubSubAction) {
    PubSubAction["Subscribe"] = "1";
})(PubSubAction || (PubSubAction = {}));
var PushNotificationAction;
(function(PushNotificationAction) {
    PushNotificationAction["InitializePushNotifications"] = "1";
    PushNotificationAction["IdentifyUser"] = "2";
})(PushNotificationAction || (PushNotificationAction = {}));
var StorageAction;
(function(StorageAction) {
    StorageAction["UploadData"] = "1";
    StorageAction["DownloadData"] = "2";
    StorageAction["List"] = "3";
    StorageAction["Copy"] = "4";
    StorageAction["Remove"] = "5";
    StorageAction["GetProperties"] = "6";
    StorageAction["GetUrl"] = "7";
    StorageAction["GetDataAccess"] = "8";
    StorageAction["ListCallerAccessGrants"] = "9";
})(StorageAction || (StorageAction = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"98Nna":[function(require,module,exports,__globalThis) {
// generated by genversion
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = '6.15.5';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dFN9d":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clearCache", ()=>clearCache);
parcelHelpers.export(exports, "detectFramework", ()=>detectFramework);
parcelHelpers.export(exports, "frameworkChangeObservers", ()=>frameworkChangeObservers);
parcelHelpers.export(exports, "observeFrameworkChanges", ()=>observeFrameworkChanges);
var _typesMjs = require("./types.mjs");
var _indexMjs = require("./detection/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// We want to cache detection since the framework won't change
let frameworkCache;
const frameworkChangeObservers = [];
// Setup the detection reset tracking / timeout delays
let resetTriggered = false;
const SSR_RESET_TIMEOUT = 10; // ms
const WEB_RESET_TIMEOUT = 10; // ms
const PRIME_FRAMEWORK_DELAY = 1000; // ms
const detectFramework = ()=>{
    if (!frameworkCache) {
        frameworkCache = (0, _indexMjs.detect)();
        if (resetTriggered) // The final run of detectFramework:
        // Starting from this point, the `frameworkCache` becomes "final".
        // So we don't need to notify the observers again so the observer
        // can be removed after the final notice.
        while(frameworkChangeObservers.length)frameworkChangeObservers.pop()?.();
        else // The first run of detectFramework:
        // Every time we update the cache, call each observer function
        frameworkChangeObservers.forEach((fcn)=>{
            fcn();
        });
        // Retry once for either Unknown type after a delay (explained below)
        resetTimeout((0, _typesMjs.Framework).ServerSideUnknown, SSR_RESET_TIMEOUT);
        resetTimeout((0, _typesMjs.Framework).WebUnknown, WEB_RESET_TIMEOUT);
    }
    return frameworkCache;
};
/**
 * @internal Setup observer callback that will be called everytime the framework changes
 */ const observeFrameworkChanges = (fcn)=>{
    // When the `frameworkCache` won't be updated again, we ignore all incoming
    // observers.
    if (resetTriggered) return;
    frameworkChangeObservers.push(fcn);
};
function clearCache() {
    frameworkCache = undefined;
}
// For a framework type and a delay amount, setup the event to re-detect
//   During the runtime boot, it is possible that framework detection will
//   be triggered before the framework has made modifications to the
//   global/window/etc needed for detection. When no framework is detected
//   we will reset and try again to ensure we don't use a cached
//   non-framework detection result for all requests.
function resetTimeout(framework, delay) {
    if (frameworkCache === framework && !resetTriggered) setTimeout(()=>{
        clearCache();
        resetTriggered = true;
        setTimeout(detectFramework, PRIME_FRAMEWORK_DELAY);
    }, delay);
}

},{"./types.mjs":"4dWla","./detection/index.mjs":"7IKHd","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7IKHd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "detect", ()=>detect);
var _typesMjs = require("../types.mjs");
var _reactMjs = require("./React.mjs");
var _vueMjs = require("./Vue.mjs");
var _svelteMjs = require("./Svelte.mjs");
var _nextMjs = require("./Next.mjs");
var _nuxtMjs = require("./Nuxt.mjs");
var _angularMjs = require("./Angular.mjs");
var _reactNativeMjs = require("./ReactNative.mjs");
var _expoMjs = require("./Expo.mjs");
var _webMjs = require("./Web.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// These are in the order of detection where when both are detectable, the early Framework will be reported
const detectionMap = [
    // First, detect mobile
    {
        platform: (0, _typesMjs.Framework).Expo,
        detectionMethod: (0, _expoMjs.expoDetect)
    },
    {
        platform: (0, _typesMjs.Framework).ReactNative,
        detectionMethod: (0, _reactNativeMjs.reactNativeDetect)
    },
    // Next, detect web frameworks
    {
        platform: (0, _typesMjs.Framework).NextJs,
        detectionMethod: (0, _nextMjs.nextWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).Nuxt,
        detectionMethod: (0, _nuxtMjs.nuxtWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).Angular,
        detectionMethod: (0, _angularMjs.angularWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).React,
        detectionMethod: (0, _reactMjs.reactWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).VueJs,
        detectionMethod: (0, _vueMjs.vueWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).Svelte,
        detectionMethod: (0, _svelteMjs.svelteWebDetect)
    },
    {
        platform: (0, _typesMjs.Framework).WebUnknown,
        detectionMethod: (0, _webMjs.webDetect)
    },
    // Last, detect ssr frameworks
    {
        platform: (0, _typesMjs.Framework).NextJsSSR,
        detectionMethod: (0, _nextMjs.nextSSRDetect)
    },
    {
        platform: (0, _typesMjs.Framework).NuxtSSR,
        detectionMethod: (0, _nuxtMjs.nuxtSSRDetect)
    },
    {
        platform: (0, _typesMjs.Framework).ReactSSR,
        detectionMethod: (0, _reactMjs.reactSSRDetect)
    },
    {
        platform: (0, _typesMjs.Framework).VueJsSSR,
        detectionMethod: (0, _vueMjs.vueSSRDetect)
    },
    {
        platform: (0, _typesMjs.Framework).AngularSSR,
        detectionMethod: (0, _angularMjs.angularSSRDetect)
    },
    {
        platform: (0, _typesMjs.Framework).SvelteSSR,
        detectionMethod: (0, _svelteMjs.svelteSSRDetect)
    }
];
function detect() {
    return detectionMap.find((detectionEntry)=>detectionEntry.detectionMethod())?.platform || (0, _typesMjs.Framework).ServerSideUnknown;
}

},{"../types.mjs":"4dWla","./React.mjs":"34rHm","./Vue.mjs":"3D8Uo","./Svelte.mjs":"co5Cn","./Next.mjs":"2OG0N","./Nuxt.mjs":"cR3n5","./Angular.mjs":"69P7Y","./ReactNative.mjs":"fdAdN","./Expo.mjs":"e6T47","./Web.mjs":"cT77c","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"34rHm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// use the some
parcelHelpers.export(exports, "reactSSRDetect", ()=>reactSSRDetect);
parcelHelpers.export(exports, "reactWebDetect", ()=>reactWebDetect);
var _helpersMjs = require("./helpers.mjs");
var process = require("7f97f5f6eaa3ffdf");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with react 18.2 - built using Vite
function reactWebDetect() {
    const elementKeyPrefixedWithReact = (key)=>{
        return key.startsWith('_react') || key.startsWith('__react');
    };
    const elementIsReactEnabled = (element)=>{
        return Object.keys(element).find(elementKeyPrefixedWithReact);
    };
    const allElementsWithId = ()=>Array.from(document.querySelectorAll('[id]'));
    return (0, _helpersMjs.documentExists)() && allElementsWithId().some(elementIsReactEnabled);
}
function reactSSRDetect() {
    return (0, _helpersMjs.processExists)() && typeof process.env !== 'undefined' && !!Object.keys(process.env).find((key)=>key.includes('react'));
}

},{"7f97f5f6eaa3ffdf":"euskh","./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"f1mVa":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "documentExists", ()=>documentExists);
parcelHelpers.export(exports, "globalExists", ()=>globalExists);
parcelHelpers.export(exports, "globalThisExists", ()=>globalThisExists);
parcelHelpers.export(exports, "keyPrefixMatch", ()=>keyPrefixMatch);
parcelHelpers.export(exports, "processExists", ()=>processExists);
parcelHelpers.export(exports, "windowExists", ()=>windowExists);
var global = arguments[3];
const globalExists = ()=>{
    return typeof global !== 'undefined';
};
const globalThisExists = ()=>{
    return typeof globalThis !== 'undefined';
};
const windowExists = ()=>{
    return typeof window !== 'undefined';
};
const documentExists = ()=>{
    return typeof document !== 'undefined';
};
const processExists = ()=>{
    return false;
};
const keyPrefixMatch = (object, prefix)=>{
    return !!Object.keys(object).find((key)=>key.startsWith(prefix));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3D8Uo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "vueSSRDetect", ()=>vueSSRDetect);
parcelHelpers.export(exports, "vueWebDetect", ()=>vueWebDetect);
var _helpersMjs = require("./helpers.mjs");
var global = arguments[3];
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with vue 3.3.2
function vueWebDetect() {
    return (0, _helpersMjs.windowExists)() && (0, _helpersMjs.keyPrefixMatch)(window, '__VUE');
}
function vueSSRDetect() {
    return (0, _helpersMjs.globalExists)() && (0, _helpersMjs.keyPrefixMatch)(global, '__VUE');
}

},{"./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"co5Cn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "svelteSSRDetect", ()=>svelteSSRDetect);
parcelHelpers.export(exports, "svelteWebDetect", ()=>svelteWebDetect);
var _helpersMjs = require("./helpers.mjs");
var process = require("bf0b6ee27f41cfab");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with svelte 3.59
function svelteWebDetect() {
    return (0, _helpersMjs.windowExists)() && (0, _helpersMjs.keyPrefixMatch)(window, '__SVELTE');
}
function svelteSSRDetect() {
    return (0, _helpersMjs.processExists)() && typeof process.env !== 'undefined' && !!Object.keys(process.env).find((key)=>key.includes('svelte'));
}

},{"bf0b6ee27f41cfab":"euskh","./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2OG0N":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nextSSRDetect", ()=>nextSSRDetect);
parcelHelpers.export(exports, "nextWebDetect", ()=>nextWebDetect);
var _helpersMjs = require("./helpers.mjs");
var global = arguments[3];
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with next 13.4 / react 18.2
function nextWebDetect() {
    return (0, _helpersMjs.windowExists)() && window.next && typeof window.next === 'object';
}
function nextSSRDetect() {
    return (0, _helpersMjs.globalExists)() && ((0, _helpersMjs.keyPrefixMatch)(global, '__next') || (0, _helpersMjs.keyPrefixMatch)(global, '__NEXT'));
}

},{"./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cR3n5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nuxtSSRDetect", ()=>nuxtSSRDetect);
parcelHelpers.export(exports, "nuxtWebDetect", ()=>nuxtWebDetect);
var _helpersMjs = require("./helpers.mjs");
var global = arguments[3];
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with nuxt 2.15 / vue 2.7
function nuxtWebDetect() {
    return (0, _helpersMjs.windowExists)() && (window.__NUXT__ !== undefined || window.$nuxt !== undefined);
}
function nuxtSSRDetect() {
    return (0, _helpersMjs.globalExists)() && typeof global.__NUXT_PATHS__ !== 'undefined';
}

},{"./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"69P7Y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "angularSSRDetect", ()=>angularSSRDetect);
parcelHelpers.export(exports, "angularWebDetect", ()=>angularWebDetect);
var _helpersMjs = require("./helpers.mjs");
var process = require("3d5a82adcc718a18");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with @angular/core 16.0.0
function angularWebDetect() {
    const angularVersionSetInDocument = Boolean((0, _helpersMjs.documentExists)() && document.querySelector('[ng-version]'));
    const angularContentSetInWindow = Boolean((0, _helpersMjs.windowExists)() && typeof window.ng !== 'undefined');
    return angularVersionSetInDocument || angularContentSetInWindow;
}
function angularSSRDetect() {
    return (0, _helpersMjs.processExists)() && typeof process.env === 'object' && undefined?.startsWith('ng ') || false;
}

},{"3d5a82adcc718a18":"euskh","./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fdAdN":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with react-native 0.17.7
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reactNativeDetect", ()=>reactNativeDetect);
function reactNativeDetect() {
    return typeof navigator !== 'undefined' && typeof navigator.product !== 'undefined' && navigator.product === 'ReactNative';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"e6T47":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "expoDetect", ()=>expoDetect);
var _helpersMjs = require("./helpers.mjs");
var global = arguments[3];
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Tested with expo 48 / react-native 0.71.3
function expoDetect() {
    return (0, _helpersMjs.globalExists)() && typeof global.expo !== 'undefined';
}

},{"./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cT77c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "webDetect", ()=>webDetect);
var _helpersMjs = require("./helpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function webDetect() {
    return (0, _helpersMjs.windowExists)();
}

},{"./helpers.mjs":"f1mVa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dwiQF":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Maintains custom user-agent state set by external consumers.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCustomUserAgent", ()=>getCustomUserAgent);
parcelHelpers.export(exports, "setCustomUserAgent", ()=>setCustomUserAgent);
const customUserAgentState = {};
/**
 * Sets custom user agent state which will be appended to applicable requests. Returns a function that can be used to
 * clean up any custom state set with this API.
 *
 * @note
 * This API operates globally. Calling this API multiple times will result in the most recently set values for a
 * particular API being used.
 *
 * @note
 * This utility IS NOT compatible with SSR.
 *
 * @param input - SetCustomUserAgentInput that defines custom state to apply to the specified APIs.
 */ const setCustomUserAgent = (input)=>{
    // Save custom user-agent state & increment reference counter
    // TODO Remove `any` when we upgrade to TypeScript 5.2, see: https://github.com/microsoft/TypeScript/issues/44373
    customUserAgentState[input.category] = input.apis.reduce((acc, api)=>({
            ...acc,
            [api]: {
                refCount: acc[api]?.refCount ? acc[api].refCount + 1 : 1,
                additionalDetails: input.additionalDetails
            }
        }), customUserAgentState[input.category] ?? {});
    // Callback that cleans up state for APIs recorded by this call
    let cleanUpCallbackCalled = false;
    const cleanUpCallback = ()=>{
        // Only allow the cleanup callback to be called once
        if (cleanUpCallbackCalled) return;
        cleanUpCallbackCalled = true;
        input.apis.forEach((api)=>{
            const apiRefCount = customUserAgentState[input.category][api].refCount;
            if (apiRefCount > 1) customUserAgentState[input.category][api].refCount = apiRefCount - 1;
            else {
                delete customUserAgentState[input.category][api];
                // Clean up category if no more APIs set
                if (!Object.keys(customUserAgentState[input.category]).length) delete customUserAgentState[input.category];
            }
        });
    };
    return cleanUpCallback;
};
const getCustomUserAgent = (category, api)=>customUserAgentState[category]?.[api]?.additionalDetails;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8jG07":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * All possible states a `BackgroundProcessManager` instance can be in.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackgroundProcessManagerState", ()=>BackgroundProcessManagerState);
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState) {
    /**
     * Accepting new jobs.
     */ BackgroundProcessManagerState["Open"] = "Open";
    /**
     * Not accepting new jobs. Waiting for submitted jobs to complete.
     */ BackgroundProcessManagerState["Closing"] = "Closing";
    /**
     * Not accepting new jobs. All submitted jobs are complete.
     */ BackgroundProcessManagerState["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"d55uC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Reachability", ()=>Reachability);
var _rxjs = require("rxjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../utils/getClientInfo/getClientInfo.mjs");
var _isWebWorkerMjs = require("../utils/isWebWorker.mjs");
var _retryMjs = require("../utils/retry/retry.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class Reachability {
    networkMonitor(_) {
        const globalObj = (0, _isWebWorkerMjs.isWebWorker)() ? self : typeof window !== 'undefined' && window;
        if (!globalObj) return (0, _rxjs.from)([
            {
                online: true
            }
        ]);
        return new (0, _rxjs.Observable)((observer)=>{
            observer.next({
                online: globalObj.navigator.onLine
            });
            const notifyOnline = ()=>{
                observer.next({
                    online: true
                });
            };
            const notifyOffline = ()=>{
                observer.next({
                    online: false
                });
            };
            globalObj.addEventListener('online', notifyOnline);
            globalObj.addEventListener('offline', notifyOffline);
            Reachability._observers.push(observer);
            return ()=>{
                globalObj.removeEventListener('online', notifyOnline);
                globalObj.removeEventListener('offline', notifyOffline);
                Reachability._observers = Reachability._observers.filter((_observer)=>_observer !== observer);
            };
        });
    }
    // expose observers to simulate offline mode for integration testing
    static _observerOverride(status) {
        for (const observer of this._observers){
            if (observer.closed) {
                this._observers = this._observers.filter((_observer)=>_observer !== observer);
                continue;
            }
            observer?.next && observer.next(status);
        }
    }
}
Reachability._observers = [];

},{"rxjs":"89Anq","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../utils/isWebWorker.mjs":"8aVSr","../utils/retry/retry.mjs":"apIO9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"89Anq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>(0, _observable.Observable));
parcelHelpers.export(exports, "ConnectableObservable", ()=>(0, _connectableObservable.ConnectableObservable));
parcelHelpers.export(exports, "observable", ()=>(0, _observable1.observable));
parcelHelpers.export(exports, "animationFrames", ()=>(0, _animationFrames.animationFrames));
parcelHelpers.export(exports, "Subject", ()=>(0, _subject.Subject));
parcelHelpers.export(exports, "BehaviorSubject", ()=>(0, _behaviorSubject.BehaviorSubject));
parcelHelpers.export(exports, "ReplaySubject", ()=>(0, _replaySubject.ReplaySubject));
parcelHelpers.export(exports, "AsyncSubject", ()=>(0, _asyncSubject.AsyncSubject));
parcelHelpers.export(exports, "asap", ()=>(0, _asap.asap));
parcelHelpers.export(exports, "asapScheduler", ()=>(0, _asap.asapScheduler));
parcelHelpers.export(exports, "async", ()=>(0, _async.async));
parcelHelpers.export(exports, "asyncScheduler", ()=>(0, _async.asyncScheduler));
parcelHelpers.export(exports, "queue", ()=>(0, _queue.queue));
parcelHelpers.export(exports, "queueScheduler", ()=>(0, _queue.queueScheduler));
parcelHelpers.export(exports, "animationFrame", ()=>(0, _animationFrame.animationFrame));
parcelHelpers.export(exports, "animationFrameScheduler", ()=>(0, _animationFrame.animationFrameScheduler));
parcelHelpers.export(exports, "VirtualTimeScheduler", ()=>(0, _virtualTimeScheduler.VirtualTimeScheduler));
parcelHelpers.export(exports, "VirtualAction", ()=>(0, _virtualTimeScheduler.VirtualAction));
parcelHelpers.export(exports, "Scheduler", ()=>(0, _scheduler.Scheduler));
parcelHelpers.export(exports, "Subscription", ()=>(0, _subscription.Subscription));
parcelHelpers.export(exports, "Subscriber", ()=>(0, _subscriber.Subscriber));
parcelHelpers.export(exports, "Notification", ()=>(0, _notification.Notification));
parcelHelpers.export(exports, "NotificationKind", ()=>(0, _notification.NotificationKind));
parcelHelpers.export(exports, "pipe", ()=>(0, _pipe.pipe));
parcelHelpers.export(exports, "noop", ()=>(0, _noop.noop));
parcelHelpers.export(exports, "identity", ()=>(0, _identity.identity));
parcelHelpers.export(exports, "isObservable", ()=>(0, _isObservable.isObservable));
parcelHelpers.export(exports, "lastValueFrom", ()=>(0, _lastValueFrom.lastValueFrom));
parcelHelpers.export(exports, "firstValueFrom", ()=>(0, _firstValueFrom.firstValueFrom));
parcelHelpers.export(exports, "ArgumentOutOfRangeError", ()=>(0, _argumentOutOfRangeError.ArgumentOutOfRangeError));
parcelHelpers.export(exports, "EmptyError", ()=>(0, _emptyError.EmptyError));
parcelHelpers.export(exports, "NotFoundError", ()=>(0, _notFoundError.NotFoundError));
parcelHelpers.export(exports, "ObjectUnsubscribedError", ()=>(0, _objectUnsubscribedError.ObjectUnsubscribedError));
parcelHelpers.export(exports, "SequenceError", ()=>(0, _sequenceError.SequenceError));
parcelHelpers.export(exports, "TimeoutError", ()=>(0, _timeout.TimeoutError));
parcelHelpers.export(exports, "UnsubscriptionError", ()=>(0, _unsubscriptionError.UnsubscriptionError));
parcelHelpers.export(exports, "bindCallback", ()=>(0, _bindCallback.bindCallback));
parcelHelpers.export(exports, "bindNodeCallback", ()=>(0, _bindNodeCallback.bindNodeCallback));
parcelHelpers.export(exports, "combineLatest", ()=>(0, _combineLatest.combineLatest));
parcelHelpers.export(exports, "concat", ()=>(0, _concat.concat));
parcelHelpers.export(exports, "connectable", ()=>(0, _connectable.connectable));
parcelHelpers.export(exports, "defer", ()=>(0, _defer.defer));
parcelHelpers.export(exports, "empty", ()=>(0, _empty.empty));
parcelHelpers.export(exports, "forkJoin", ()=>(0, _forkJoin.forkJoin));
parcelHelpers.export(exports, "from", ()=>(0, _from.from));
parcelHelpers.export(exports, "fromEvent", ()=>(0, _fromEvent.fromEvent));
parcelHelpers.export(exports, "fromEventPattern", ()=>(0, _fromEventPattern.fromEventPattern));
parcelHelpers.export(exports, "generate", ()=>(0, _generate.generate));
parcelHelpers.export(exports, "iif", ()=>(0, _iif.iif));
parcelHelpers.export(exports, "interval", ()=>(0, _interval.interval));
parcelHelpers.export(exports, "merge", ()=>(0, _merge.merge));
parcelHelpers.export(exports, "never", ()=>(0, _never.never));
parcelHelpers.export(exports, "of", ()=>(0, _of.of));
parcelHelpers.export(exports, "onErrorResumeNext", ()=>(0, _onErrorResumeNext.onErrorResumeNext));
parcelHelpers.export(exports, "pairs", ()=>(0, _pairs.pairs));
parcelHelpers.export(exports, "partition", ()=>(0, _partition.partition));
parcelHelpers.export(exports, "race", ()=>(0, _race.race));
parcelHelpers.export(exports, "range", ()=>(0, _range.range));
parcelHelpers.export(exports, "throwError", ()=>(0, _throwError.throwError));
parcelHelpers.export(exports, "timer", ()=>(0, _timer.timer));
parcelHelpers.export(exports, "using", ()=>(0, _using.using));
parcelHelpers.export(exports, "zip", ()=>(0, _zip.zip));
parcelHelpers.export(exports, "scheduled", ()=>(0, _scheduled.scheduled));
parcelHelpers.export(exports, "EMPTY", ()=>(0, _empty.EMPTY));
parcelHelpers.export(exports, "NEVER", ()=>(0, _never.NEVER));
parcelHelpers.export(exports, "config", ()=>(0, _config.config));
parcelHelpers.export(exports, "audit", ()=>(0, _audit.audit));
parcelHelpers.export(exports, "auditTime", ()=>(0, _auditTime.auditTime));
parcelHelpers.export(exports, "buffer", ()=>(0, _buffer.buffer));
parcelHelpers.export(exports, "bufferCount", ()=>(0, _bufferCount.bufferCount));
parcelHelpers.export(exports, "bufferTime", ()=>(0, _bufferTime.bufferTime));
parcelHelpers.export(exports, "bufferToggle", ()=>(0, _bufferToggle.bufferToggle));
parcelHelpers.export(exports, "bufferWhen", ()=>(0, _bufferWhen.bufferWhen));
parcelHelpers.export(exports, "catchError", ()=>(0, _catchError.catchError));
parcelHelpers.export(exports, "combineAll", ()=>(0, _combineAll.combineAll));
parcelHelpers.export(exports, "combineLatestAll", ()=>(0, _combineLatestAll.combineLatestAll));
parcelHelpers.export(exports, "combineLatestWith", ()=>(0, _combineLatestWith.combineLatestWith));
parcelHelpers.export(exports, "concatAll", ()=>(0, _concatAll.concatAll));
parcelHelpers.export(exports, "concatMap", ()=>(0, _concatMap.concatMap));
parcelHelpers.export(exports, "concatMapTo", ()=>(0, _concatMapTo.concatMapTo));
parcelHelpers.export(exports, "concatWith", ()=>(0, _concatWith.concatWith));
parcelHelpers.export(exports, "connect", ()=>(0, _connect.connect));
parcelHelpers.export(exports, "count", ()=>(0, _count.count));
parcelHelpers.export(exports, "debounce", ()=>(0, _debounce.debounce));
parcelHelpers.export(exports, "debounceTime", ()=>(0, _debounceTime.debounceTime));
parcelHelpers.export(exports, "defaultIfEmpty", ()=>(0, _defaultIfEmpty.defaultIfEmpty));
parcelHelpers.export(exports, "delay", ()=>(0, _delay.delay));
parcelHelpers.export(exports, "delayWhen", ()=>(0, _delayWhen.delayWhen));
parcelHelpers.export(exports, "dematerialize", ()=>(0, _dematerialize.dematerialize));
parcelHelpers.export(exports, "distinct", ()=>(0, _distinct.distinct));
parcelHelpers.export(exports, "distinctUntilChanged", ()=>(0, _distinctUntilChanged.distinctUntilChanged));
parcelHelpers.export(exports, "distinctUntilKeyChanged", ()=>(0, _distinctUntilKeyChanged.distinctUntilKeyChanged));
parcelHelpers.export(exports, "elementAt", ()=>(0, _elementAt.elementAt));
parcelHelpers.export(exports, "endWith", ()=>(0, _endWith.endWith));
parcelHelpers.export(exports, "every", ()=>(0, _every.every));
parcelHelpers.export(exports, "exhaust", ()=>(0, _exhaust.exhaust));
parcelHelpers.export(exports, "exhaustAll", ()=>(0, _exhaustAll.exhaustAll));
parcelHelpers.export(exports, "exhaustMap", ()=>(0, _exhaustMap.exhaustMap));
parcelHelpers.export(exports, "expand", ()=>(0, _expand.expand));
parcelHelpers.export(exports, "filter", ()=>(0, _filter.filter));
parcelHelpers.export(exports, "finalize", ()=>(0, _finalize.finalize));
parcelHelpers.export(exports, "find", ()=>(0, _find.find));
parcelHelpers.export(exports, "findIndex", ()=>(0, _findIndex.findIndex));
parcelHelpers.export(exports, "first", ()=>(0, _first.first));
parcelHelpers.export(exports, "groupBy", ()=>(0, _groupBy.groupBy));
parcelHelpers.export(exports, "ignoreElements", ()=>(0, _ignoreElements.ignoreElements));
parcelHelpers.export(exports, "isEmpty", ()=>(0, _isEmpty.isEmpty));
parcelHelpers.export(exports, "last", ()=>(0, _last.last));
parcelHelpers.export(exports, "map", ()=>(0, _map.map));
parcelHelpers.export(exports, "mapTo", ()=>(0, _mapTo.mapTo));
parcelHelpers.export(exports, "materialize", ()=>(0, _materialize.materialize));
parcelHelpers.export(exports, "max", ()=>(0, _max.max));
parcelHelpers.export(exports, "mergeAll", ()=>(0, _mergeAll.mergeAll));
parcelHelpers.export(exports, "flatMap", ()=>(0, _flatMap.flatMap));
parcelHelpers.export(exports, "mergeMap", ()=>(0, _mergeMap.mergeMap));
parcelHelpers.export(exports, "mergeMapTo", ()=>(0, _mergeMapTo.mergeMapTo));
parcelHelpers.export(exports, "mergeScan", ()=>(0, _mergeScan.mergeScan));
parcelHelpers.export(exports, "mergeWith", ()=>(0, _mergeWith.mergeWith));
parcelHelpers.export(exports, "min", ()=>(0, _min.min));
parcelHelpers.export(exports, "multicast", ()=>(0, _multicast.multicast));
parcelHelpers.export(exports, "observeOn", ()=>(0, _observeOn.observeOn));
parcelHelpers.export(exports, "onErrorResumeNextWith", ()=>(0, _onErrorResumeNextWith.onErrorResumeNextWith));
parcelHelpers.export(exports, "pairwise", ()=>(0, _pairwise.pairwise));
parcelHelpers.export(exports, "pluck", ()=>(0, _pluck.pluck));
parcelHelpers.export(exports, "publish", ()=>(0, _publish.publish));
parcelHelpers.export(exports, "publishBehavior", ()=>(0, _publishBehavior.publishBehavior));
parcelHelpers.export(exports, "publishLast", ()=>(0, _publishLast.publishLast));
parcelHelpers.export(exports, "publishReplay", ()=>(0, _publishReplay.publishReplay));
parcelHelpers.export(exports, "raceWith", ()=>(0, _raceWith.raceWith));
parcelHelpers.export(exports, "reduce", ()=>(0, _reduce.reduce));
parcelHelpers.export(exports, "repeat", ()=>(0, _repeat.repeat));
parcelHelpers.export(exports, "repeatWhen", ()=>(0, _repeatWhen.repeatWhen));
parcelHelpers.export(exports, "retry", ()=>(0, _retry.retry));
parcelHelpers.export(exports, "retryWhen", ()=>(0, _retryWhen.retryWhen));
parcelHelpers.export(exports, "refCount", ()=>(0, _refCount.refCount));
parcelHelpers.export(exports, "sample", ()=>(0, _sample.sample));
parcelHelpers.export(exports, "sampleTime", ()=>(0, _sampleTime.sampleTime));
parcelHelpers.export(exports, "scan", ()=>(0, _scan.scan));
parcelHelpers.export(exports, "sequenceEqual", ()=>(0, _sequenceEqual.sequenceEqual));
parcelHelpers.export(exports, "share", ()=>(0, _share.share));
parcelHelpers.export(exports, "shareReplay", ()=>(0, _shareReplay.shareReplay));
parcelHelpers.export(exports, "single", ()=>(0, _single.single));
parcelHelpers.export(exports, "skip", ()=>(0, _skip.skip));
parcelHelpers.export(exports, "skipLast", ()=>(0, _skipLast.skipLast));
parcelHelpers.export(exports, "skipUntil", ()=>(0, _skipUntil.skipUntil));
parcelHelpers.export(exports, "skipWhile", ()=>(0, _skipWhile.skipWhile));
parcelHelpers.export(exports, "startWith", ()=>(0, _startWith.startWith));
parcelHelpers.export(exports, "subscribeOn", ()=>(0, _subscribeOn.subscribeOn));
parcelHelpers.export(exports, "switchAll", ()=>(0, _switchAll.switchAll));
parcelHelpers.export(exports, "switchMap", ()=>(0, _switchMap.switchMap));
parcelHelpers.export(exports, "switchMapTo", ()=>(0, _switchMapTo.switchMapTo));
parcelHelpers.export(exports, "switchScan", ()=>(0, _switchScan.switchScan));
parcelHelpers.export(exports, "take", ()=>(0, _take.take));
parcelHelpers.export(exports, "takeLast", ()=>(0, _takeLast.takeLast));
parcelHelpers.export(exports, "takeUntil", ()=>(0, _takeUntil.takeUntil));
parcelHelpers.export(exports, "takeWhile", ()=>(0, _takeWhile.takeWhile));
parcelHelpers.export(exports, "tap", ()=>(0, _tap.tap));
parcelHelpers.export(exports, "throttle", ()=>(0, _throttle.throttle));
parcelHelpers.export(exports, "throttleTime", ()=>(0, _throttleTime.throttleTime));
parcelHelpers.export(exports, "throwIfEmpty", ()=>(0, _throwIfEmpty.throwIfEmpty));
parcelHelpers.export(exports, "timeInterval", ()=>(0, _timeInterval.timeInterval));
parcelHelpers.export(exports, "timeout", ()=>(0, _timeout.timeout));
parcelHelpers.export(exports, "timeoutWith", ()=>(0, _timeoutWith.timeoutWith));
parcelHelpers.export(exports, "timestamp", ()=>(0, _timestamp.timestamp));
parcelHelpers.export(exports, "toArray", ()=>(0, _toArray.toArray));
parcelHelpers.export(exports, "window", ()=>(0, _window.window));
parcelHelpers.export(exports, "windowCount", ()=>(0, _windowCount.windowCount));
parcelHelpers.export(exports, "windowTime", ()=>(0, _windowTime.windowTime));
parcelHelpers.export(exports, "windowToggle", ()=>(0, _windowToggle.windowToggle));
parcelHelpers.export(exports, "windowWhen", ()=>(0, _windowWhen.windowWhen));
parcelHelpers.export(exports, "withLatestFrom", ()=>(0, _withLatestFrom.withLatestFrom));
parcelHelpers.export(exports, "zipAll", ()=>(0, _zipAll.zipAll));
parcelHelpers.export(exports, "zipWith", ()=>(0, _zipWith.zipWith));
var _observable = require("./internal/Observable");
var _connectableObservable = require("./internal/observable/ConnectableObservable");
var _observable1 = require("./internal/symbol/observable");
var _animationFrames = require("./internal/observable/dom/animationFrames");
var _subject = require("./internal/Subject");
var _behaviorSubject = require("./internal/BehaviorSubject");
var _replaySubject = require("./internal/ReplaySubject");
var _asyncSubject = require("./internal/AsyncSubject");
var _asap = require("./internal/scheduler/asap");
var _async = require("./internal/scheduler/async");
var _queue = require("./internal/scheduler/queue");
var _animationFrame = require("./internal/scheduler/animationFrame");
var _virtualTimeScheduler = require("./internal/scheduler/VirtualTimeScheduler");
var _scheduler = require("./internal/Scheduler");
var _subscription = require("./internal/Subscription");
var _subscriber = require("./internal/Subscriber");
var _notification = require("./internal/Notification");
var _pipe = require("./internal/util/pipe");
var _noop = require("./internal/util/noop");
var _identity = require("./internal/util/identity");
var _isObservable = require("./internal/util/isObservable");
var _lastValueFrom = require("./internal/lastValueFrom");
var _firstValueFrom = require("./internal/firstValueFrom");
var _argumentOutOfRangeError = require("./internal/util/ArgumentOutOfRangeError");
var _emptyError = require("./internal/util/EmptyError");
var _notFoundError = require("./internal/util/NotFoundError");
var _objectUnsubscribedError = require("./internal/util/ObjectUnsubscribedError");
var _sequenceError = require("./internal/util/SequenceError");
var _timeout = require("./internal/operators/timeout");
var _unsubscriptionError = require("./internal/util/UnsubscriptionError");
var _bindCallback = require("./internal/observable/bindCallback");
var _bindNodeCallback = require("./internal/observable/bindNodeCallback");
var _combineLatest = require("./internal/observable/combineLatest");
var _concat = require("./internal/observable/concat");
var _connectable = require("./internal/observable/connectable");
var _defer = require("./internal/observable/defer");
var _empty = require("./internal/observable/empty");
var _forkJoin = require("./internal/observable/forkJoin");
var _from = require("./internal/observable/from");
var _fromEvent = require("./internal/observable/fromEvent");
var _fromEventPattern = require("./internal/observable/fromEventPattern");
var _generate = require("./internal/observable/generate");
var _iif = require("./internal/observable/iif");
var _interval = require("./internal/observable/interval");
var _merge = require("./internal/observable/merge");
var _never = require("./internal/observable/never");
var _of = require("./internal/observable/of");
var _onErrorResumeNext = require("./internal/observable/onErrorResumeNext");
var _pairs = require("./internal/observable/pairs");
var _partition = require("./internal/observable/partition");
var _race = require("./internal/observable/race");
var _range = require("./internal/observable/range");
var _throwError = require("./internal/observable/throwError");
var _timer = require("./internal/observable/timer");
var _using = require("./internal/observable/using");
var _zip = require("./internal/observable/zip");
var _scheduled = require("./internal/scheduled/scheduled");
var _types = require("./internal/types");
parcelHelpers.exportAll(_types, exports);
var _config = require("./internal/config");
var _audit = require("./internal/operators/audit");
var _auditTime = require("./internal/operators/auditTime");
var _buffer = require("./internal/operators/buffer");
var _bufferCount = require("./internal/operators/bufferCount");
var _bufferTime = require("./internal/operators/bufferTime");
var _bufferToggle = require("./internal/operators/bufferToggle");
var _bufferWhen = require("./internal/operators/bufferWhen");
var _catchError = require("./internal/operators/catchError");
var _combineAll = require("./internal/operators/combineAll");
var _combineLatestAll = require("./internal/operators/combineLatestAll");
var _combineLatestWith = require("./internal/operators/combineLatestWith");
var _concatAll = require("./internal/operators/concatAll");
var _concatMap = require("./internal/operators/concatMap");
var _concatMapTo = require("./internal/operators/concatMapTo");
var _concatWith = require("./internal/operators/concatWith");
var _connect = require("./internal/operators/connect");
var _count = require("./internal/operators/count");
var _debounce = require("./internal/operators/debounce");
var _debounceTime = require("./internal/operators/debounceTime");
var _defaultIfEmpty = require("./internal/operators/defaultIfEmpty");
var _delay = require("./internal/operators/delay");
var _delayWhen = require("./internal/operators/delayWhen");
var _dematerialize = require("./internal/operators/dematerialize");
var _distinct = require("./internal/operators/distinct");
var _distinctUntilChanged = require("./internal/operators/distinctUntilChanged");
var _distinctUntilKeyChanged = require("./internal/operators/distinctUntilKeyChanged");
var _elementAt = require("./internal/operators/elementAt");
var _endWith = require("./internal/operators/endWith");
var _every = require("./internal/operators/every");
var _exhaust = require("./internal/operators/exhaust");
var _exhaustAll = require("./internal/operators/exhaustAll");
var _exhaustMap = require("./internal/operators/exhaustMap");
var _expand = require("./internal/operators/expand");
var _filter = require("./internal/operators/filter");
var _finalize = require("./internal/operators/finalize");
var _find = require("./internal/operators/find");
var _findIndex = require("./internal/operators/findIndex");
var _first = require("./internal/operators/first");
var _groupBy = require("./internal/operators/groupBy");
var _ignoreElements = require("./internal/operators/ignoreElements");
var _isEmpty = require("./internal/operators/isEmpty");
var _last = require("./internal/operators/last");
var _map = require("./internal/operators/map");
var _mapTo = require("./internal/operators/mapTo");
var _materialize = require("./internal/operators/materialize");
var _max = require("./internal/operators/max");
var _mergeAll = require("./internal/operators/mergeAll");
var _flatMap = require("./internal/operators/flatMap");
var _mergeMap = require("./internal/operators/mergeMap");
var _mergeMapTo = require("./internal/operators/mergeMapTo");
var _mergeScan = require("./internal/operators/mergeScan");
var _mergeWith = require("./internal/operators/mergeWith");
var _min = require("./internal/operators/min");
var _multicast = require("./internal/operators/multicast");
var _observeOn = require("./internal/operators/observeOn");
var _onErrorResumeNextWith = require("./internal/operators/onErrorResumeNextWith");
var _pairwise = require("./internal/operators/pairwise");
var _pluck = require("./internal/operators/pluck");
var _publish = require("./internal/operators/publish");
var _publishBehavior = require("./internal/operators/publishBehavior");
var _publishLast = require("./internal/operators/publishLast");
var _publishReplay = require("./internal/operators/publishReplay");
var _raceWith = require("./internal/operators/raceWith");
var _reduce = require("./internal/operators/reduce");
var _repeat = require("./internal/operators/repeat");
var _repeatWhen = require("./internal/operators/repeatWhen");
var _retry = require("./internal/operators/retry");
var _retryWhen = require("./internal/operators/retryWhen");
var _refCount = require("./internal/operators/refCount");
var _sample = require("./internal/operators/sample");
var _sampleTime = require("./internal/operators/sampleTime");
var _scan = require("./internal/operators/scan");
var _sequenceEqual = require("./internal/operators/sequenceEqual");
var _share = require("./internal/operators/share");
var _shareReplay = require("./internal/operators/shareReplay");
var _single = require("./internal/operators/single");
var _skip = require("./internal/operators/skip");
var _skipLast = require("./internal/operators/skipLast");
var _skipUntil = require("./internal/operators/skipUntil");
var _skipWhile = require("./internal/operators/skipWhile");
var _startWith = require("./internal/operators/startWith");
var _subscribeOn = require("./internal/operators/subscribeOn");
var _switchAll = require("./internal/operators/switchAll");
var _switchMap = require("./internal/operators/switchMap");
var _switchMapTo = require("./internal/operators/switchMapTo");
var _switchScan = require("./internal/operators/switchScan");
var _take = require("./internal/operators/take");
var _takeLast = require("./internal/operators/takeLast");
var _takeUntil = require("./internal/operators/takeUntil");
var _takeWhile = require("./internal/operators/takeWhile");
var _tap = require("./internal/operators/tap");
var _throttle = require("./internal/operators/throttle");
var _throttleTime = require("./internal/operators/throttleTime");
var _throwIfEmpty = require("./internal/operators/throwIfEmpty");
var _timeInterval = require("./internal/operators/timeInterval");
var _timeoutWith = require("./internal/operators/timeoutWith");
var _timestamp = require("./internal/operators/timestamp");
var _toArray = require("./internal/operators/toArray");
var _window = require("./internal/operators/window");
var _windowCount = require("./internal/operators/windowCount");
var _windowTime = require("./internal/operators/windowTime");
var _windowToggle = require("./internal/operators/windowToggle");
var _windowWhen = require("./internal/operators/windowWhen");
var _withLatestFrom = require("./internal/operators/withLatestFrom");
var _zipAll = require("./internal/operators/zipAll");
var _zipWith = require("./internal/operators/zipWith");

},{"./internal/Observable":"4eI6u","./internal/observable/ConnectableObservable":false,"./internal/symbol/observable":false,"./internal/observable/dom/animationFrames":false,"./internal/Subject":false,"./internal/BehaviorSubject":false,"./internal/ReplaySubject":false,"./internal/AsyncSubject":false,"./internal/scheduler/asap":false,"./internal/scheduler/async":false,"./internal/scheduler/queue":false,"./internal/scheduler/animationFrame":false,"./internal/scheduler/VirtualTimeScheduler":false,"./internal/Scheduler":false,"./internal/Subscription":false,"./internal/Subscriber":false,"./internal/Notification":false,"./internal/util/pipe":false,"./internal/util/noop":false,"./internal/util/identity":false,"./internal/util/isObservable":false,"./internal/lastValueFrom":false,"./internal/firstValueFrom":false,"./internal/util/ArgumentOutOfRangeError":false,"./internal/util/EmptyError":false,"./internal/util/NotFoundError":false,"./internal/util/ObjectUnsubscribedError":false,"./internal/util/SequenceError":false,"./internal/operators/timeout":false,"./internal/util/UnsubscriptionError":false,"./internal/observable/bindCallback":false,"./internal/observable/bindNodeCallback":false,"./internal/observable/combineLatest":false,"./internal/observable/concat":false,"./internal/observable/connectable":false,"./internal/observable/defer":false,"./internal/observable/empty":false,"./internal/observable/forkJoin":false,"./internal/observable/from":"7uxvl","./internal/observable/fromEvent":false,"./internal/observable/fromEventPattern":false,"./internal/observable/generate":false,"./internal/observable/iif":false,"./internal/observable/interval":false,"./internal/observable/merge":false,"./internal/observable/never":false,"./internal/observable/of":false,"./internal/observable/onErrorResumeNext":false,"./internal/observable/pairs":false,"./internal/observable/partition":false,"./internal/observable/race":false,"./internal/observable/range":false,"./internal/observable/throwError":false,"./internal/observable/timer":false,"./internal/observable/using":false,"./internal/observable/zip":false,"./internal/scheduled/scheduled":false,"./internal/types":false,"./internal/config":false,"./internal/operators/audit":false,"./internal/operators/auditTime":false,"./internal/operators/buffer":false,"./internal/operators/bufferCount":false,"./internal/operators/bufferTime":false,"./internal/operators/bufferToggle":false,"./internal/operators/bufferWhen":false,"./internal/operators/catchError":false,"./internal/operators/combineAll":false,"./internal/operators/combineLatestAll":false,"./internal/operators/combineLatestWith":false,"./internal/operators/concatAll":false,"./internal/operators/concatMap":false,"./internal/operators/concatMapTo":false,"./internal/operators/concatWith":false,"./internal/operators/connect":false,"./internal/operators/count":false,"./internal/operators/debounce":false,"./internal/operators/debounceTime":false,"./internal/operators/defaultIfEmpty":false,"./internal/operators/delay":false,"./internal/operators/delayWhen":false,"./internal/operators/dematerialize":false,"./internal/operators/distinct":false,"./internal/operators/distinctUntilChanged":false,"./internal/operators/distinctUntilKeyChanged":false,"./internal/operators/elementAt":false,"./internal/operators/endWith":false,"./internal/operators/every":false,"./internal/operators/exhaust":false,"./internal/operators/exhaustAll":false,"./internal/operators/exhaustMap":false,"./internal/operators/expand":false,"./internal/operators/filter":false,"./internal/operators/finalize":false,"./internal/operators/find":false,"./internal/operators/findIndex":false,"./internal/operators/first":false,"./internal/operators/groupBy":false,"./internal/operators/ignoreElements":false,"./internal/operators/isEmpty":false,"./internal/operators/last":false,"./internal/operators/map":false,"./internal/operators/mapTo":false,"./internal/operators/materialize":false,"./internal/operators/max":false,"./internal/operators/mergeAll":false,"./internal/operators/flatMap":false,"./internal/operators/mergeMap":false,"./internal/operators/mergeMapTo":false,"./internal/operators/mergeScan":false,"./internal/operators/mergeWith":false,"./internal/operators/min":false,"./internal/operators/multicast":false,"./internal/operators/observeOn":false,"./internal/operators/onErrorResumeNextWith":false,"./internal/operators/pairwise":false,"./internal/operators/pluck":false,"./internal/operators/publish":false,"./internal/operators/publishBehavior":false,"./internal/operators/publishLast":false,"./internal/operators/publishReplay":false,"./internal/operators/raceWith":false,"./internal/operators/reduce":false,"./internal/operators/repeat":false,"./internal/operators/repeatWhen":false,"./internal/operators/retry":false,"./internal/operators/retryWhen":false,"./internal/operators/refCount":false,"./internal/operators/sample":false,"./internal/operators/sampleTime":false,"./internal/operators/scan":false,"./internal/operators/sequenceEqual":false,"./internal/operators/share":false,"./internal/operators/shareReplay":false,"./internal/operators/single":false,"./internal/operators/skip":false,"./internal/operators/skipLast":false,"./internal/operators/skipUntil":false,"./internal/operators/skipWhile":false,"./internal/operators/startWith":false,"./internal/operators/subscribeOn":false,"./internal/operators/switchAll":false,"./internal/operators/switchMap":false,"./internal/operators/switchMapTo":false,"./internal/operators/switchScan":false,"./internal/operators/take":false,"./internal/operators/takeLast":false,"./internal/operators/takeUntil":false,"./internal/operators/takeWhile":false,"./internal/operators/tap":false,"./internal/operators/throttle":false,"./internal/operators/throttleTime":false,"./internal/operators/throwIfEmpty":false,"./internal/operators/timeInterval":false,"./internal/operators/timeoutWith":false,"./internal/operators/timestamp":false,"./internal/operators/toArray":false,"./internal/operators/window":false,"./internal/operators/windowCount":false,"./internal/operators/windowTime":false,"./internal/operators/windowToggle":false,"./internal/operators/windowWhen":false,"./internal/operators/withLatestFrom":false,"./internal/operators/zipAll":false,"./internal/operators/zipWith":false,"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4eI6u":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Observable", ()=>Observable);
var _subscriber = require("./Subscriber");
var _subscription = require("./Subscription");
var _observable = require("./symbol/observable");
var _pipe = require("./util/pipe");
var _config = require("./config");
var _isFunction = require("./util/isFunction");
var _errorContext = require("./util/errorContext");
var Observable = function() {
    function Observable(subscribe) {
        if (subscribe) this._subscribe = subscribe;
    }
    Observable.prototype.lift = function(operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function(observerOrNext, error, complete) {
        var _this = this;
        var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new (0, _subscriber.SafeSubscriber)(observerOrNext, error, complete);
        (0, _errorContext.errorContext)(function() {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function(sink) {
        try {
            return this._subscribe(sink);
        } catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function(next, promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var subscriber = new (0, _subscriber.SafeSubscriber)({
                next: function(value) {
                    try {
                        next(value);
                    } catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function(subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[0, _observable.observable] = function() {
        return this;
    };
    Observable.prototype.pipe = function() {
        var operations = [];
        for(var _i = 0; _i < arguments.length; _i++)operations[_i] = arguments[_i];
        return (0, _pipe.pipeFromArray)(operations)(this);
    };
    Observable.prototype.toPromise = function(promiseCtor) {
        var _this = this;
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor(function(resolve, reject) {
            var value;
            _this.subscribe(function(x) {
                return value = x;
            }, function(err) {
                return reject(err);
            }, function() {
                return resolve(value);
            });
        });
    };
    Observable.create = function(subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}();
function getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : (0, _config.config).Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
    return value && (0, _isFunction.isFunction)(value.next) && (0, _isFunction.isFunction)(value.error) && (0, _isFunction.isFunction)(value.complete);
}
function isSubscriber(value) {
    return value && value instanceof (0, _subscriber.Subscriber) || isObserver(value) && (0, _subscription.isSubscription)(value);
}

},{"./Subscriber":"2T7w6","./Subscription":"dgO6U","./symbol/observable":"hyTh9","./util/pipe":"b2Sac","./config":"6KvGW","./util/isFunction":"lvhDl","./util/errorContext":"dwMmD","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2T7w6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscriber", ()=>Subscriber);
parcelHelpers.export(exports, "SafeSubscriber", ()=>SafeSubscriber);
parcelHelpers.export(exports, "EMPTY_OBSERVER", ()=>EMPTY_OBSERVER);
var _tslib = require("tslib");
var _isFunction = require("./util/isFunction");
var _subscription = require("./Subscription");
var _config = require("./config");
var _reportUnhandledError = require("./util/reportUnhandledError");
var _noop = require("./util/noop");
var _notificationFactories = require("./NotificationFactories");
var _timeoutProvider = require("./scheduler/timeoutProvider");
var _errorContext = require("./util/errorContext");
var Subscriber = function(_super) {
    (0, _tslib.__extends)(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if ((0, _subscription.isSubscription)(destination)) destination.add(_this);
        } else _this.destination = EMPTY_OBSERVER;
        return _this;
    }
    Subscriber.create = function(next, error, complete) {
        return new SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function(value) {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.nextNotification)(value), this);
        else this._next(value);
    };
    Subscriber.prototype.error = function(err) {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.errorNotification)(err), this);
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function() {
        if (this.isStopped) handleStoppedNotification((0, _notificationFactories.COMPLETE_NOTIFICATION), this);
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function() {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function(value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function(err) {
        try {
            this.destination.error(err);
        } finally{
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function() {
        try {
            this.destination.complete();
        } finally{
            this.unsubscribe();
        }
    };
    return Subscriber;
}((0, _subscription.Subscription));
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
    return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function(value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) try {
            partialObserver.next(value);
        } catch (error) {
            handleUnhandledError(error);
        }
    };
    ConsumerObserver.prototype.error = function(err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) try {
            partialObserver.error(err);
        } catch (error) {
            handleUnhandledError(error);
        }
        else handleUnhandledError(err);
    };
    ConsumerObserver.prototype.complete = function() {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) try {
            partialObserver.complete();
        } catch (error) {
            handleUnhandledError(error);
        }
    };
    return ConsumerObserver;
}();
var SafeSubscriber = function(_super) {
    (0, _tslib.__extends)(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if ((0, _isFunction.isFunction)(observerOrNext) || !observerOrNext) partialObserver = {
            next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
            error: error !== null && error !== void 0 ? error : undefined,
            complete: complete !== null && complete !== void 0 ? complete : undefined
        };
        else {
            var context_1;
            if (_this && (0, _config.config).useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function() {
                    return _this.unsubscribe();
                };
                partialObserver = {
                    next: observerOrNext.next && bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
                };
            } else partialObserver = observerOrNext;
        }
        _this.destination = new ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(Subscriber);
function handleUnhandledError(error) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling) (0, _errorContext.captureError)(error);
    else (0, _reportUnhandledError.reportUnhandledError)(error);
}
function defaultErrorHandler(err) {
    throw err;
}
function handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = (0, _config.config).onStoppedNotification;
    onStoppedNotification && (0, _timeoutProvider.timeoutProvider).setTimeout(function() {
        return onStoppedNotification(notification, subscriber);
    });
}
var EMPTY_OBSERVER = {
    closed: true,
    next: (0, _noop.noop),
    error: defaultErrorHandler,
    complete: (0, _noop.noop)
};

},{"tslib":"iC1Dx","./util/isFunction":"lvhDl","./Subscription":"dgO6U","./config":"6KvGW","./util/reportUnhandledError":"5g1tX","./util/noop":"kxCws","./NotificationFactories":"k8Ytc","./scheduler/timeoutProvider":"iO3rC","./util/errorContext":"dwMmD","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lvhDl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFunction", ()=>isFunction);
function isFunction(value) {
    return typeof value === 'function';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dgO6U":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Subscription", ()=>Subscription);
parcelHelpers.export(exports, "EMPTY_SUBSCRIPTION", ()=>EMPTY_SUBSCRIPTION);
parcelHelpers.export(exports, "isSubscription", ()=>isSubscription);
var _tslib = require("tslib");
var _isFunction = require("./util/isFunction");
var _unsubscriptionError = require("./util/UnsubscriptionError");
var _arrRemove = require("./util/arrRemove");
var Subscription = function() {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function() {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) try {
                    for(var _parentage_1 = (0, _tslib.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()){
                        var parent_1 = _parentage_1_1.value;
                        parent_1.remove(this);
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
                else _parentage.remove(this);
            }
            var initialFinalizer = this.initialTeardown;
            if ((0, _isFunction.isFunction)(initialFinalizer)) try {
                initialFinalizer();
            } catch (e) {
                errors = e instanceof (0, _unsubscriptionError.UnsubscriptionError) ? e.errors : [
                    e
                ];
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for(var _finalizers_1 = (0, _tslib.__values)(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()){
                        var finalizer = _finalizers_1_1.value;
                        try {
                            execFinalizer(finalizer);
                        } catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof (0, _unsubscriptionError.UnsubscriptionError)) errors = (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(errors)), (0, _tslib.__read)(err.errors));
                            else errors.push(err);
                        }
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
            }
            if (errors) throw new (0, _unsubscriptionError.UnsubscriptionError)(errors);
        }
    };
    Subscription.prototype.add = function(teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) execFinalizer(teardown);
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) return;
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function(parent) {
        var _parentage = this._parentage;
        return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
    };
    Subscription.prototype._addParent = function(parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [
            _parentage,
            parent
        ] : parent;
    };
    Subscription.prototype._removeParent = function(parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) this._parentage = null;
        else if (Array.isArray(_parentage)) (0, _arrRemove.arrRemove)(_parentage, parent);
    };
    Subscription.prototype.remove = function(teardown) {
        var _finalizers = this._finalizers;
        _finalizers && (0, _arrRemove.arrRemove)(_finalizers, teardown);
        if (teardown instanceof Subscription) teardown._removeParent(this);
    };
    Subscription.EMPTY = function() {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    }();
    return Subscription;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
    return value instanceof Subscription || value && 'closed' in value && (0, _isFunction.isFunction)(value.remove) && (0, _isFunction.isFunction)(value.add) && (0, _isFunction.isFunction)(value.unsubscribe);
}
function execFinalizer(finalizer) {
    if ((0, _isFunction.isFunction)(finalizer)) finalizer();
    else finalizer.unsubscribe();
}

},{"tslib":"iC1Dx","./util/isFunction":"lvhDl","./util/UnsubscriptionError":"gv4uB","./util/arrRemove":"a78jB","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gv4uB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnsubscriptionError", ()=>UnsubscriptionError);
var _createErrorClass = require("./createErrorClass");
var UnsubscriptionError = (0, _createErrorClass.createErrorClass)(function(_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
            return i + 1 + ") " + err.toString();
        }).join('\n  ') : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});

},{"./createErrorClass":"a9u3o","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"a9u3o":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createErrorClass", ()=>createErrorClass);
function createErrorClass(createImpl) {
    var _super = function(instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"a78jB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arrRemove", ()=>arrRemove);
function arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6KvGW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "config", ()=>config);
var config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5g1tX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "reportUnhandledError", ()=>reportUnhandledError);
var _config = require("../config");
var _timeoutProvider = require("../scheduler/timeoutProvider");
function reportUnhandledError(err) {
    (0, _timeoutProvider.timeoutProvider).setTimeout(function() {
        var onUnhandledError = (0, _config.config).onUnhandledError;
        if (onUnhandledError) onUnhandledError(err);
        else throw err;
    });
}

},{"../config":"6KvGW","../scheduler/timeoutProvider":"iO3rC","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iO3rC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeoutProvider", ()=>timeoutProvider);
var _tslib = require("tslib");
var timeoutProvider = {
    setTimeout: function(handler, timeout) {
        var args = [];
        for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
        var delegate = timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) return delegate.setTimeout.apply(delegate, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
        return setTimeout.apply(void 0, (0, _tslib.__spreadArray)([
            handler,
            timeout
        ], (0, _tslib.__read)(args)));
    },
    clearTimeout: function(handle) {
        var delegate = timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined
};

},{"tslib":"iC1Dx","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kxCws":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "noop", ()=>noop);
function noop() {}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"k8Ytc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COMPLETE_NOTIFICATION", ()=>COMPLETE_NOTIFICATION);
parcelHelpers.export(exports, "errorNotification", ()=>errorNotification);
parcelHelpers.export(exports, "nextNotification", ()=>nextNotification);
parcelHelpers.export(exports, "createNotification", ()=>createNotification);
var COMPLETE_NOTIFICATION = function() {
    return createNotification('C', undefined, undefined);
}();
function errorNotification(error) {
    return createNotification('E', undefined, error);
}
function nextNotification(value) {
    return createNotification('N', value, undefined);
}
function createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dwMmD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "errorContext", ()=>errorContext);
parcelHelpers.export(exports, "captureError", ()=>captureError);
var _config = require("../config");
var context = null;
function errorContext(cb) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling) {
        var isRoot = !context;
        if (isRoot) context = {
            errorThrown: false,
            error: null
        };
        cb();
        if (isRoot) {
            var _a = context, errorThrown = _a.errorThrown, error = _a.error;
            context = null;
            if (errorThrown) throw error;
        }
    } else cb();
}
function captureError(err) {
    if ((0, _config.config).useDeprecatedSynchronousErrorHandling && context) {
        context.errorThrown = true;
        context.error = err;
    }
}

},{"../config":"6KvGW","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hyTh9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observable", ()=>observable);
var observable = function() {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"b2Sac":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pipe", ()=>pipe);
parcelHelpers.export(exports, "pipeFromArray", ()=>pipeFromArray);
var _identity = require("./identity");
function pipe() {
    var fns = [];
    for(var _i = 0; _i < arguments.length; _i++)fns[_i] = arguments[_i];
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (fns.length === 0) return 0, _identity.identity;
    if (fns.length === 1) return fns[0];
    return function piped(input) {
        return fns.reduce(function(prev, fn) {
            return fn(prev);
        }, input);
    };
}

},{"./identity":"7M7Zk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7M7Zk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
function identity(x) {
    return x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7uxvl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "from", ()=>from);
var _scheduled = require("../scheduled/scheduled");
var _innerFrom = require("./innerFrom");
function from(input, scheduler) {
    return scheduler ? (0, _scheduled.scheduled)(input, scheduler) : (0, _innerFrom.innerFrom)(input);
}

},{"../scheduled/scheduled":"gFsQQ","./innerFrom":"iapv6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gFsQQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduled", ()=>scheduled);
var _scheduleObservable = require("./scheduleObservable");
var _schedulePromise = require("./schedulePromise");
var _scheduleArray = require("./scheduleArray");
var _scheduleIterable = require("./scheduleIterable");
var _scheduleAsyncIterable = require("./scheduleAsyncIterable");
var _isInteropObservable = require("../util/isInteropObservable");
var _isPromise = require("../util/isPromise");
var _isArrayLike = require("../util/isArrayLike");
var _isIterable = require("../util/isIterable");
var _isAsyncIterable = require("../util/isAsyncIterable");
var _throwUnobservableError = require("../util/throwUnobservableError");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
var _scheduleReadableStreamLike = require("./scheduleReadableStreamLike");
function scheduled(input, scheduler) {
    if (input != null) {
        if ((0, _isInteropObservable.isInteropObservable)(input)) return (0, _scheduleObservable.scheduleObservable)(input, scheduler);
        if ((0, _isArrayLike.isArrayLike)(input)) return (0, _scheduleArray.scheduleArray)(input, scheduler);
        if ((0, _isPromise.isPromise)(input)) return (0, _schedulePromise.schedulePromise)(input, scheduler);
        if ((0, _isAsyncIterable.isAsyncIterable)(input)) return (0, _scheduleAsyncIterable.scheduleAsyncIterable)(input, scheduler);
        if ((0, _isIterable.isIterable)(input)) return (0, _scheduleIterable.scheduleIterable)(input, scheduler);
        if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) return (0, _scheduleReadableStreamLike.scheduleReadableStreamLike)(input, scheduler);
    }
    throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}

},{"./scheduleObservable":"hn3Zs","./schedulePromise":"235X5","./scheduleArray":"bSNwU","./scheduleIterable":"dQLlG","./scheduleAsyncIterable":"cMhWl","../util/isInteropObservable":"2UMId","../util/isPromise":"bkdXJ","../util/isArrayLike":"gFCBe","../util/isIterable":"6aoP9","../util/isAsyncIterable":"iVUto","../util/throwUnobservableError":"7tY8F","../util/isReadableStreamLike":"9kH6M","./scheduleReadableStreamLike":"doQj4","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hn3Zs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleObservable", ()=>scheduleObservable);
var _innerFrom = require("../observable/innerFrom");
var _observeOn = require("../operators/observeOn");
var _subscribeOn = require("../operators/subscribeOn");
function scheduleObservable(input, scheduler) {
    return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":"iapv6","../operators/observeOn":"9O89s","../operators/subscribeOn":"3zvk1","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iapv6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "innerFrom", ()=>innerFrom);
parcelHelpers.export(exports, "fromInteropObservable", ()=>fromInteropObservable);
parcelHelpers.export(exports, "fromArrayLike", ()=>fromArrayLike);
parcelHelpers.export(exports, "fromPromise", ()=>fromPromise);
parcelHelpers.export(exports, "fromIterable", ()=>fromIterable);
parcelHelpers.export(exports, "fromAsyncIterable", ()=>fromAsyncIterable);
parcelHelpers.export(exports, "fromReadableStreamLike", ()=>fromReadableStreamLike);
var _tslib = require("tslib");
var _isArrayLike = require("../util/isArrayLike");
var _isPromise = require("../util/isPromise");
var _observable = require("../Observable");
var _isInteropObservable = require("../util/isInteropObservable");
var _isAsyncIterable = require("../util/isAsyncIterable");
var _throwUnobservableError = require("../util/throwUnobservableError");
var _isIterable = require("../util/isIterable");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
var _isFunction = require("../util/isFunction");
var _reportUnhandledError = require("../util/reportUnhandledError");
var _observable1 = require("../symbol/observable");
function innerFrom(input) {
    if (input instanceof (0, _observable.Observable)) return input;
    if (input != null) {
        if ((0, _isInteropObservable.isInteropObservable)(input)) return fromInteropObservable(input);
        if ((0, _isArrayLike.isArrayLike)(input)) return fromArrayLike(input);
        if ((0, _isPromise.isPromise)(input)) return fromPromise(input);
        if ((0, _isAsyncIterable.isAsyncIterable)(input)) return fromAsyncIterable(input);
        if ((0, _isIterable.isIterable)(input)) return fromIterable(input);
        if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) return fromReadableStreamLike(input);
    }
    throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}
function fromInteropObservable(obj) {
    return new (0, _observable.Observable)(function(subscriber) {
        var obs = obj[0, _observable1.observable]();
        if ((0, _isFunction.isFunction)(obs.subscribe)) return obs.subscribe(subscriber);
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function fromArrayLike(array) {
    return new (0, _observable.Observable)(function(subscriber) {
        for(var i = 0; i < array.length && !subscriber.closed; i++)subscriber.next(array[i]);
        subscriber.complete();
    });
}
function fromPromise(promise) {
    return new (0, _observable.Observable)(function(subscriber) {
        promise.then(function(value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function(err) {
            return subscriber.error(err);
        }).then(null, (0, _reportUnhandledError.reportUnhandledError));
    });
}
function fromIterable(iterable) {
    return new (0, _observable.Observable)(function(subscriber) {
        var e_1, _a;
        try {
            for(var iterable_1 = (0, _tslib.__values)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()){
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) return;
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        subscriber.complete();
    });
}
function fromAsyncIterable(asyncIterable) {
    return new (0, _observable.Observable)(function(subscriber) {
        process(asyncIterable, subscriber).catch(function(err) {
            return subscriber.error(err);
        });
    });
}
function fromReadableStreamLike(readableStream) {
    return fromAsyncIterable((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(readableStream));
}
function process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var value, e_2_1;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    _b.trys.push([
                        0,
                        5,
                        6,
                        11
                    ]);
                    asyncIterable_1 = (0, _tslib.__asyncValues)(asyncIterable);
                    _b.label = 1;
                case 1:
                    return [
                        4,
                        asyncIterable_1.next()
                    ];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [
                        3,
                        4
                    ];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) return [
                        2
                    ];
                    _b.label = 3;
                case 3:
                    return [
                        3,
                        1
                    ];
                case 4:
                    return [
                        3,
                        11
                    ];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = {
                        error: e_2_1
                    };
                    return [
                        3,
                        11
                    ];
                case 6:
                    _b.trys.push([
                        6,
                        ,
                        9,
                        10
                    ]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [
                        3,
                        8
                    ];
                    return [
                        4,
                        _a.call(asyncIterable_1)
                    ];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8:
                    return [
                        3,
                        10
                    ];
                case 9:
                    if (e_2) throw e_2.error;
                    return [
                        7
                    ];
                case 10:
                    return [
                        7
                    ];
                case 11:
                    subscriber.complete();
                    return [
                        2
                    ];
            }
        });
    });
}

},{"tslib":"iC1Dx","../util/isArrayLike":"gFCBe","../util/isPromise":"bkdXJ","../Observable":"4eI6u","../util/isInteropObservable":"2UMId","../util/isAsyncIterable":"iVUto","../util/throwUnobservableError":"7tY8F","../util/isIterable":"6aoP9","../util/isReadableStreamLike":"9kH6M","../util/isFunction":"lvhDl","../util/reportUnhandledError":"5g1tX","../symbol/observable":"hyTh9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gFCBe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayLike", ()=>isArrayLike);
var isArrayLike = function(x) {
    return x && typeof x.length === 'number' && typeof x !== 'function';
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bkdXJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPromise", ()=>isPromise);
var _isFunction = require("./isFunction");
function isPromise(value) {
    return (0, _isFunction.isFunction)(value === null || value === void 0 ? void 0 : value.then);
}

},{"./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2UMId":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isInteropObservable", ()=>isInteropObservable);
var _observable = require("../symbol/observable");
var _isFunction = require("./isFunction");
function isInteropObservable(input) {
    return (0, _isFunction.isFunction)(input[0, _observable.observable]);
}

},{"../symbol/observable":"hyTh9","./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iVUto":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isAsyncIterable", ()=>isAsyncIterable);
var _isFunction = require("./isFunction");
function isAsyncIterable(obj) {
    return Symbol.asyncIterator && (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

},{"./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7tY8F":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createInvalidObservableTypeError", ()=>createInvalidObservableTypeError);
function createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6aoP9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
var _iterator = require("../symbol/iterator");
var _isFunction = require("./isFunction");
function isIterable(input) {
    return (0, _isFunction.isFunction)(input === null || input === void 0 ? void 0 : input[0, _iterator.iterator]);
}

},{"../symbol/iterator":"at3yn","./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"at3yn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSymbolIterator", ()=>getSymbolIterator);
parcelHelpers.export(exports, "iterator", ()=>iterator);
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) return '@@iterator';
    return Symbol.iterator;
}
var iterator = getSymbolIterator();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9kH6M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "readableStreamLikeToAsyncGenerator", ()=>readableStreamLikeToAsyncGenerator);
parcelHelpers.export(exports, "isReadableStreamLike", ()=>isReadableStreamLike);
var _tslib = require("tslib");
var _isFunction = require("./isFunction");
function readableStreamLikeToAsyncGenerator(readableStream) {
    return (0, _tslib.__asyncGenerator)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        ,
                        9,
                        10
                    ]);
                    _b.label = 2;
                case 2:
                    return [
                        4,
                        (0, _tslib.__await)(reader.read())
                    ];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [
                        3,
                        5
                    ];
                    return [
                        4,
                        (0, _tslib.__await)(void 0)
                    ];
                case 4:
                    return [
                        2,
                        _b.sent()
                    ];
                case 5:
                    return [
                        4,
                        (0, _tslib.__await)(value)
                    ];
                case 6:
                    return [
                        4,
                        _b.sent()
                    ];
                case 7:
                    _b.sent();
                    return [
                        3,
                        2
                    ];
                case 8:
                    return [
                        3,
                        10
                    ];
                case 9:
                    reader.releaseLock();
                    return [
                        7
                    ];
                case 10:
                    return [
                        2
                    ];
            }
        });
    });
}
function isReadableStreamLike(obj) {
    return (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

},{"tslib":"iC1Dx","./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9O89s":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "observeOn", ()=>observeOn);
var _executeSchedule = require("../util/executeSchedule");
var _lift = require("../util/lift");
var _operatorSubscriber = require("./OperatorSubscriber");
function observeOn(scheduler, delay) {
    if (delay === void 0) delay = 0;
    return (0, _lift.operate)(function(source, subscriber) {
        source.subscribe((0, _operatorSubscriber.createOperatorSubscriber)(subscriber, function(value) {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.next(value);
            }, delay);
        }, function() {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.complete();
            }, delay);
        }, function(err) {
            return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                return subscriber.error(err);
            }, delay);
        }));
    });
}

},{"../util/executeSchedule":"lA2TD","../util/lift":"2gwlF","./OperatorSubscriber":"j7b29","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lA2TD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "executeSchedule", ()=>executeSchedule);
function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) delay = 0;
    if (repeat === void 0) repeat = false;
    var scheduleSubscription = scheduler.schedule(function() {
        work();
        if (repeat) parentSubscription.add(this.schedule(null, delay));
        else this.unsubscribe();
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) return scheduleSubscription;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2gwlF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasLift", ()=>hasLift);
parcelHelpers.export(exports, "operate", ()=>operate);
var _isFunction = require("./isFunction");
function hasLift(source) {
    return (0, _isFunction.isFunction)(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
    return function(source) {
        if (hasLift(source)) return source.lift(function(liftedSource) {
            try {
                return init(liftedSource, this);
            } catch (err) {
                this.error(err);
            }
        });
        throw new TypeError('Unable to lift unknown Observable type');
    };
}

},{"./isFunction":"lvhDl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"j7b29":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOperatorSubscriber", ()=>createOperatorSubscriber);
parcelHelpers.export(exports, "OperatorSubscriber", ()=>OperatorSubscriber);
var _tslib = require("tslib");
var _subscriber = require("../Subscriber");
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
    (0, _tslib.__extends)(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function(value) {
            try {
                onNext(value);
            } catch (err) {
                destination.error(err);
            }
        } : _super.prototype._next;
        _this._error = onError ? function(err) {
            try {
                onError(err);
            } catch (err) {
                destination.error(err);
            } finally{
                this.unsubscribe();
            }
        } : _super.prototype._error;
        _this._complete = onComplete ? function() {
            try {
                onComplete();
            } catch (err) {
                destination.error(err);
            } finally{
                this.unsubscribe();
            }
        } : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function() {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 || _a.call(this));
        }
    };
    return OperatorSubscriber;
}((0, _subscriber.Subscriber));

},{"tslib":"iC1Dx","../Subscriber":"2T7w6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3zvk1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "subscribeOn", ()=>subscribeOn);
var _lift = require("../util/lift");
function subscribeOn(scheduler, delay) {
    if (delay === void 0) delay = 0;
    return (0, _lift.operate)(function(source, subscriber) {
        subscriber.add(scheduler.schedule(function() {
            return source.subscribe(subscriber);
        }, delay));
    });
}

},{"../util/lift":"2gwlF","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"235X5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "schedulePromise", ()=>schedulePromise);
var _innerFrom = require("../observable/innerFrom");
var _observeOn = require("../operators/observeOn");
var _subscribeOn = require("../operators/subscribeOn");
function schedulePromise(input, scheduler) {
    return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":"iapv6","../operators/observeOn":"9O89s","../operators/subscribeOn":"3zvk1","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bSNwU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleArray", ()=>scheduleArray);
var _observable = require("../Observable");
function scheduleArray(input, scheduler) {
    return new (0, _observable.Observable)(function(subscriber) {
        var i = 0;
        return scheduler.schedule(function() {
            if (i === input.length) subscriber.complete();
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) this.schedule();
            }
        });
    });
}

},{"../Observable":"4eI6u","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dQLlG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleIterable", ()=>scheduleIterable);
var _observable = require("../Observable");
var _iterator = require("../symbol/iterator");
var _isFunction = require("../util/isFunction");
var _executeSchedule = require("../util/executeSchedule");
function scheduleIterable(input, scheduler) {
    return new (0, _observable.Observable)(function(subscriber) {
        var iterator;
        (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
            iterator = input[0, _iterator.iterator]();
            (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                var _a;
                var value;
                var done;
                try {
                    _a = iterator.next(), value = _a.value, done = _a.done;
                } catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) subscriber.complete();
                else subscriber.next(value);
            }, 0, true);
        });
        return function() {
            return (0, _isFunction.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
        };
    });
}

},{"../Observable":"4eI6u","../symbol/iterator":"at3yn","../util/isFunction":"lvhDl","../util/executeSchedule":"lA2TD","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cMhWl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleAsyncIterable", ()=>scheduleAsyncIterable);
var _observable = require("../Observable");
var _executeSchedule = require("../util/executeSchedule");
function scheduleAsyncIterable(input, scheduler) {
    if (!input) throw new Error('Iterable cannot be null');
    return new (0, _observable.Observable)(function(subscriber) {
        (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
            var iterator = input[Symbol.asyncIterator]();
            (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function() {
                iterator.next().then(function(result) {
                    if (result.done) subscriber.complete();
                    else subscriber.next(result.value);
                });
            }, 0, true);
        });
    });
}

},{"../Observable":"4eI6u","../util/executeSchedule":"lA2TD","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"doQj4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheduleReadableStreamLike", ()=>scheduleReadableStreamLike);
var _scheduleAsyncIterable = require("./scheduleAsyncIterable");
var _isReadableStreamLike = require("../util/isReadableStreamLike");
function scheduleReadableStreamLike(input, scheduler) {
    return (0, _scheduleAsyncIterable.scheduleAsyncIterable)((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(input), scheduler);
}

},{"./scheduleAsyncIterable":"cMhWl","../util/isReadableStreamLike":"9kH6M","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8aVSr":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isWebWorker", ()=>isWebWorker);
const isWebWorker = ()=>{
    if (typeof self === 'undefined') return false;
    const selfContext = self;
    return typeof selfContext.WorkerGlobalScope !== 'undefined' && self instanceof selfContext.WorkerGlobalScope;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9sYmd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SESSION_START_EVENT", ()=>(0, _constantsMjs.SESSION_START_EVENT));
parcelHelpers.export(exports, "SESSION_STOP_EVENT", ()=>(0, _constantsMjs.SESSION_STOP_EVENT));
parcelHelpers.export(exports, "sessionListener", ()=>sessionListener);
var _sessionListenerMjs = require("./SessionListener.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const sessionListener = new (0, _sessionListenerMjs.SessionListener)();

},{"./SessionListener.mjs":"hzrUK","./constants.mjs":"7PHU6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hzrUK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SessionListener", ()=>SessionListener);
var _isBrowserMjs = require("../isBrowser.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const stateChangeListeners = new Set();
class SessionListener {
    constructor(){
        this.listenerActive = false;
        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
        // Setup state listeners
        if ((0, _isBrowserMjs.isBrowser)()) {
            document.addEventListener('visibilitychange', this.handleVisibilityChange, false);
            this.listenerActive = true;
        }
    }
    addStateChangeListener(listener, notifyOnAdd = false) {
        // No-op if document listener is not active
        if (!this.listenerActive) return;
        stateChangeListeners.add(listener);
        // Notify new handlers of the current status on add
        if (notifyOnAdd) listener(this.getSessionState());
    }
    removeStateChangeListener(handler) {
        // No-op if document listener is not active
        if (!this.listenerActive) return;
        stateChangeListeners.delete(handler);
    }
    handleVisibilityChange() {
        this.notifyHandlers();
    }
    notifyHandlers() {
        const sessionState = this.getSessionState();
        stateChangeListeners.forEach((listener)=>{
            listener(sessionState);
        });
    }
    getSessionState() {
        if ((0, _isBrowserMjs.isBrowser)() && document.visibilityState !== 'hidden') return 'started';
        // If, for any reason, document is undefined the session will never start
        return 'ended';
    }
}

},{"../isBrowser.mjs":"93TiA","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"93TiA":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser);
const isBrowser = ()=>typeof window !== 'undefined' && typeof window.document !== 'undefined';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7PHU6":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Standard session start & stop event names
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SESSION_START_EVENT", ()=>SESSION_START_EVENT);
parcelHelpers.export(exports, "SESSION_STOP_EVENT", ()=>SESSION_STOP_EVENT);
const SESSION_START_EVENT = '_session.start';
const SESSION_STOP_EVENT = '_session.stop';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"10LNi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthClass", ()=>AuthClass);
var _consoleLoggerMjs = require("../../Logger/ConsoleLogger.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('Auth');
class AuthClass {
    /**
     * Configure Auth category
     *
     * @internal
     *
     * @param authResourcesConfig - Resources configurations required by Auth providers.
     * @param authOptions - Client options used by library
     *
     * @returns void
     */ configure(authResourcesConfig, authOptions) {
        this.authConfig = authResourcesConfig;
        this.authOptions = authOptions;
        if (authResourcesConfig && authResourcesConfig.Cognito?.userPoolEndpoint) logger.warn(getCustomEndpointWarningMessage('Amazon Cognito User Pool'));
        if (authResourcesConfig && authResourcesConfig.Cognito?.identityPoolEndpoint) logger.warn(getCustomEndpointWarningMessage('Amazon Cognito Identity Pool'));
    }
    /**
     * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it
     * will automatically refresh expired auth tokens if a valid refresh token is present. You can force a refresh
     * of non-expired tokens with `{ forceRefresh: true }` input.
     *
     * @param options - Options configuring the fetch behavior.
     *
     * @returns Promise of current auth session {@link AuthSession}.
     */ async fetchAuthSession(options = {}) {
        let credentialsAndIdentityId;
        let userSub;
        // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available
        const tokens = await this.getTokens(options);
        if (tokens) {
            userSub = tokens.accessToken?.payload?.sub;
            // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)
            credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({
                authConfig: this.authConfig,
                tokens,
                authenticated: true,
                forceRefresh: options.forceRefresh
            });
        } else // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)
        credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({
            authConfig: this.authConfig,
            authenticated: false,
            forceRefresh: options.forceRefresh
        });
        return {
            tokens,
            credentials: credentialsAndIdentityId?.credentials,
            identityId: credentialsAndIdentityId?.identityId,
            userSub
        };
    }
    async clearCredentials() {
        await this.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();
    }
    async getTokens(options) {
        return await this.authOptions?.tokenProvider?.getTokens(options) ?? undefined;
    }
}
const getCustomEndpointWarningMessage = (target)=>`You are using a custom Amazon ${target} endpoint, ensure the endpoint is correct.`;

},{"../../Logger/ConsoleLogger.mjs":"dnAuQ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4o1Bn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchAuthSession", ()=>fetchAuthSession);
var _amplifyMjs = require("../Amplify.mjs");
var _fetchAuthSessionMjs = require("./internal/fetchAuthSession.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Fetch the auth session including the tokens and credentials if they are available. By default it
 * will automatically refresh expired auth tokens if a valid refresh token is present. You can force a refresh
 * of non-expired tokens with `{ forceRefresh: true }` input.
 *
 * @param options - Options configuring the fetch behavior.
 * @throws {@link AuthError} - Throws error when session information cannot be refreshed.
 * @returns Promise<AuthSession>
 */ const fetchAuthSession = (options)=>{
    return (0, _fetchAuthSessionMjs.fetchAuthSession)((0, _amplifyMjs.Amplify), options);
};

},{"../Amplify.mjs":"7YjAe","./internal/fetchAuthSession.mjs":"aRdEx","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aRdEx":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchAuthSession", ()=>fetchAuthSession);
const fetchAuthSession = (amplify, options)=>{
    return amplify.Auth.fetchAuthSession(options);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"km7Jc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clearCredentials", ()=>clearCredentials);
var _amplifyMjs = require("../Amplify.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function clearCredentials() {
    return (0, _amplifyMjs.Amplify).Auth.clearCredentials();
}

},{"../Amplify.mjs":"7YjAe","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lFgGa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetCredentialsForIdentityClient", ()=>createGetCredentialsForIdentityClient);
var _errorsMjs = require("../../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../../../../Platform/index.mjs");
var _typesMjs = require("../../../../Platform/types.mjs");
var _typesMjs1 = require("../../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../../Reachability/Reachability.mjs");
var _indexMjs1 = require("../../../../Hub/index.mjs");
var _indexMjs2 = require("../../../../utils/sessionListener/index.mjs");
var _responseInfoMjs = require("../../../../clients/serde/responseInfo.mjs");
var _jsonMjs = require("../../../../clients/serde/json.mjs");
var _composeServiceApiMjs = require("../../../../clients/internal/composeServiceApi.mjs");
var _constantsMjs = require("./constants.mjs");
var _cognitoIdentityTransferHandlerMjs = require("./handler/cognitoIdentityTransferHandler.mjs");
var _createClientSerializerMjs = require("./serde/createClientSerializer.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGetCredentialsForIdentityClient = (config)=>(0, _composeServiceApiMjs.composeServiceApi)((0, _cognitoIdentityTransferHandlerMjs.cognitoIdentityTransferHandler), (0, _createClientSerializerMjs.createClientSerializer)('GetCredentialsForIdentity'), getCredentialsForIdentityDeserializer, {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config,
        userAgentValue: (0, _indexMjs.getAmplifyUserAgent)()
    });
const getCredentialsForIdentityDeserializer = async (response)=>{
    if (response.statusCode >= 300) {
        const error = await (0, _jsonMjs.parseJsonError)(response);
        throw error;
    }
    const body = await (0, _jsonMjs.parseJsonBody)(response);
    return {
        IdentityId: body.IdentityId,
        Credentials: deserializeCredentials(body.Credentials),
        $metadata: (0, _responseInfoMjs.parseMetadata)(response)
    };
};
const deserializeCredentials = ({ Expiration, ...rest } = {})=>({
        ...rest,
        Expiration: Expiration && new Date(Expiration * 1000)
    });

},{"../../../../types/errors.mjs":"4wxZl","../../../../errors/errorHelpers.mjs":"6kl5J","../../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../../utils/retry/retry.mjs":"apIO9","../../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../../Platform/index.mjs":"kdTt1","../../../../Platform/types.mjs":"4dWla","../../../../BackgroundProcessManager/types.mjs":"8jG07","../../../../Reachability/Reachability.mjs":"d55uC","../../../../Hub/index.mjs":"cN8sN","../../../../utils/sessionListener/index.mjs":"9sYmd","../../../../clients/serde/responseInfo.mjs":"bmNRC","../../../../clients/serde/json.mjs":"lahjC","../../../../clients/internal/composeServiceApi.mjs":"4yvCA","./constants.mjs":"k7ySk","./handler/cognitoIdentityTransferHandler.mjs":"8jmPA","./serde/createClientSerializer.mjs":"gyCmZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bmNRC":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseMetadata", ()=>parseMetadata);
const parseMetadata = (response)=>{
    const { headers, statusCode } = response;
    return {
        ...isMetadataBearer(response) ? response.$metadata : {},
        httpStatusCode: statusCode,
        requestId: headers['x-amzn-requestid'] ?? headers['x-amzn-request-id'] ?? headers['x-amz-request-id'],
        extendedRequestId: headers['x-amz-id-2'],
        cfId: headers['x-amz-cf-id']
    };
};
const isMetadataBearer = (response)=>typeof response?.$metadata === 'object';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lahjC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseJsonBody", ()=>parseJsonBody);
parcelHelpers.export(exports, "parseJsonError", ()=>parseJsonError);
var _responseInfoMjs = require("./responseInfo.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)
 */ /**
 * Error parser for AWS JSON protocol.
 */ const parseJsonError = async (response)=>{
    if (!response || response.statusCode < 300) return;
    const body = await parseJsonBody(response);
    const sanitizeErrorCode = (rawValue)=>{
        const [cleanValue] = rawValue.toString().split(/[,:]+/);
        if (cleanValue.includes('#')) return cleanValue.split('#')[1];
        return cleanValue;
    };
    const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ?? body.code ?? body.__type ?? 'UnknownError');
    const message = body.message ?? body.Message ?? 'Unknown error';
    const error = new Error(message);
    return Object.assign(error, {
        name: code,
        $metadata: (0, _responseInfoMjs.parseMetadata)(response)
    });
};
/**
 * Parse JSON response body to JavaScript object.
 */ const parseJsonBody = async (response)=>{
    if (!response.body) throw new Error('Missing response payload');
    const output = await response.body.json();
    return Object.assign(output, {
        $metadata: (0, _responseInfoMjs.parseMetadata)(response)
    });
};

},{"./responseInfo.mjs":"bmNRC","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4yvCA":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Compose a service API handler that accepts input as defined shape and responds conforming to defined output shape.
 * A service API handler is composed with:
 * * A transfer handler
 * * A serializer function
 * * A deserializer function
 * * A default config object
 *
 * The returned service API handler, when called, will trigger the following workflow:
 * 1. When calling the service API handler function, the default config object is merged into the input config
 * object to assign the default values of some omitted configs, resulting to a resolved config object.
 * 2. The `endpointResolver` function from the default config object will be invoked with the resolved config object and
 * API input object resulting to an endpoint instance.
 * 3. The serializer function is invoked with API input object and the endpoint instance resulting to an HTTP request
 * instance.
 * 4. The HTTP request instance and the resolved config object is passed to the transfer handler function.
 * 5. The transfer handler function resolves to an HTTP response instance(can be either successful or failed status code).
 * 6. The deserializer function is invoked with the HTTP response instance resulting to the API output object, and
 * return to the caller.
 *
 *
 * @param transferHandler Async function for dispatching HTTP requests and returning HTTP response.
 * @param serializer  Async function for converting object in defined input shape into HTTP request targeting a given
 * 	endpoint.
 * @param deserializer Async function for converting HTTP response into output object in defined output shape, or error
 * 	shape.
 * @param defaultConfig  object containing default options to be consumed by transfer handler, serializer and
 *  deserializer.
 * @returns a async service API handler function that accepts a config object and input object in defined shape, returns
 * 	an output object in defined shape. It may also throw error instance in defined shape in deserializer. The config
 *  object type is composed with options type of transferHandler, endpointResolver function as well as endpointResolver
 *  function's input options type, region string. The config object property will be marked as optional if it's also
 * 	defined in defaultConfig.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "composeServiceApi", ()=>composeServiceApi);
const composeServiceApi = (transferHandler, serializer, deserializer, defaultConfig)=>{
    return async (config, input)=>{
        const resolvedConfig = {
            ...defaultConfig,
            ...config
        };
        // We need to allow different endpoints based on both given config(other than region) and input.
        // However for most of non-S3 services, region is the only input for endpoint resolver.
        const endpoint = await resolvedConfig.endpointResolver(resolvedConfig, input);
        // Unlike AWS SDK clients, a serializer should NOT populate the `host` or `content-length` headers.
        // Both of these headers are prohibited per Spec(https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name).
        // They will be populated automatically by browser, or node-fetch polyfill.
        const request = await serializer(input, endpoint);
        const response = await transferHandler(request, {
            ...resolvedConfig
        });
        return deserializer(response);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"k7ySk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COGNITO_IDENTITY_SERVICE_NAME", ()=>COGNITO_IDENTITY_SERVICE_NAME);
parcelHelpers.export(exports, "DEFAULT_SERVICE_CLIENT_API_CONFIG", ()=>DEFAULT_SERVICE_CLIENT_API_CONFIG);
var _errorsMjs = require("../../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../../errors/errorHelpers.mjs");
var _jitteredBackoffMjs = require("../../../../clients/middleware/retry/jitteredBackoff.mjs");
var _defaultRetryDeciderMjs = require("../../../../clients/middleware/retry/defaultRetryDecider.mjs");
var _getClientInfoMjs = require("../../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../../../../Platform/index.mjs");
var _typesMjs = require("../../../../Platform/types.mjs");
var _typesMjs1 = require("../../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../../Reachability/Reachability.mjs");
var _indexMjs1 = require("../../../../Hub/index.mjs");
var _indexMjs2 = require("../../../../utils/sessionListener/index.mjs");
var _jsonMjs = require("../../../../clients/serde/json.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * The service name used to sign requests if the API requires authentication.
 */ const COGNITO_IDENTITY_SERVICE_NAME = 'cognito-identity';
const DEFAULT_SERVICE_CLIENT_API_CONFIG = {
    service: COGNITO_IDENTITY_SERVICE_NAME,
    retryDecider: (0, _defaultRetryDeciderMjs.getRetryDecider)((0, _jsonMjs.parseJsonError)),
    computeDelay: (0, _jitteredBackoffMjs.jitteredBackoff),
    cache: 'no-store'
};

},{"../../../../types/errors.mjs":"4wxZl","../../../../errors/errorHelpers.mjs":"6kl5J","../../../../clients/middleware/retry/jitteredBackoff.mjs":"ecaUw","../../../../clients/middleware/retry/defaultRetryDecider.mjs":"eKSsN","../../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../../utils/retry/retry.mjs":"apIO9","../../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../../Platform/index.mjs":"kdTt1","../../../../Platform/types.mjs":"4dWla","../../../../BackgroundProcessManager/types.mjs":"8jG07","../../../../Reachability/Reachability.mjs":"d55uC","../../../../Hub/index.mjs":"cN8sN","../../../../utils/sessionListener/index.mjs":"9sYmd","../../../../clients/serde/json.mjs":"lahjC","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ecaUw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jitteredBackoff", ()=>jitteredBackoff);
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _jitteredBackoffMjs = require("../../../utils/retry/jitteredBackoff.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// TODO: [v6] The separate retry utility is used by Data packages now and will replaced by retry middleware.
const jitteredBackoff = (attempt)=>{
    const delayFunction = (0, _jitteredBackoffMjs.jitteredBackoff)((0, _constantsMjs.DEFAULT_MAX_DELAY_MS));
    const delay = delayFunction(attempt);
    // The delayFunction returns false when the delay is greater than the max delay(5 mins).
    // In this case, the retry middleware will delay 5 mins instead, as a ceiling of the delay.
    return delay === false ? (0, _constantsMjs.DEFAULT_MAX_DELAY_MS) : delay;
};

},{"../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/jitteredBackoff.mjs":"eQdBr","../../../utils/retry/retry.mjs":"apIO9","./constants.mjs":"9aVM9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eQdBr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jitteredBackoff", ()=>jitteredBackoff);
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @private
 * Internal use of Amplify only
 */ function jitteredBackoff(maxDelayMs = (0, _constantsMjs.MAX_DELAY_MS)) {
    const BASE_TIME_MS = 100;
    const JITTER_FACTOR = 100;
    return (attempt)=>{
        const delay = 2 ** attempt * BASE_TIME_MS + JITTER_FACTOR * Math.random();
        return delay > maxDelayMs ? false : delay;
    };
}

},{"./constants.mjs":"8l6Vr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8l6Vr":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MAX_DELAY_MS", ()=>MAX_DELAY_MS);
const MAX_DELAY_MS = 300000;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9aVM9":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AMZ_SDK_INVOCATION_ID_HEADER", ()=>AMZ_SDK_INVOCATION_ID_HEADER);
parcelHelpers.export(exports, "AMZ_SDK_REQUEST_HEADER", ()=>AMZ_SDK_REQUEST_HEADER);
parcelHelpers.export(exports, "DEFAULT_MAX_DELAY_MS", ()=>DEFAULT_MAX_DELAY_MS);
parcelHelpers.export(exports, "DEFAULT_RETRY_ATTEMPTS", ()=>DEFAULT_RETRY_ATTEMPTS);
const DEFAULT_RETRY_ATTEMPTS = 3;
const AMZ_SDK_INVOCATION_ID_HEADER = 'amz-sdk-invocation-id';
const AMZ_SDK_REQUEST_HEADER = 'amz-sdk-request';
const DEFAULT_MAX_DELAY_MS = 300000;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eKSsN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRetryDecider", ()=>getRetryDecider);
var _errorsMjs = require("../../../types/errors.mjs");
var _isClockSkewErrorMjs = require("./isClockSkewError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Get retry decider function
 * @param errorParser Function to load JavaScript error from HTTP response
 */ const getRetryDecider = (errorParser)=>async (response, error)=>{
        const parsedError = error ?? await errorParser(response) ?? undefined;
        const errorCode = parsedError?.code || parsedError?.name;
        const statusCode = response?.statusCode;
        const isRetryable = isConnectionError(error) || isThrottlingError(statusCode, errorCode) || (0, _isClockSkewErrorMjs.isClockSkewError)(errorCode) || isServerSideError(statusCode, errorCode);
        return {
            retryable: isRetryable
        };
    };
// reference: https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L22-L37
const THROTTLING_ERROR_CODES = [
    'BandwidthLimitExceeded',
    'EC2ThrottledException',
    'LimitExceededException',
    'PriorRequestNotComplete',
    'ProvisionedThroughputExceededException',
    'RequestLimitExceeded',
    'RequestThrottled',
    'RequestThrottledException',
    'SlowDown',
    'ThrottledException',
    'Throttling',
    'ThrottlingException',
    'TooManyRequestsException'
];
const TIMEOUT_ERROR_CODES = [
    'TimeoutError',
    'RequestTimeout',
    'RequestTimeoutException'
];
const isThrottlingError = (statusCode, errorCode)=>statusCode === 429 || !!errorCode && THROTTLING_ERROR_CODES.includes(errorCode);
const isConnectionError = (error)=>[
        (0, _errorsMjs.AmplifyErrorCode).NetworkError,
        // TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler
        'ERR_NETWORK'
    ].includes(error?.name);
const isServerSideError = (statusCode, errorCode)=>!!statusCode && [
        500,
        502,
        503,
        504
    ].includes(statusCode) || !!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode);

},{"../../../types/errors.mjs":"4wxZl","./isClockSkewError.mjs":"cluEE","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cluEE":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// via https://github.com/aws/aws-sdk-js-v3/blob/ab0e7be36e7e7f8a0c04834357aaad643c7912c3/packages/service-error-classification/src/constants.ts#L8
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isClockSkewError", ()=>isClockSkewError);
const CLOCK_SKEW_ERROR_CODES = [
    'AuthFailure',
    'InvalidSignatureException',
    'RequestExpired',
    'RequestInTheFuture',
    'RequestTimeTooSkewed',
    'SignatureDoesNotMatch',
    'BadRequestException'
];
/**
 * Given an error code, returns true if it is related to a clock skew error.
 *
 * @param errorCode String representation of some error.
 * @returns True if given error is present in `CLOCK_SKEW_ERROR_CODES`, false otherwise.
 *
 * @internal
 */ const isClockSkewError = (errorCode)=>!!errorCode && CLOCK_SKEW_ERROR_CODES.includes(errorCode);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8jmPA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoIdentityTransferHandler", ()=>cognitoIdentityTransferHandler);
var _errorsMjs = require("../../../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../../../errors/errorHelpers.mjs");
var _unauthenticatedMjs = require("../../../../../clients/handlers/aws/unauthenticated.mjs");
var _getClientInfoMjs = require("../../../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../../../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../../../../../Platform/index.mjs");
var _typesMjs = require("../../../../../Platform/types.mjs");
var _typesMjs1 = require("../../../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../../../Reachability/Reachability.mjs");
var _indexMjs1 = require("../../../../../Hub/index.mjs");
var _indexMjs2 = require("../../../../../utils/sessionListener/index.mjs");
var _composeTransferHandlerMjs = require("../../../../../clients/internal/composeTransferHandler.mjs");
var _createDisableCacheMiddlewareMjs = require("../../../middleware/createDisableCacheMiddleware.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * A Cognito Identity-specific transfer handler that does NOT sign requests, and
 * disables caching.
 *
 * @internal
 */ const cognitoIdentityTransferHandler = (0, _composeTransferHandlerMjs.composeTransferHandler)((0, _unauthenticatedMjs.unauthenticatedHandler), [
    (0, _createDisableCacheMiddlewareMjs.createDisableCacheMiddleware)
]);

},{"../../../../../types/errors.mjs":"4wxZl","../../../../../errors/errorHelpers.mjs":"6kl5J","../../../../../clients/handlers/aws/unauthenticated.mjs":"lzz2j","../../../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../../../utils/retry/retry.mjs":"apIO9","../../../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../../../Platform/index.mjs":"kdTt1","../../../../../Platform/types.mjs":"4dWla","../../../../../BackgroundProcessManager/types.mjs":"8jG07","../../../../../Reachability/Reachability.mjs":"d55uC","../../../../../Hub/index.mjs":"cN8sN","../../../../../utils/sessionListener/index.mjs":"9sYmd","../../../../../clients/internal/composeTransferHandler.mjs":"8JUvX","../../../middleware/createDisableCacheMiddleware.mjs":"XsFRO","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lzz2j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unauthenticatedHandler", ()=>unauthenticatedHandler);
var _retryMiddlewareMjs = require("../../middleware/retry/retryMiddleware.mjs");
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _amzSdkInvocationIdHeaderMiddlewareMjs = require("../../middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs");
var _amzSdkRequestHeaderMiddlewareMjs = require("../../middleware/retry/amzSdkRequestHeaderMiddleware.mjs");
var _middlewareMjs = require("../../middleware/userAgent/middleware.mjs");
var _composeTransferHandlerMjs = require("../../internal/composeTransferHandler.mjs");
var _fetchMjs = require("../fetch.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const unauthenticatedHandler = (0, _composeTransferHandlerMjs.composeTransferHandler)((0, _fetchMjs.fetchTransferHandler), [
    (0, _middlewareMjs.userAgentMiddlewareFactory),
    (0, _amzSdkInvocationIdHeaderMiddlewareMjs.amzSdkInvocationIdHeaderMiddlewareFactory),
    (0, _retryMiddlewareMjs.retryMiddlewareFactory),
    (0, _amzSdkRequestHeaderMiddlewareMjs.amzSdkRequestHeaderMiddlewareFactory)
]);

},{"../../middleware/retry/retryMiddleware.mjs":"9XrdY","../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/retry.mjs":"apIO9","../../middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs":"bIERL","../../middleware/retry/amzSdkRequestHeaderMiddleware.mjs":"6xHaL","../../middleware/userAgent/middleware.mjs":"iS1O3","../../internal/composeTransferHandler.mjs":"8JUvX","../fetch.mjs":"4pQUT","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9XrdY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryMiddlewareFactory", ()=>retryMiddlewareFactory);
var _constantsMjs = require("./constants.mjs");
/**
 * Middleware that executes the retry logic.
 */ const retryMiddlewareFactory = ({ maxAttempts = (0, _constantsMjs.DEFAULT_RETRY_ATTEMPTS), retryDecider, computeDelay, abortSignal })=>{
    if (maxAttempts < 1) throw new Error('maxAttempts must be greater than 0');
    return (next, context)=>async function retryMiddleware(request) {
            let error;
            let attemptsCount = context.attemptsCount ?? 0;
            let response;
            // When retry is not needed or max attempts is reached, either error or response will be set. This function handles either cases.
            const handleTerminalErrorOrResponse = ()=>{
                if (response) {
                    addOrIncrementMetadataAttempts(response, attemptsCount);
                    return response;
                } else {
                    addOrIncrementMetadataAttempts(error, attemptsCount);
                    throw error;
                }
            };
            while(!abortSignal?.aborted && attemptsCount < maxAttempts){
                try {
                    response = await next(request);
                    error = undefined;
                } catch (e) {
                    error = e;
                    response = undefined;
                }
                // context.attemptsCount may be updated after calling next handler which may retry the request by itself.
                attemptsCount = (context.attemptsCount ?? 0) > attemptsCount ? context.attemptsCount ?? 0 : attemptsCount + 1;
                context.attemptsCount = attemptsCount;
                const { isCredentialsExpiredError, retryable } = await retryDecider(response, error, context);
                if (retryable) {
                    // Setting isCredentialsInvalid flag to notify signing middleware to forceRefresh credentials provider.
                    context.isCredentialsExpired = !!isCredentialsExpiredError;
                    if (!abortSignal?.aborted && attemptsCount < maxAttempts) {
                        // prevent sleep for last attempt or cancelled request;
                        const delay = computeDelay(attemptsCount);
                        await cancellableSleep(delay, abortSignal);
                    }
                    continue;
                } else return handleTerminalErrorOrResponse();
            }
            if (abortSignal?.aborted) throw new Error('Request aborted.');
            else return handleTerminalErrorOrResponse();
        };
};
const cancellableSleep = (timeoutMs, abortSignal)=>{
    if (abortSignal?.aborted) return Promise.resolve();
    let timeoutId;
    let sleepPromiseResolveFn;
    const sleepPromise = new Promise((resolve)=>{
        sleepPromiseResolveFn = resolve;
        timeoutId = setTimeout(resolve, timeoutMs);
    });
    abortSignal?.addEventListener('abort', function cancelSleep(_) {
        clearTimeout(timeoutId);
        abortSignal?.removeEventListener('abort', cancelSleep);
        sleepPromiseResolveFn();
    });
    return sleepPromise;
};
const addOrIncrementMetadataAttempts = (nextHandlerOutput, attempts)=>{
    if (Object.prototype.toString.call(nextHandlerOutput) !== '[object Object]') return;
    nextHandlerOutput.$metadata = {
        ...nextHandlerOutput.$metadata ?? {},
        attempts
    };
};

},{"./constants.mjs":"9aVM9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bIERL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "amzSdkInvocationIdHeaderMiddlewareFactory", ()=>amzSdkInvocationIdHeaderMiddlewareFactory);
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../parseAWSExports.mjs");
var _indexMjs = require("../../../utils/amplifyUuid/index.mjs");
var _errorHelpersMjs1 = require("../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs1 = require("../../../Platform/index.mjs");
var _typesMjs = require("../../../Platform/types.mjs");
var _typesMjs1 = require("../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../Reachability/Reachability.mjs");
var _indexMjs2 = require("../../../Hub/index.mjs");
var _indexMjs3 = require("../../../utils/sessionListener/index.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Middleware injects a UUID string to `amz-sdk-invocation-id` header.
 * if the header is not set already. This header is helpful to provide
 * observability to group the requests caused by automatic retry.
 *
 * This middleware is standalone because of extra UUID dependency, we will
 * NOT use this middleware for API categories.
 *
 * Ref: https://sdk.amazonaws.com/kotlin/api/smithy-kotlin/api/1.0.9/http-client/aws.smithy.kotlin.runtime.http.operation/-http-operation-context/-sdk-invocation-id.html
 */ const amzSdkInvocationIdHeaderMiddlewareFactory = ()=>(next)=>{
        return async function amzSdkInvocationIdHeaderMiddleware(request) {
            if (!request.headers[0, _constantsMjs.AMZ_SDK_INVOCATION_ID_HEADER]) request.headers[0, _constantsMjs.AMZ_SDK_INVOCATION_ID_HEADER] = (0, _indexMjs.amplifyUuid)();
            return next(request);
        };
    };

},{"../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/retry.mjs":"apIO9","../../../parseAWSExports.mjs":"jOmdm","../../../utils/amplifyUuid/index.mjs":"j50Jv","../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../Platform/index.mjs":"kdTt1","../../../Platform/types.mjs":"4dWla","../../../BackgroundProcessManager/types.mjs":"8jG07","../../../Reachability/Reachability.mjs":"d55uC","../../../Hub/index.mjs":"cN8sN","../../../utils/sessionListener/index.mjs":"9sYmd","./constants.mjs":"9aVM9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"j50Jv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "amplifyUuid", ()=>amplifyUuid);
var _uuid = require("uuid");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const amplifyUuid = (0, _uuid.v4);

},{"uuid":"f1qTK","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6xHaL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "amzSdkRequestHeaderMiddlewareFactory", ()=>amzSdkRequestHeaderMiddlewareFactory);
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Middleware injects `amz-sdk-request` header to indicate the retry state at the time an HTTP request is made.
 * This middleware should co-exist with retryMiddleware as it relies on the retryAttempts value in middleware context
 * set by the retry middleware.
 *
 * Example header: `amz-sdk-request: attempt=1; max=3`.
 *
 * This middleware is standalone because of extra headers may conflict with custom endpoint settings(e.g. CORS), we will
 * NOT use this middleware for API categories.
 */ const amzSdkRequestHeaderMiddlewareFactory = ({ maxAttempts = (0, _constantsMjs.DEFAULT_RETRY_ATTEMPTS) })=>(next, context)=>{
        return async function amzSdkRequestHeaderMiddleware(request) {
            const attemptsCount = context.attemptsCount ?? 0;
            request.headers[0, _constantsMjs.AMZ_SDK_REQUEST_HEADER] = `attempt=${attemptsCount + 1}; max=${maxAttempts}`;
            return next(request);
        };
    };

},{"./constants.mjs":"9aVM9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iS1O3":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Middleware injects user agent string to specified header(default to 'x-amz-user-agent'),
 * if the header is not set already.
 *
 * TODO: incorporate new user agent design
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgentMiddlewareFactory", ()=>userAgentMiddlewareFactory);
const userAgentMiddlewareFactory = ({ userAgentHeader = 'x-amz-user-agent', userAgentValue = '' })=>(next)=>{
        return async function userAgentMiddleware(request) {
            if (userAgentValue.trim().length === 0) {
                const result = await next(request);
                return result;
            } else {
                const headerName = userAgentHeader.toLowerCase();
                request.headers[headerName] = request.headers[headerName] ? `${request.headers[headerName]} ${userAgentValue}` : userAgentValue;
                const response = await next(request);
                return response;
            }
        };
    };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8JUvX":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Compose a transfer handler with a core transfer handler and a list of middleware.
 * @param coreHandler Core transfer handler
 * @param middleware	List of middleware
 * @returns A transfer handler whose option type is the union of the core
 * 	transfer handler's option type and the middleware's option type.
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "composeTransferHandler", ()=>composeTransferHandler);
const composeTransferHandler = (coreHandler, middleware)=>(request, options)=>{
        const context = {};
        let composedHandler = (composeHandlerRequest)=>coreHandler(composeHandlerRequest, options);
        for(let i = middleware.length - 1; i >= 0; i--){
            const m = middleware[i];
            const resolvedMiddleware = m(options);
            composedHandler = resolvedMiddleware(composedHandler, context);
        }
        return composedHandler(request);
    };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4pQUT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchTransferHandler", ()=>fetchTransferHandler);
var _amplifyErrorMjs = require("../../errors/AmplifyError.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _errorHelpersMjs = require("../../errors/errorHelpers.mjs");
var _memoizationMjs = require("../utils/memoization.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const shouldSendBody = (method)=>![
        'HEAD',
        'GET'
    ].includes(method.toUpperCase());
// TODO[AllanZhengYP]: we need to provide isCanceledError utility
const fetchTransferHandler = async ({ url, method, headers, body }, { abortSignal, cache, withCrossDomainCredentials })=>{
    let resp;
    try {
        resp = await fetch(url, {
            method,
            headers,
            body: shouldSendBody(method) ? body : undefined,
            signal: abortSignal,
            cache,
            credentials: withCrossDomainCredentials ? 'include' : 'same-origin'
        });
    } catch (e) {
        if (e instanceof TypeError) throw new (0, _amplifyErrorMjs.AmplifyError)({
            name: (0, _errorsMjs.AmplifyErrorCode).NetworkError,
            message: 'A network error has occurred.',
            underlyingError: e
        });
        throw e;
    }
    const responseHeaders = {};
    resp.headers?.forEach((value, key)=>{
        responseHeaders[key.toLowerCase()] = value;
    });
    const httpResponse = {
        statusCode: resp.status,
        headers: responseHeaders,
        body: null
    };
    // resp.body is a ReadableStream according to Fetch API spec, but React Native
    // does not implement it.
    const bodyWithMixin = Object.assign(resp.body ?? {}, {
        text: (0, _memoizationMjs.withMemoization)(()=>resp.text()),
        blob: (0, _memoizationMjs.withMemoization)(()=>resp.blob()),
        json: (0, _memoizationMjs.withMemoization)(()=>resp.json())
    });
    return {
        ...httpResponse,
        body: bodyWithMixin
    };
};

},{"../../errors/AmplifyError.mjs":"G8oLh","../../types/errors.mjs":"4wxZl","../../errors/errorHelpers.mjs":"6kl5J","../utils/memoization.mjs":"aKxCN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aKxCN":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Cache the payload of a response body. It allows multiple calls to the body,
 * for example, when reading the body in both retry decider and error deserializer.
 * Caching body is allowed here because we call the body accessor(blob(), json(),
 * etc.) when body is small or streaming implementation is not available(RN).
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withMemoization", ()=>withMemoization);
const withMemoization = (payloadAccessor)=>{
    let cached;
    return ()=>{
        if (!cached) // Explicitly not awaiting. Intermediate await would add overhead and
        // introduce a possible race in the event that this wrapper is called
        // again before the first `payloadAccessor` call resolves.
        cached = payloadAccessor();
        return cached;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"XsFRO":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * A Cognito Identity-specific middleware that disables caching for all requests.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDisableCacheMiddleware", ()=>createDisableCacheMiddleware);
const createDisableCacheMiddleware = ()=>(next)=>async function disableCacheMiddleware(request) {
            request.headers['cache-control'] = 'no-store';
            return next(request);
        };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gyCmZ":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildHttpRpcRequest", ()=>buildHttpRpcRequest);
parcelHelpers.export(exports, "createClientSerializer", ()=>createClientSerializer);
const createClientSerializer = (operation)=>(input, endpoint)=>{
        const headers = getSharedHeaders(operation);
        const body = JSON.stringify(input);
        return buildHttpRpcRequest(endpoint, headers, body);
    };
const getSharedHeaders = (operation)=>({
        'content-type': 'application/x-amz-json-1.1',
        'x-amz-target': `AWSCognitoIdentityService.${operation}`
    });
const buildHttpRpcRequest = ({ url }, headers, body)=>({
        headers,
        url,
        body,
        method: 'POST'
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hBzat":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetIdClient", ()=>createGetIdClient);
var _errorsMjs = require("../../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../../../../Platform/index.mjs");
var _typesMjs = require("../../../../Platform/types.mjs");
var _typesMjs1 = require("../../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../../Reachability/Reachability.mjs");
var _indexMjs1 = require("../../../../Hub/index.mjs");
var _indexMjs2 = require("../../../../utils/sessionListener/index.mjs");
var _responseInfoMjs = require("../../../../clients/serde/responseInfo.mjs");
var _jsonMjs = require("../../../../clients/serde/json.mjs");
var _composeServiceApiMjs = require("../../../../clients/internal/composeServiceApi.mjs");
var _constantsMjs = require("./constants.mjs");
var _cognitoIdentityTransferHandlerMjs = require("./handler/cognitoIdentityTransferHandler.mjs");
var _createClientSerializerMjs = require("./serde/createClientSerializer.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGetIdClient = (config)=>(0, _composeServiceApiMjs.composeServiceApi)((0, _cognitoIdentityTransferHandlerMjs.cognitoIdentityTransferHandler), (0, _createClientSerializerMjs.createClientSerializer)('GetId'), getIdDeserializer, {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config,
        userAgentValue: (0, _indexMjs.getAmplifyUserAgent)()
    });
const getIdDeserializer = async (response)=>{
    if (response.statusCode >= 300) {
        const error = await (0, _jsonMjs.parseJsonError)(response);
        throw error;
    }
    const body = await (0, _jsonMjs.parseJsonBody)(response);
    return {
        IdentityId: body.IdentityId,
        $metadata: (0, _responseInfoMjs.parseMetadata)(response)
    };
};

},{"../../../../types/errors.mjs":"4wxZl","../../../../errors/errorHelpers.mjs":"6kl5J","../../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../../utils/retry/retry.mjs":"apIO9","../../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../../Platform/index.mjs":"kdTt1","../../../../Platform/types.mjs":"4dWla","../../../../BackgroundProcessManager/types.mjs":"8jG07","../../../../Reachability/Reachability.mjs":"d55uC","../../../../Hub/index.mjs":"cN8sN","../../../../utils/sessionListener/index.mjs":"9sYmd","../../../../clients/serde/responseInfo.mjs":"bmNRC","../../../../clients/serde/json.mjs":"lahjC","../../../../clients/internal/composeServiceApi.mjs":"4yvCA","./constants.mjs":"k7ySk","./handler/cognitoIdentityTransferHandler.mjs":"8jmPA","./serde/createClientSerializer.mjs":"gyCmZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3vpaS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoIdentityPoolEndpointResolver", ()=>cognitoIdentityPoolEndpointResolver);
var _getDnsSuffixMjs = require("../../../../clients/endpoints/getDnsSuffix.mjs");
var _errorsMjs = require("../../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _indexMjs = require("../../../../utils/amplifyUrl/index.mjs");
var _errorHelpersMjs1 = require("../../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs1 = require("../../../../Platform/index.mjs");
var _typesMjs = require("../../../../Platform/types.mjs");
var _typesMjs1 = require("../../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../../Reachability/Reachability.mjs");
var _indexMjs2 = require("../../../../Hub/index.mjs");
var _indexMjs3 = require("../../../../utils/sessionListener/index.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const cognitoIdentityPoolEndpointResolver = ({ region })=>({
        url: new (0, _indexMjs.AmplifyUrl)(`https://${(0, _constantsMjs.COGNITO_IDENTITY_SERVICE_NAME)}.${region}.${(0, _getDnsSuffixMjs.getDnsSuffix)(region)}`)
    });

},{"../../../../clients/endpoints/getDnsSuffix.mjs":"249Ub","../../../../types/errors.mjs":"4wxZl","../../../../errors/errorHelpers.mjs":"6kl5J","../../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../../utils/retry/retry.mjs":"apIO9","../../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../../utils/amplifyUrl/index.mjs":"eZYHY","../../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../../Platform/index.mjs":"kdTt1","../../../../Platform/types.mjs":"4dWla","../../../../BackgroundProcessManager/types.mjs":"8jG07","../../../../Reachability/Reachability.mjs":"d55uC","../../../../Hub/index.mjs":"cN8sN","../../../../utils/sessionListener/index.mjs":"9sYmd","./constants.mjs":"k7ySk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"249Ub":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDnsSuffix", ()=>getDnsSuffix);
var _partitionsMjs = require("./partitions.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will
 * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in
 * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.
 *
 * @param region
 * @returns The DNS suffix
 *
 * @internal
 */ const getDnsSuffix = (region)=>{
    const { partitions } = (0, _partitionsMjs.partitionsInfo);
    for (const { regions, outputs, regionRegex } of partitions){
        const regex = new RegExp(regionRegex);
        if (regions.includes(region) || regex.test(region)) return outputs.dnsSuffix;
    }
    return (0, _partitionsMjs.defaultPartition).outputs.dnsSuffix;
};

},{"./partitions.mjs":"1UkYs","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1UkYs":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Default partition for AWS services. This is used when the region is not provided or the region is not recognized.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultPartition", ()=>defaultPartition);
parcelHelpers.export(exports, "partitionsInfo", ()=>partitionsInfo);
const defaultPartition = {
    id: 'aws',
    outputs: {
        dnsSuffix: 'amazonaws.com'
    },
    regionRegex: '^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$',
    regions: [
        'aws-global'
    ]
};
/**
 * This data is adapted from the partition file from AWS SDK shared utilities but remove some contents for bundle size
 * concern. Information removed are `dualStackDnsSuffix`, `supportDualStack`, `supportFIPS`, restricted partitions, and
 * list of regions for each partition other than global regions.
 *
 * * Ref: https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints
 * * Ref: https://github.com/aws/aws-sdk-js-v3/blob/0201baef03c2379f1f6f7150b9d401d4b230d488/packages/util-endpoints/src/lib/aws/partitions.json#L1
 *
 * @internal
 */ const partitionsInfo = {
    partitions: [
        defaultPartition,
        {
            id: 'aws-cn',
            outputs: {
                dnsSuffix: 'amazonaws.com.cn'
            },
            regionRegex: '^cn\\-\\w+\\-\\d+$',
            regions: [
                'aws-cn-global'
            ]
        }
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eZYHY":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyUrl", ()=>AmplifyUrl);
parcelHelpers.export(exports, "AmplifyUrlSearchParams", ()=>AmplifyUrlSearchParams);
const AmplifyUrl = URL;
const AmplifyUrlSearchParams = URLSearchParams;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"d2uDX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _cookieStorageMjs.CookieStorage));
parcelHelpers.export(exports, "defaultStorage", ()=>defaultStorage);
parcelHelpers.export(exports, "sessionStorage", ()=>sessionStorage);
parcelHelpers.export(exports, "sharedInMemoryStorage", ()=>sharedInMemoryStorage);
parcelHelpers.export(exports, "syncSessionStorage", ()=>syncSessionStorage);
var _defaultStorageMjs = require("./DefaultStorage.mjs");
var _inMemoryStorageMjs = require("./InMemoryStorage.mjs");
var _keyValueStorageMjs = require("./KeyValueStorage.mjs");
var _sessionStorageMjs = require("./SessionStorage.mjs");
var _syncSessionStorageMjs = require("./SyncSessionStorage.mjs");
var _cookieStorageMjs = require("./CookieStorage.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const defaultStorage = new (0, _defaultStorageMjs.DefaultStorage)();
const sessionStorage = new (0, _sessionStorageMjs.SessionStorage)();
const syncSessionStorage = new (0, _syncSessionStorageMjs.SyncSessionStorage)();
const sharedInMemoryStorage = new (0, _keyValueStorageMjs.KeyValueStorage)(new (0, _inMemoryStorageMjs.InMemoryStorage)());

},{"./DefaultStorage.mjs":"9pfH7","./InMemoryStorage.mjs":"987po","./KeyValueStorage.mjs":"dnCnD","./SessionStorage.mjs":"2Xdo4","./SyncSessionStorage.mjs":"53jMD","./CookieStorage.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9pfH7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultStorage", ()=>DefaultStorage);
var _keyValueStorageMjs = require("./KeyValueStorage.mjs");
var _utilsMjs = require("./utils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ class DefaultStorage extends (0, _keyValueStorageMjs.KeyValueStorage) {
    constructor(){
        super((0, _utilsMjs.getLocalStorageWithFallback)());
    }
}

},{"./KeyValueStorage.mjs":"dnCnD","./utils.mjs":"awmNi","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dnCnD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "KeyValueStorage", ()=>KeyValueStorage);
var _platformNotSupportedErrorMjs = require("../errors/PlatformNotSupportedError.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ class KeyValueStorage {
    constructor(storage){
        this.storage = storage;
    }
    /**
     * This is used to set a specific item in storage
     * @param {string} key - the key for the item
     * @param {object} value - the value
     * @returns {string} value that was set
     */ async setItem(key, value) {
        if (!this.storage) throw new (0, _platformNotSupportedErrorMjs.PlatformNotSupportedError)();
        this.storage.setItem(key, value);
    }
    /**
     * This is used to get a specific key from storage
     * @param {string} key - the key for the item
     * This is used to clear the storage
     * @returns {string} the data item
     */ async getItem(key) {
        if (!this.storage) throw new (0, _platformNotSupportedErrorMjs.PlatformNotSupportedError)();
        return this.storage.getItem(key);
    }
    /**
     * This is used to remove an item from storage
     * @param {string} key - the key being set
     * @returns {string} value - value that was deleted
     */ async removeItem(key) {
        if (!this.storage) throw new (0, _platformNotSupportedErrorMjs.PlatformNotSupportedError)();
        this.storage.removeItem(key);
    }
    /**
     * This is used to clear the storage
     * @returns {string} nothing
     */ async clear() {
        if (!this.storage) throw new (0, _platformNotSupportedErrorMjs.PlatformNotSupportedError)();
        this.storage.clear();
    }
}

},{"../errors/PlatformNotSupportedError.mjs":"5GpZj","../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5GpZj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PlatformNotSupportedError", ()=>PlatformNotSupportedError);
var _errorsMjs = require("../types/errors.mjs");
var _amplifyErrorMjs = require("./AmplifyError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class PlatformNotSupportedError extends (0, _amplifyErrorMjs.AmplifyError) {
    constructor(){
        super({
            name: (0, _errorsMjs.AmplifyErrorCode).PlatformNotSupported,
            message: 'Function not supported on current platform'
        });
    }
}

},{"../types/errors.mjs":"4wxZl","./AmplifyError.mjs":"G8oLh","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"awmNi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getLocalStorageWithFallback", ()=>getLocalStorageWithFallback);
parcelHelpers.export(exports, "getSessionStorageWithFallback", ()=>getSessionStorageWithFallback);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _inMemoryStorageMjs = require("./InMemoryStorage.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 * @returns Either a reference to window.localStorage or an in-memory storage as fallback
 */ const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('CoreStorageUtils');
const getLocalStorageWithFallback = ()=>{
    try {
        // Attempt to use localStorage directly
        if (typeof window !== 'undefined' && window.localStorage) return window.localStorage;
    } catch (e) {
        // Handle any errors related to localStorage access
        logger.info('localStorage not found. InMemoryStorage is used as a fallback.');
    }
    // Return in-memory storage as a fallback if localStorage is not accessible
    return new (0, _inMemoryStorageMjs.InMemoryStorage)();
};
/**
 * @internal
 * @returns Either a reference to window.sessionStorage or an in-memory storage as fallback
 */ const getSessionStorageWithFallback = ()=>{
    try {
        // Attempt to use sessionStorage directly
        if (typeof window !== 'undefined' && window.sessionStorage) {
            // Verify we can actually use it by testing access
            window.sessionStorage.getItem('test');
            return window.sessionStorage;
        }
        throw new Error('sessionStorage is not defined');
    } catch (e) {
        // Handle any errors related to sessionStorage access
        logger.info('sessionStorage not found. InMemoryStorage is used as a fallback.');
        return new (0, _inMemoryStorageMjs.InMemoryStorage)();
    }
};

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","./InMemoryStorage.mjs":"987po","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"987po":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InMemoryStorage", ()=>InMemoryStorage);
class InMemoryStorage {
    constructor(){
        this.storage = new Map();
    }
    get length() {
        return this.storage.size;
    }
    key(index) {
        if (index > this.length - 1) return null;
        return Array.from(this.storage.keys())[index];
    }
    setItem(key, value) {
        this.storage.set(key, value);
    }
    getItem(key) {
        return this.storage.get(key) ?? null;
    }
    removeItem(key) {
        this.storage.delete(key);
    }
    clear() {
        this.storage.clear();
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2Xdo4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SessionStorage", ()=>SessionStorage);
var _keyValueStorageMjs = require("./KeyValueStorage.mjs");
var _utilsMjs = require("./utils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ class SessionStorage extends (0, _keyValueStorageMjs.KeyValueStorage) {
    constructor(){
        super((0, _utilsMjs.getSessionStorageWithFallback)());
    }
}

},{"./KeyValueStorage.mjs":"dnCnD","./utils.mjs":"awmNi","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"53jMD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SyncSessionStorage", ()=>SyncSessionStorage);
var _syncKeyValueStorageMjs = require("./SyncKeyValueStorage.mjs");
var _utilsMjs = require("./utils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ class SyncSessionStorage extends (0, _syncKeyValueStorageMjs.SyncKeyValueStorage) {
    constructor(){
        super((0, _utilsMjs.getSessionStorageWithFallback)());
    }
}

},{"./SyncKeyValueStorage.mjs":"am3hX","./utils.mjs":"awmNi","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"am3hX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SyncKeyValueStorage", ()=>SyncKeyValueStorage);
var _platformNotSupportedErrorMjs = require("../errors/PlatformNotSupportedError.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ class SyncKeyValueStorage {
    constructor(storage){
        this._storage = storage;
    }
    get storage() {
        if (!this._storage) throw new (0, _platformNotSupportedErrorMjs.PlatformNotSupportedError)();
        return this._storage;
    }
    /**
     * This is used to set a specific item in storage
     * @param {string} key - the key for the item
     * @param {object} value - the value
     * @returns {string} value that was set
     */ setItem(key, value) {
        this.storage.setItem(key, value);
    }
    /**
     * This is used to get a specific key from storage
     * @param {string} key - the key for the item
     * This is used to clear the storage
     * @returns {string} the data item
     */ getItem(key) {
        return this.storage.getItem(key);
    }
    /**
     * This is used to remove an item from storage
     * @param {string} key - the key being set
     * @returns {string} value - value that was deleted
     */ removeItem(key) {
        this.storage.removeItem(key);
    }
    /**
     * This is used to clear the storage
     * @returns {string} nothing
     */ clear() {
        this.storage.clear();
    }
}

},{"../errors/PlatformNotSupportedError.mjs":"5GpZj","../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"54VMX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CookieStorage", ()=>CookieStorage);
var _jsCookie = require("js-cookie");
var _jsCookieDefault = parcelHelpers.interopDefault(_jsCookie);
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class CookieStorage {
    constructor(data = {}){
        const { path, domain, expires, sameSite, secure } = data;
        this.domain = domain;
        this.path = path || '/';
        this.expires = Object.prototype.hasOwnProperty.call(data, 'expires') ? expires : 365;
        this.secure = Object.prototype.hasOwnProperty.call(data, 'secure') ? secure : true;
        if (Object.prototype.hasOwnProperty.call(data, 'sameSite')) {
            if (!sameSite || ![
                'strict',
                'lax',
                'none'
            ].includes(sameSite)) throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
            if (sameSite === 'none' && !this.secure) throw new Error('sameSite = None requires the Secure attribute in latest browser versions.');
            this.sameSite = sameSite;
        }
    }
    async setItem(key, value) {
        (0, _jsCookieDefault.default).set(key, value, this.getData());
    }
    async getItem(key) {
        const item = (0, _jsCookieDefault.default).get(key);
        return item ?? null;
    }
    async removeItem(key) {
        (0, _jsCookieDefault.default).remove(key, this.getData());
    }
    async clear() {
        const cookie = (0, _jsCookieDefault.default).get();
        const promises = Object.keys(cookie).map((key)=>this.removeItem(key));
        await Promise.all(promises);
    }
    getData() {
        return {
            path: this.path,
            expires: this.expires,
            domain: this.domain,
            secure: this.secure,
            ...this.sameSite && {
                sameSite: this.sameSite
            }
        };
    }
}

},{"js-cookie":"cEALr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cEALr":[function(require,module,exports,__globalThis) {
/*! js-cookie v3.0.5 | MIT */ (function(global, factory) {
    module.exports = factory();
})(this, function() {
    'use strict';
    /* eslint-disable no-var */ function assign(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)target[key] = source[key];
        }
        return target;
    }
    /* eslint-enable no-var */ /* eslint-disable no-var */ var defaultConverter = {
        read: function(value) {
            if (value[0] === '"') value = value.slice(1, -1);
            return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
        },
        write: function(value) {
            return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);
        }
    };
    /* eslint-enable no-var */ /* eslint-disable no-var */ function init(converter, defaultAttributes) {
        function set(name, value, attributes) {
            if (typeof document === 'undefined') return;
            attributes = assign({}, defaultAttributes, attributes);
            if (typeof attributes.expires === 'number') attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
            if (attributes.expires) attributes.expires = attributes.expires.toUTCString();
            name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
            var stringifiedAttributes = '';
            for(var attributeName in attributes){
                if (!attributes[attributeName]) continue;
                stringifiedAttributes += '; ' + attributeName;
                if (attributes[attributeName] === true) continue;
                // Considers RFC 6265 section 5.2:
                // ...
                // 3.  If the remaining unparsed-attributes contains a %x3B (";")
                //     character:
                // Consume the characters of the unparsed-attributes up to,
                // not including, the first %x3B (";") character.
                // ...
                stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
            }
            return document.cookie = name + '=' + converter.write(value, name) + stringifiedAttributes;
        }
        function get(name) {
            if (typeof document === 'undefined' || arguments.length && !name) return;
            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all.
            var cookies = document.cookie ? document.cookie.split('; ') : [];
            var jar = {};
            for(var i = 0; i < cookies.length; i++){
                var parts = cookies[i].split('=');
                var value = parts.slice(1).join('=');
                try {
                    var found = decodeURIComponent(parts[0]);
                    jar[found] = converter.read(value, found);
                    if (name === found) break;
                } catch (e) {}
            }
            return name ? jar[name] : jar;
        }
        return Object.create({
            set,
            get,
            remove: function(name, attributes) {
                set(name, '', assign({}, attributes, {
                    expires: -1
                }));
            },
            withAttributes: function(attributes) {
                return init(this.converter, assign({}, this.attributes, attributes));
            },
            withConverter: function(converter) {
                return init(assign({}, this.converter, converter), this.attributes);
            }
        }, {
            attributes: {
                value: Object.freeze(defaultAttributes)
            },
            converter: {
                value: Object.freeze(converter)
            }
        });
    }
    var api = init(defaultConverter, {
        path: '/'
    });
    /* eslint-enable no-var */ return api;
});

},{}],"2Ws5t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cache", ()=>Cache);
var _storageCacheMjs = require("./StorageCache.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const Cache = new (0, _storageCacheMjs.StorageCache)();

},{"./StorageCache.mjs":"hrov8","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hrov8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageCache", ()=>StorageCache);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _keyValueStorageMjs = require("../storage/KeyValueStorage.mjs");
var _utilsMjs = require("../storage/utils.mjs");
var _constantsMjs = require("./constants.mjs");
var _storageCacheCommonMjs = require("./StorageCacheCommon.mjs");
var _cacheHelpersMjs = require("./utils/cacheHelpers.mjs");
var _errorHelpersMjs = require("./utils/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('StorageCache');
/**
 * Customized storage based on the SessionStorage or LocalStorage with LRU implemented
 */ class StorageCache extends (0, _storageCacheCommonMjs.StorageCacheCommon) {
    /**
     * initialize the cache
     * @param config - the configuration of the cache
     */ constructor(config){
        const storage = (0, _utilsMjs.getLocalStorageWithFallback)();
        super({
            config,
            keyValueStorage: new (0, _keyValueStorageMjs.KeyValueStorage)(storage)
        });
        this.storage = storage;
        this.getItem = this.getItem.bind(this);
        this.setItem = this.setItem.bind(this);
        this.removeItem = this.removeItem.bind(this);
    }
    async getAllCacheKeys(options) {
        const { omitSizeKey } = options ?? {};
        const keys = [];
        for(let i = 0; i < this.storage.length; i++){
            const key = this.storage.key(i);
            if (omitSizeKey && key === (0, _cacheHelpersMjs.getCurrentSizeKey)(this.config.keyPrefix)) continue;
            if (key?.startsWith(this.config.keyPrefix)) keys.push(key.substring(this.config.keyPrefix.length));
        }
        return keys;
    }
    /**
     * Return a new instance of cache with customized configuration.
     * @param {Object} config - the customized configuration
     * @return {Object} - the new instance of Cache
     */ createInstance(config) {
        if (!config.keyPrefix || config.keyPrefix === (0, _constantsMjs.defaultConfig).keyPrefix) {
            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');
            config.keyPrefix = (0, _cacheHelpersMjs.getCurrentTime).toString();
        }
        return new StorageCache(config);
    }
}

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","../storage/KeyValueStorage.mjs":"dnCnD","../storage/utils.mjs":"awmNi","./constants.mjs":"LZ1tm","./StorageCacheCommon.mjs":"7U68S","./utils/cacheHelpers.mjs":"lHHB8","./utils/errorHelpers.mjs":"bmS9H","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"LZ1tm":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Default cache config
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "currentSizeKey", ()=>currentSizeKey);
parcelHelpers.export(exports, "defaultConfig", ()=>defaultConfig);
const defaultConfig = {
    keyPrefix: 'aws-amplify-cache',
    capacityInBytes: 1048576,
    itemMaxSize: 210000,
    defaultTTL: 259200000,
    defaultPriority: 5,
    warningThreshold: 0.8
};
const currentSizeKey = 'CurSize';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7U68S":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageCacheCommon", ()=>StorageCacheCommon);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _constantsMjs = require("./constants.mjs");
var _cacheHelpersMjs = require("./utils/cacheHelpers.mjs");
var _errorHelpersMjs = require("./utils/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('StorageCache');
/**
 * Initialization of the cache
 *
 */ class StorageCacheCommon {
    /**
     * Initialize the cache
     *
     * @param config - Custom configuration for this instance.
     */ constructor({ config, keyValueStorage }){
        this.config = {
            ...(0, _constantsMjs.defaultConfig),
            ...config
        };
        this.keyValueStorage = keyValueStorage;
        this.sanitizeConfig();
    }
    getModuleName() {
        return 'Cache';
    }
    /**
     * Set custom configuration for the cache instance.
     *
     * @param config - customized configuration (without keyPrefix, which can't be changed)
     *
     * @return - the current configuration
     */ configure(config) {
        if (config) {
            if (config.keyPrefix) logger.warn('keyPrefix can not be re-configured on an existing Cache instance.');
            this.config = {
                ...this.config,
                ...config
            };
        }
        this.sanitizeConfig();
        return this.config;
    }
    /**
     * return the current size of the cache
     * @return {Promise}
     */ async getCurrentCacheSize() {
        let size = await this.getStorage().getItem((0, _cacheHelpersMjs.getCurrentSizeKey)(this.config.keyPrefix));
        if (!size) {
            await this.getStorage().setItem((0, _cacheHelpersMjs.getCurrentSizeKey)(this.config.keyPrefix), '0');
            size = '0';
        }
        return Number(size);
    }
    /**
     * Set item into cache. You can put number, string, boolean or object.
     * The cache will first check whether has the same key.
     * If it has, it will delete the old item and then put the new item in
     * The cache will pop out items if it is full
     * You can specify the cache item options. The cache will abort and output a warning:
     * If the key is invalid
     * If the size of the item exceeds itemMaxSize.
     * If the value is undefined
     * If incorrect cache item configuration
     * If error happened with browser storage
     *
     * @param {String} key - the key of the item
     * @param {Object} value - the value of the item
     * @param {Object} [options] - optional, the specified meta-data
     *
     * @return {Promise}
     */ async setItem(key, value, options) {
        logger.debug(`Set item: key is ${key}, value is ${value} with options: ${options}`);
        if (!key || key === (0, _constantsMjs.currentSizeKey)) {
            logger.warn(`Invalid key: should not be empty or reserved key: '${(0, _constantsMjs.currentSizeKey)}'`);
            return;
        }
        if (typeof value === 'undefined') {
            logger.warn(`The value of item should not be undefined!`);
            return;
        }
        const cacheItemOptions = {
            priority: options?.priority !== undefined ? options.priority : this.config.defaultPriority,
            expires: options?.expires !== undefined ? options.expires : this.config.defaultTTL + (0, _cacheHelpersMjs.getCurrentTime)()
        };
        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
            logger.warn(`Invalid parameter: priority due to out or range. It should be within 1 and 5.`);
            return;
        }
        const prefixedKey = `${this.config.keyPrefix}${key}`;
        const item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
        // check whether this item is too big;
        if (item.byteSize > this.config.itemMaxSize) {
            logger.warn(`Item with key: ${key} you are trying to put into is too big!`);
            return;
        }
        try {
            // first look into the storage, if it exists, delete it.
            const val = await this.getStorage().getItem(prefixedKey);
            if (val) await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
            // check whether the cache is full
            if (await this.isCacheFull(item.byteSize)) {
                const validKeys = await this.clearInvalidAndGetRemainingKeys();
                if (await this.isCacheFull(item.byteSize)) {
                    const sizeToPop = await this.sizeToPop(item.byteSize);
                    await this.popOutItems(validKeys, sizeToPop);
                }
            }
            // put item in the cache
            return this.setCacheItem(prefixedKey, item);
        } catch (e) {
            logger.warn(`setItem failed! ${e}`);
        }
    }
    /**
     * Get item from cache. It will return null if item doesn’t exist or it has been expired.
     * If you specified callback function in the options,
     * then the function will be executed if no such item in the cache
     * and finally put the return value into cache.
     * Please make sure the callback function will return the value you want to put into the cache.
     * The cache will abort output a warning:
     * If the key is invalid
     * If error happened with AsyncStorage
     *
     * @param {String} key - the key of the item
     * @param {Object} [options] - the options of callback function
     *
     * @return {Promise} - return a promise resolves to be the value of the item
     */ async getItem(key, options) {
        logger.debug(`Get item: key is ${key} with options ${options}`);
        let cached;
        if (!key || key === (0, _constantsMjs.currentSizeKey)) {
            logger.warn(`Invalid key: should not be empty or reserved key: '${(0, _constantsMjs.currentSizeKey)}'`);
            return null;
        }
        const prefixedKey = `${this.config.keyPrefix}${key}`;
        try {
            cached = await this.getStorage().getItem(prefixedKey);
            if (cached != null) {
                if (await this.isExpired(prefixedKey)) // if expired, remove that item and return null
                await this.removeCacheItem(prefixedKey, JSON.parse(cached).byteSize);
                else {
                    // if not expired, update its visitedTime and return the value
                    const item = await this.updateVisitedTime(JSON.parse(cached), prefixedKey);
                    return item.data;
                }
            }
            if (options?.callback) {
                const val = options.callback();
                if (val !== null) await this.setItem(key, val, options);
                return val;
            }
            return null;
        } catch (e) {
            logger.warn(`getItem failed! ${e}`);
            return null;
        }
    }
    /**
     * remove item from the cache
     * The cache will abort output a warning:
     * If error happened with AsyncStorage
     * @param {String} key - the key of the item
     * @return {Promise}
     */ async removeItem(key) {
        logger.debug(`Remove item: key is ${key}`);
        if (!key || key === (0, _constantsMjs.currentSizeKey)) {
            logger.warn(`Invalid key: should not be empty or reserved key: '${(0, _constantsMjs.currentSizeKey)}'`);
            return;
        }
        const prefixedKey = `${this.config.keyPrefix}${key}`;
        try {
            const val = await this.getStorage().getItem(prefixedKey);
            if (val) await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
        } catch (e) {
            logger.warn(`removeItem failed! ${e}`);
        }
    }
    /**
     * Return all the keys owned by this cache.
     * Will return an empty array if error occurred.
     *
     * @return {Promise}
     */ async getAllKeys() {
        try {
            return await this.getAllCacheKeys();
        } catch (e) {
            logger.warn(`getAllkeys failed! ${e}`);
            return [];
        }
    }
    getStorage() {
        return this.keyValueStorage;
    }
    /**
     * check whether item is expired
     *
     * @param key - the key of the item
     *
     * @return true if the item is expired.
     */ async isExpired(key) {
        const text = await this.getStorage().getItem(key);
        (0, _errorHelpersMjs.assert)(text !== null, (0, _errorHelpersMjs.CacheErrorCode).NoCacheItem, `Key: ${key}`);
        const item = JSON.parse(text);
        if ((0, _cacheHelpersMjs.getCurrentTime)() >= item.expires) return true;
        return false;
    }
    /**
     * delete item from cache
     *
     * @param prefixedKey - the key of the item
     * @param size - optional, the byte size of the item
     */ async removeCacheItem(prefixedKey, size) {
        const item = await this.getStorage().getItem(prefixedKey);
        (0, _errorHelpersMjs.assert)(item !== null, (0, _errorHelpersMjs.CacheErrorCode).NoCacheItem, `Key: ${prefixedKey}`);
        const itemSize = size ?? JSON.parse(item).byteSize;
        // first try to update the current size of the cache
        await this.decreaseCurrentSizeInBytes(itemSize);
        // try to remove the item from cache
        try {
            await this.getStorage().removeItem(prefixedKey);
        } catch (removeItemError) {
            // if some error happened, we need to rollback the current size
            await this.increaseCurrentSizeInBytes(itemSize);
            logger.error(`Failed to remove item: ${removeItemError}`);
        }
    }
    /**
     * produce a JSON object with meta-data and data value
     * @param value - the value of the item
     * @param options - optional, the specified meta-data
     *
     * @return - the item which has the meta-data and the value
     */ fillCacheItem(key, value, options) {
        const item = {
            key,
            data: value,
            timestamp: (0, _cacheHelpersMjs.getCurrentTime)(),
            visitedTime: (0, _cacheHelpersMjs.getCurrentTime)(),
            priority: options.priority ?? 0,
            expires: options.expires ?? 0,
            type: typeof value,
            byteSize: 0
        };
        // calculate byte size
        item.byteSize = (0, _cacheHelpersMjs.getByteLength)(JSON.stringify(item));
        // re-calculate using cache item with updated byteSize property
        item.byteSize = (0, _cacheHelpersMjs.getByteLength)(JSON.stringify(item));
        return item;
    }
    sanitizeConfig() {
        if (this.config.itemMaxSize > this.config.capacityInBytes) {
            logger.error('Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.');
            this.config.itemMaxSize = (0, _constantsMjs.defaultConfig).itemMaxSize;
        }
        if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
            logger.error('Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.');
            this.config.defaultPriority = (0, _constantsMjs.defaultConfig).defaultPriority;
        }
        if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {
            logger.error('Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.');
            this.config.warningThreshold = (0, _constantsMjs.defaultConfig).warningThreshold;
        }
        // Set 5MB limit
        const cacheLimit = 5242880;
        if (this.config.capacityInBytes > cacheLimit) {
            logger.error('Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.');
            this.config.capacityInBytes = (0, _constantsMjs.defaultConfig).capacityInBytes;
        }
    }
    /**
     * increase current size of the cache
     *
     * @param amount - the amount of the cache szie which need to be increased
     */ async increaseCurrentSizeInBytes(amount) {
        const size = await this.getCurrentCacheSize();
        await this.getStorage().setItem((0, _cacheHelpersMjs.getCurrentSizeKey)(this.config.keyPrefix), (size + amount).toString());
    }
    /**
     * decrease current size of the cache
     *
     * @param amount - the amount of the cache size which needs to be decreased
     */ async decreaseCurrentSizeInBytes(amount) {
        const size = await this.getCurrentCacheSize();
        await this.getStorage().setItem((0, _cacheHelpersMjs.getCurrentSizeKey)(this.config.keyPrefix), (size - amount).toString());
    }
    /**
     * update the visited time if item has been visited
     *
     * @param item - the item which need to be updated
     * @param prefixedKey - the key of the item
     *
     * @return the updated item
     */ async updateVisitedTime(item, prefixedKey) {
        item.visitedTime = (0, _cacheHelpersMjs.getCurrentTime)();
        await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
        return item;
    }
    /**
     * put item into cache
     *
     * @param prefixedKey - the key of the item
     * @param itemData - the value of the item
     * @param itemSizeInBytes - the byte size of the item
     */ async setCacheItem(prefixedKey, item) {
        // first try to update the current size of the cache.
        await this.increaseCurrentSizeInBytes(item.byteSize);
        // try to add the item into cache
        try {
            await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
        } catch (setItemErr) {
            // if some error happened, we need to rollback the current size
            await this.decreaseCurrentSizeInBytes(item.byteSize);
            logger.error(`Failed to set item ${setItemErr}`);
        }
    }
    /**
     * total space needed when poping out items
     *
     * @param itemSize
     *
     * @return total space needed
     */ async sizeToPop(itemSize) {
        const cur = await this.getCurrentCacheSize();
        const spaceItemNeed = cur + itemSize - this.config.capacityInBytes;
        const cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
        return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;
    }
    /**
     * see whether cache is full
     *
     * @param itemSize
     *
     * @return true if cache is full
     */ async isCacheFull(itemSize) {
        const cur = await this.getCurrentCacheSize();
        return itemSize + cur > this.config.capacityInBytes;
    }
    /**
     * get all the items we have, sort them by their priority,
     * if priority is same, sort them by their last visited time
     * pop out items from the low priority (5 is the lowest)
     * @private
     * @param keys - all the keys in this cache
     * @param sizeToPop - the total size of the items which needed to be poped out
     */ async popOutItems(keys, sizeToPop) {
        const items = [];
        let remainedSize = sizeToPop;
        for (const key of keys){
            const val = await this.getStorage().getItem(key);
            if (val != null) {
                const item = JSON.parse(val);
                items.push(item);
            }
        }
        // first compare priority
        // then compare visited time
        items.sort((a, b)=>{
            if (a.priority > b.priority) return -1;
            else if (a.priority < b.priority) return 1;
            else {
                if (a.visitedTime < b.visitedTime) return -1;
                else return 1;
            }
        });
        for (const item of items){
            // pop out items until we have enough room for new item
            await this.removeCacheItem(item.key, item.byteSize);
            remainedSize -= item.byteSize;
            if (remainedSize <= 0) return;
        }
    }
    /**
     * Scan the storage and combine the following operations for efficiency
     *   1. Clear out all expired keys owned by this cache, not including the size key.
     *   2. Return the remaining keys.
     *
     * @return The remaining valid keys
     */ async clearInvalidAndGetRemainingKeys() {
        const remainingKeys = [];
        const keys = await this.getAllCacheKeys({
            omitSizeKey: true
        });
        for (const key of keys)if (await this.isExpired(key)) await this.removeCacheItem(key);
        else remainingKeys.push(key);
        return remainingKeys;
    }
    /**
     * clear the entire cache
     * The cache will abort and output a warning if error occurs
     * @return {Promise}
     */ async clear() {
        logger.debug(`Clear Cache`);
        try {
            const keys = await this.getAllKeys();
            for (const key of keys){
                const prefixedKey = `${this.config.keyPrefix}${key}`;
                await this.getStorage().removeItem(prefixedKey);
            }
        } catch (e) {
            logger.warn(`clear failed! ${e}`);
        }
    }
}

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","./constants.mjs":"LZ1tm","./utils/cacheHelpers.mjs":"lHHB8","./utils/errorHelpers.mjs":"bmS9H","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lHHB8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getByteLength", ()=>getByteLength);
parcelHelpers.export(exports, "getCurrentSizeKey", ()=>getCurrentSizeKey);
parcelHelpers.export(exports, "getCurrentTime", ()=>getCurrentTime);
parcelHelpers.export(exports, "isInteger", ()=>isInteger);
var _constantsMjs = require("../constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * return the byte size of the string
 * @param str
 */ function getByteLength(str) {
    let ret = 0;
    ret = str.length;
    for(let i = str.length; i >= 0; i -= 1){
        const charCode = str.charCodeAt(i);
        if (charCode > 0x7f && charCode <= 0x7ff) ret += 1;
        else if (charCode > 0x7ff && charCode <= 0xffff) ret += 2;
        // trail surrogate
        if (charCode >= 0xdc00 && charCode <= 0xdfff) i -= 1;
    }
    return ret;
}
/**
 * get current time
 */ function getCurrentTime() {
    const currentTime = new Date();
    return currentTime.getTime();
}
/**
 * check if passed value is an integer
 */ function isInteger(value) {
    if (Number.isInteger) return Number.isInteger(value);
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
}
const getCurrentSizeKey = (keyPrefix)=>`${keyPrefix}${0, _constantsMjs.currentSizeKey}`;

},{"../constants.mjs":"LZ1tm","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bmS9H":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheErrorCode", ()=>CacheErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _createAssertionFunctionMjs = require("../../errors/createAssertionFunction.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _errorHelpersMjs = require("../../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var CacheErrorCode;
(function(CacheErrorCode) {
    CacheErrorCode["NoCacheItem"] = "NoCacheItem";
    CacheErrorCode["NullNextNode"] = "NullNextNode";
    CacheErrorCode["NullPreviousNode"] = "NullPreviousNode";
})(CacheErrorCode || (CacheErrorCode = {}));
const cacheErrorMap = {
    [CacheErrorCode.NoCacheItem]: {
        message: 'Item not found in the cache storage.'
    },
    [CacheErrorCode.NullNextNode]: {
        message: 'Next node is null.'
    },
    [CacheErrorCode.NullPreviousNode]: {
        message: 'Previous node is null.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(cacheErrorMap);

},{"../../errors/createAssertionFunction.mjs":"23eMH","../../types/errors.mjs":"4wxZl","../../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iR4Yk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _i18NMjs = require("./I18n.mjs");
var _errorHelpersMjs = require("./errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('I18n');
let _config = {
    language: null
};
let _i18n = null;
/**
 * Export I18n APIs
 */ class I18n {
    /**
     * @static
     * @method
     * Configure I18n part
     * @param {Object} config - Configuration of the I18n
     */ static configure(config) {
        logger.debug('configure I18n');
        if (!config) return _config;
        _config = Object.assign({}, _config, config.I18n || config);
        I18n.createInstance();
        return _config;
    }
    static getModuleName() {
        return 'I18n';
    }
    /**
     * @static
     * @method
     * Create an instance of I18n for the library
     */ static createInstance() {
        logger.debug('create I18n instance');
        if (_i18n) return;
        _i18n = new (0, _i18NMjs.I18n)();
    }
    /**
     * @static @method
     * Explicitly setting language
     * @param {String} lang
     */ static setLanguage(lang) {
        I18n.checkConfig();
        (0, _errorHelpersMjs.assert)(!!_i18n, (0, _errorHelpersMjs.I18nErrorCode).NotConfigured);
        _i18n.setLanguage(lang);
    }
    /**
     * @static @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ static get(key, defVal) {
        if (!I18n.checkConfig()) return typeof defVal === 'undefined' ? key : defVal;
        (0, _errorHelpersMjs.assert)(!!_i18n, (0, _errorHelpersMjs.I18nErrorCode).NotConfigured);
        return _i18n.get(key, defVal);
    }
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {String} language - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ static putVocabulariesForLanguage(language, vocabularies) {
        I18n.checkConfig();
        (0, _errorHelpersMjs.assert)(!!_i18n, (0, _errorHelpersMjs.I18nErrorCode).NotConfigured);
        _i18n.putVocabulariesForLanguage(language, vocabularies);
    }
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ static putVocabularies(vocabularies) {
        I18n.checkConfig();
        (0, _errorHelpersMjs.assert)(!!_i18n, (0, _errorHelpersMjs.I18nErrorCode).NotConfigured);
        _i18n.putVocabularies(vocabularies);
    }
    static checkConfig() {
        if (!_i18n) I18n.createInstance();
        return true;
    }
}
// Create an instance of I18n in the static class
I18n.createInstance();

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","./I18n.mjs":"2Y2Jp","./errorHelpers.mjs":"81Om2","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2Y2Jp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n$1);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('I18n');
/**
 * Language translation utility.
 */ let I18n$1 = class I18n {
    constructor(){
        /**
         * @private
         */ this._options = null;
        /**
         * @private
         */ this._lang = null;
        /**
         * @private
         */ this._dict = {};
    }
    /**
     * Sets the default language from the configuration when required.
     */ setDefaultLanguage() {
        // Default to window language if not set in instance
        if (!this._lang && typeof window !== 'undefined' && window && window.navigator) this._lang = window.navigator.language;
        logger.debug(this._lang);
    }
    /**
     * @method
     * Explicitly setting language
     * @param {String} lang
     */ setLanguage(lang) {
        this._lang = lang;
    }
    /**
     * @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ get(key, defVal) {
        this.setDefaultLanguage();
        if (!this._lang) return typeof defVal !== 'undefined' ? defVal : key;
        const lang = this._lang;
        let val = this.getByLanguage(key, lang);
        if (val) return val;
        if (lang.indexOf('-') > 0) val = this.getByLanguage(key, lang.split('-')[0]);
        if (val) return val;
        return typeof defVal !== 'undefined' ? defVal : key;
    }
    /**
     * @method
     * Get value according to specified language
     * @param {String} key
     * @param {String} language - Specified langurage to be used
     * @param {String} defVal - Default value
     */ getByLanguage(key, language, defVal = null) {
        if (!language) return defVal;
        const langDict = this._dict[language];
        if (!langDict) return defVal;
        return langDict[key];
    }
    /**
     * @method
     * Add vocabularies for one language
     * @param {String} language - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ putVocabulariesForLanguage(language, vocabularies) {
        let langDict = this._dict[language];
        if (!langDict) langDict = this._dict[language] = {};
        this._dict[language] = {
            ...langDict,
            ...vocabularies
        };
    }
    /**
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ putVocabularies(vocabularies) {
        Object.keys(vocabularies).forEach((key)=>{
            this.putVocabulariesForLanguage(key, vocabularies[key]);
        });
    }
};

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"81Om2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18nErrorCode", ()=>I18nErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _createAssertionFunctionMjs = require("../errors/createAssertionFunction.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var I18nErrorCode;
(function(I18nErrorCode) {
    I18nErrorCode["NotConfigured"] = "NotConfigured";
})(I18nErrorCode || (I18nErrorCode = {}));
const i18nErrorMap = {
    [I18nErrorCode.NotConfigured]: {
        message: 'i18n is not configured.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(i18nErrorMap);

},{"../errors/createAssertionFunction.mjs":"23eMH","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ehIJx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorkerClass", ()=>ServiceWorkerClass);
var _consoleLoggerMjs = require("../Logger/ConsoleLogger.mjs");
var _amplifyErrorMjs = require("../errors/AmplifyError.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../utils/getClientInfo/getClientInfo.mjs");
var _isBrowserMjs = require("../utils/isBrowser.mjs");
var _retryMjs = require("../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../Platform/index.mjs");
var _typesMjs = require("../Platform/types.mjs");
var _typesMjs1 = require("../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../Reachability/Reachability.mjs");
var _indexMjs1 = require("../Hub/index.mjs");
var _indexMjs2 = require("../utils/sessionListener/index.mjs");
var _errorHelpersMjs2 = require("../awsClients/pinpoint/errorHelpers.mjs");
var _indexMjs3 = require("../Cache/index.mjs");
var _recordMjs = require("../providers/pinpoint/apis/record.mjs");
var _pinpointEventBufferMjs = require("../providers/pinpoint/utils/PinpointEventBuffer.mjs");
var _errorsMjs1 = require("../providers/pinpoint/types/errors.mjs");
var _amplifyMjs = require("../singleton/Amplify.mjs");
var _fetchAuthSessionMjs = require("../singleton/apis/fetchAuthSession.mjs");
var _errorHelpersMjs3 = require("./errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Provides a means to registering a service worker in the browser
 * and communicating with it via postMessage events.
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/
 *
 * postMessage events are currently not supported in all browsers. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
 *
 * At the minmum this class will register the service worker and listen
 * and attempt to dispatch messages on state change and record analytics
 * events based on the service worker lifecycle.
 */ class ServiceWorkerClass {
    constructor(){
        // The AWS Amplify logger
        this._logger = new (0, _consoleLoggerMjs.ConsoleLogger)('ServiceWorker');
    }
    /**
     * Get the currently active service worker
     */ get serviceWorker() {
        (0, _errorHelpersMjs3.assert)(this._serviceWorker !== undefined, (0, _errorHelpersMjs3.ServiceWorkerErrorCode).UndefinedInstance);
        return this._serviceWorker;
    }
    /**
     * Register the service-worker.js file in the browser
     * Make sure the service-worker.js is part of the build
     * for example with Angular, modify the angular-cli.json file
     * and add to "assets" array "service-worker.js"
     * @param {string} filePath Service worker file. Defaults to "/service-worker.js"
     * @param {string} scope The service worker scope. Defaults to "/"
     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register
     * @returns {Promise}
     *	- resolve(ServiceWorkerRegistration)
     *	- reject(Error)
     **/ register(filePath = '/service-worker.js', scope = '/') {
        this._logger.debug(`registering ${filePath}`);
        this._logger.debug(`registering service worker with scope ${scope}`);
        return new Promise((resolve, reject)=>{
            if (navigator && 'serviceWorker' in navigator) navigator.serviceWorker.register(filePath, {
                scope
            }).then((registration)=>{
                if (registration.installing) this._serviceWorker = registration.installing;
                else if (registration.waiting) this._serviceWorker = registration.waiting;
                else if (registration.active) this._serviceWorker = registration.active;
                this._registration = registration;
                this._setupListeners();
                this._logger.debug(`Service Worker Registration Success: ${registration}`);
                resolve(registration);
            }).catch((error)=>{
                this._logger.debug(`Service Worker Registration Failed ${error}`);
                reject(new (0, _amplifyErrorMjs.AmplifyError)({
                    name: (0, _errorHelpersMjs3.ServiceWorkerErrorCode).Unavailable,
                    message: 'Service Worker not available',
                    underlyingError: error
                }));
            });
            else reject(new (0, _amplifyErrorMjs.AmplifyError)({
                name: (0, _errorHelpersMjs3.ServiceWorkerErrorCode).Unavailable,
                message: 'Service Worker not available'
            }));
        });
    }
    /**
     * Enable web push notifications. If not subscribed, a new subscription will
     * be created and registered.
     * 	Test Push Server: https://web-push-codelab.glitch.me/
     * 	Push Server Libraries: https://github.com/web-push-libs/
     * 	API Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/
     * @param publicKey
     * @returns {Promise}
     * 	- resolve(PushSubscription)
     *  - reject(Error)
     */ enablePush(publicKey) {
        (0, _errorHelpersMjs3.assert)(this._registration !== undefined, (0, _errorHelpersMjs3.ServiceWorkerErrorCode).UndefinedRegistration);
        this._publicKey = publicKey;
        return new Promise((resolve, reject)=>{
            if ((0, _isBrowserMjs.isBrowser)()) {
                (0, _errorHelpersMjs3.assert)(this._registration !== undefined, (0, _errorHelpersMjs3.ServiceWorkerErrorCode).UndefinedRegistration);
                this._registration.pushManager.getSubscription().then((subscription)=>{
                    if (subscription) {
                        this._subscription = subscription;
                        this._logger.debug(`User is subscribed to push: ${JSON.stringify(subscription)}`);
                        resolve(subscription);
                    } else {
                        this._logger.debug(`User is NOT subscribed to push`);
                        return this._registration.pushManager.subscribe({
                            userVisibleOnly: true,
                            applicationServerKey: this._urlB64ToUint8Array(publicKey)
                        }).then((pushManagerSubscription)=>{
                            this._subscription = pushManagerSubscription;
                            this._logger.debug(`User subscribed: ${JSON.stringify(pushManagerSubscription)}`);
                            resolve(pushManagerSubscription);
                        }).catch((error)=>{
                            this._logger.error(error);
                        });
                    }
                });
            } else reject(new (0, _amplifyErrorMjs.AmplifyError)({
                name: (0, _errorHelpersMjs3.ServiceWorkerErrorCode).Unavailable,
                message: 'Service Worker not available'
            }));
        });
    }
    /**
     * Convert a base64 encoded string to a Uint8 array for the push server key
     * @param base64String
     */ _urlB64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);
        for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);
        return outputArray;
    }
    /**
     * Send a message to the service worker. The service worker needs
     * to implement `self.addEventListener('message') to handle the
     * message. This ***currently*** does not work in Safari or IE.
     * @param {object | string} message An arbitrary JSON object or string message to send to the service worker
     *	- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable
     * @returns {Promise}
     **/ send(message) {
        if (this._serviceWorker) this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);
    }
    /**
     * Listen for service worker state change and message events
     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state
     **/ _setupListeners() {
        this.serviceWorker.addEventListener('statechange', async ()=>{
            const currentState = this.serviceWorker.state;
            this._logger.debug(`ServiceWorker statechange: ${currentState}`);
            const { appId, region, bufferSize, flushInterval, flushSize, resendLimit } = (0, _amplifyMjs.Amplify).getConfig().Analytics?.Pinpoint ?? {};
            const { credentials } = await (0, _fetchAuthSessionMjs.fetchAuthSession)();
            if (appId && region && credentials) // Pinpoint is configured, record an event
            (0, _recordMjs.record)({
                appId,
                region,
                category: 'Core',
                credentials,
                bufferSize,
                flushInterval,
                flushSize,
                resendLimit,
                event: {
                    name: 'ServiceWorker',
                    attributes: {
                        state: currentState
                    }
                }
            });
        });
        this.serviceWorker.addEventListener('message', (event)=>{
            this._logger.debug(`ServiceWorker message event: ${event}`);
        });
    }
}

},{"../Logger/ConsoleLogger.mjs":"dnAuQ","../errors/AmplifyError.mjs":"G8oLh","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../utils/isBrowser.mjs":"93TiA","../utils/retry/retry.mjs":"apIO9","../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../Platform/index.mjs":"kdTt1","../Platform/types.mjs":"4dWla","../BackgroundProcessManager/types.mjs":"8jG07","../Reachability/Reachability.mjs":"d55uC","../Hub/index.mjs":"cN8sN","../utils/sessionListener/index.mjs":"9sYmd","../awsClients/pinpoint/errorHelpers.mjs":"5uHXq","../Cache/index.mjs":"2Ws5t","../providers/pinpoint/apis/record.mjs":"24TFY","../providers/pinpoint/utils/PinpointEventBuffer.mjs":"cikUr","../providers/pinpoint/types/errors.mjs":"7CsEe","../singleton/Amplify.mjs":"7YjAe","../singleton/apis/fetchAuthSession.mjs":"4o1Bn","./errorHelpers.mjs":"29DdL","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5uHXq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PinpointValidationErrorCode", ()=>PinpointValidationErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _createAssertionFunctionMjs = require("../../errors/createAssertionFunction.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _errorHelpersMjs = require("../../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var PinpointValidationErrorCode;
(function(PinpointValidationErrorCode) {
    PinpointValidationErrorCode["NoAppId"] = "NoAppId";
})(PinpointValidationErrorCode || (PinpointValidationErrorCode = {}));
const pinpointValidationErrorMap = {
    [PinpointValidationErrorCode.NoAppId]: {
        message: 'Missing application id.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(pinpointValidationErrorMap);

},{"../../errors/createAssertionFunction.mjs":"23eMH","../../types/errors.mjs":"4wxZl","../../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"24TFY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "record", ()=>record);
var _indexMjs = require("../../../utils/amplifyUuid/index.mjs");
var _indexMjs1 = require("../../../Cache/index.mjs");
var _resolveEndpointIdMjs = require("../utils/resolveEndpointId.mjs");
var _indexMjs2 = require("../../../utils/sessionListener/index.mjs");
var _constantsMjs = require("../utils/constants.mjs");
var _getEventBufferMjs = require("../utils/getEventBuffer.mjs");
var _constantsMjs1 = require("../../../utils/sessionListener/constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
let session;
/**
 * @internal
 */ const record = async ({ appId, category, channelType, credentials, event, identityId, region, userAgentValue, bufferSize, flushInterval, flushSize, resendLimit })=>{
    let eventSession = session;
    const currentTime = new Date();
    const timestampISOString = currentTime.toISOString();
    const eventId = (0, _indexMjs.amplifyUuid)();
    // Prepare event buffer if required
    const buffer = (0, _getEventBufferMjs.getEventBuffer)({
        appId,
        region,
        credentials,
        bufferSize: bufferSize ?? (0, _constantsMjs.BUFFER_SIZE),
        flushInterval: flushInterval ?? (0, _constantsMjs.FLUSH_INTERVAL),
        flushSize: flushSize ?? (0, _constantsMjs.FLUSH_SIZE),
        resendLimit: resendLimit ?? (0, _constantsMjs.RESEND_LIMIT),
        identityId,
        userAgentValue
    });
    const endpointId = await (0, _resolveEndpointIdMjs.resolveEndpointId)({
        appId,
        category,
        channelType,
        credentials,
        identityId,
        region,
        userAgentValue
    });
    // Generate session if required
    if (!eventSession || event.name === (0, _constantsMjs1.SESSION_START_EVENT)) {
        const sessionId = (0, _indexMjs.amplifyUuid)();
        session = {
            Id: sessionId,
            StartTimestamp: timestampISOString
        };
        eventSession = session;
    }
    // Terminate session when required
    if (session && event.name === (0, _constantsMjs1.SESSION_STOP_EVENT)) {
        eventSession = {
            ...session,
            StopTimestamp: timestampISOString,
            Duration: currentTime.getTime() - new Date(session.StartTimestamp).getTime()
        };
        session = undefined;
    }
    // Push event to buffer
    buffer.push({
        eventId,
        endpointId,
        event,
        session: eventSession,
        timestamp: timestampISOString,
        resendLimit: resendLimit ?? (0, _constantsMjs.RESEND_LIMIT)
    });
};

},{"../../../utils/amplifyUuid/index.mjs":"j50Jv","../../../Cache/index.mjs":"2Ws5t","../utils/resolveEndpointId.mjs":"87x6m","../../../utils/sessionListener/index.mjs":"9sYmd","../utils/constants.mjs":"69QT7","../utils/getEventBuffer.mjs":"fjFMb","../../../utils/sessionListener/constants.mjs":"7PHU6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"87x6m":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointId", ()=>resolveEndpointId);
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _updateEndpointMjs = require("../apis/updateEndpoint.mjs");
var _getEndpointIdMjs = require("./getEndpointId.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,
 * which will generate and cache an endpoint id between calls.
 *
 * @internal
 */ const resolveEndpointId = async ({ address, appId, category, channelType, credentials, identityId, region, userAgentValue })=>{
    let endpointId = await (0, _getEndpointIdMjs.getEndpointId)(appId, category);
    if (!endpointId) {
        await (0, _updateEndpointMjs.updateEndpoint)({
            address,
            appId,
            category,
            channelType,
            credentials,
            identityId,
            region,
            userAgentValue
        });
        endpointId = await (0, _getEndpointIdMjs.getEndpointId)(appId, category);
    }
    (0, _errorHelpersMjs.assert)(!!endpointId, (0, _errorsMjs.AmplifyErrorCode).NoEndpointId);
    return endpointId;
};

},{"../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../apis/updateEndpoint.mjs":"9IGfc","./getEndpointId.mjs":"cU814","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9IGfc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateEndpoint", ()=>updateEndpoint);
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../parseAWSExports.mjs");
var _indexMjs = require("../../../utils/amplifyUuid/index.mjs");
var _errorHelpersMjs1 = require("../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs1 = require("../../../Platform/index.mjs");
var _typesMjs = require("../../../Platform/types.mjs");
var _typesMjs1 = require("../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../Reachability/Reachability.mjs");
var _indexMjs2 = require("../../../Hub/index.mjs");
var _indexMjs3 = require("../../../utils/sessionListener/index.mjs");
var _errorHelpersMjs2 = require("../../../awsClients/pinpoint/errorHelpers.mjs");
var _updateEndpointMjs = require("../../../awsClients/pinpoint/updateEndpoint.mjs");
var _cacheEndpointIdMjs = require("../utils/cacheEndpointId.mjs");
var _createEndpointIdMjs = require("../utils/createEndpointId.mjs");
var _getEndpointIdMjs = require("../utils/getEndpointId.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ const updateEndpoint = async ({ address, appId, category, channelType, credentials, identityId, optOut, region, userAttributes, userId, userProfile, userAgentValue })=>{
    const endpointId = await (0, _getEndpointIdMjs.getEndpointId)(appId, category);
    // only generate a new endpoint id if one was not found in cache
    const createdEndpointId = !endpointId ? (0, _createEndpointIdMjs.createEndpointId)(appId, category) : undefined;
    const { customProperties, demographic, email, location, metrics, name, plan } = userProfile ?? {};
    // only automatically populate the endpoint with client info and identity id upon endpoint creation to
    // avoid overwriting the endpoint with these values every time the endpoint is updated
    const demographicsFromClientInfo = {};
    const resolvedUserId = createdEndpointId ? userId ?? identityId : userId;
    if (createdEndpointId) {
        const clientInfo = (0, _getClientInfoMjs.getClientInfo)();
        demographicsFromClientInfo.appVersion = clientInfo.appVersion;
        demographicsFromClientInfo.make = clientInfo.make;
        demographicsFromClientInfo.model = clientInfo.model;
        demographicsFromClientInfo.modelVersion = clientInfo.version;
        demographicsFromClientInfo.platform = clientInfo.platform;
    }
    const mergedDemographic = {
        ...demographicsFromClientInfo,
        ...demographic
    };
    const attributes = {
        ...email && {
            email: [
                email
            ]
        },
        ...name && {
            name: [
                name
            ]
        },
        ...plan && {
            plan: [
                plan
            ]
        },
        ...customProperties
    };
    const shouldAddDemographics = createdEndpointId || demographic;
    const shouldAddAttributes = email || customProperties || name || plan;
    const shouldAddUser = resolvedUserId || userAttributes;
    const input = {
        ApplicationId: appId,
        EndpointId: endpointId ?? createdEndpointId,
        EndpointRequest: {
            RequestId: (0, _indexMjs.amplifyUuid)(),
            EffectiveDate: new Date().toISOString(),
            ChannelType: channelType,
            Address: address,
            ...shouldAddAttributes && {
                Attributes: attributes
            },
            ...shouldAddDemographics && {
                Demographic: {
                    AppVersion: mergedDemographic.appVersion,
                    Locale: mergedDemographic.locale,
                    Make: mergedDemographic.make,
                    Model: mergedDemographic.model,
                    ModelVersion: mergedDemographic.modelVersion,
                    Platform: mergedDemographic.platform,
                    PlatformVersion: mergedDemographic.platformVersion,
                    Timezone: mergedDemographic.timezone
                }
            },
            ...location && {
                Location: {
                    City: location.city,
                    Country: location.country,
                    Latitude: location.latitude,
                    Longitude: location.longitude,
                    PostalCode: location.postalCode,
                    Region: location.region
                }
            },
            Metrics: metrics,
            OptOut: optOut,
            ...shouldAddUser && {
                User: {
                    UserId: resolvedUserId,
                    UserAttributes: userAttributes
                }
            }
        }
    };
    try {
        await (0, _updateEndpointMjs.updateEndpoint)({
            credentials,
            region,
            userAgentValue
        }, input);
        // if we had to create an endpoint id, we need to now cache it
        if (createdEndpointId) await (0, _cacheEndpointIdMjs.cacheEndpointId)(appId, category, createdEndpointId);
    } finally{
        // at this point, we completely reset the behavior so even if the update was unsuccessful
        // we can just start over with a newly created endpoint id
        if (createdEndpointId) (0, _createEndpointIdMjs.clearCreatedEndpointId)(appId, category);
    }
};

},{"../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/retry.mjs":"apIO9","../../../parseAWSExports.mjs":"jOmdm","../../../utils/amplifyUuid/index.mjs":"j50Jv","../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../Platform/index.mjs":"kdTt1","../../../Platform/types.mjs":"4dWla","../../../BackgroundProcessManager/types.mjs":"8jG07","../../../Reachability/Reachability.mjs":"d55uC","../../../Hub/index.mjs":"cN8sN","../../../utils/sessionListener/index.mjs":"9sYmd","../../../awsClients/pinpoint/errorHelpers.mjs":"5uHXq","../../../awsClients/pinpoint/updateEndpoint.mjs":"lvGPr","../utils/cacheEndpointId.mjs":"8sV7T","../utils/createEndpointId.mjs":"9IHKK","../utils/getEndpointId.mjs":"cU814","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lvGPr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateEndpoint", ()=>updateEndpoint);
var _authenticatedMjs = require("../../clients/handlers/aws/authenticated.mjs");
var _composeServiceApiMjs = require("../../clients/internal/composeServiceApi.mjs");
var _extendedEncodeURIComponentMjs = require("../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs");
var _responseInfoMjs = require("../../clients/serde/responseInfo.mjs");
var _jsonMjs = require("../../clients/serde/json.mjs");
var _indexMjs = require("../../utils/amplifyUrl/index.mjs");
var _baseMjs = require("./base.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const updateEndpointSerializer = ({ ApplicationId = '', EndpointId = '', EndpointRequest }, endpoint)=>{
    const headers = (0, _baseMjs.getSharedHeaders)();
    const url = new (0, _indexMjs.AmplifyUrl)(endpoint.url);
    url.pathname = `v1/apps/${(0, _extendedEncodeURIComponentMjs.extendedEncodeURIComponent)(ApplicationId)}/endpoints/${(0, _extendedEncodeURIComponentMjs.extendedEncodeURIComponent)(EndpointId)}`;
    const body = JSON.stringify(EndpointRequest);
    return {
        method: 'PUT',
        headers,
        url,
        body
    };
};
const updateEndpointDeserializer = async (response)=>{
    if (response.statusCode >= 300) {
        const error = await (0, _jsonMjs.parseJsonError)(response);
        throw error;
    } else {
        const { Message, RequestID } = await (0, _jsonMjs.parseJsonBody)(response);
        return {
            MessageBody: {
                Message,
                RequestID
            },
            $metadata: (0, _responseInfoMjs.parseMetadata)(response)
        };
    }
};
/**
 * @internal
 */ const updateEndpoint = (0, _composeServiceApiMjs.composeServiceApi)((0, _authenticatedMjs.authenticatedHandler), updateEndpointSerializer, updateEndpointDeserializer, (0, _baseMjs.defaultConfig));

},{"../../clients/handlers/aws/authenticated.mjs":"5QBw2","../../clients/internal/composeServiceApi.mjs":"4yvCA","../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs":"5f64B","../../clients/serde/responseInfo.mjs":"bmNRC","../../clients/serde/json.mjs":"lahjC","../../utils/amplifyUrl/index.mjs":"eZYHY","./base.mjs":"5eaWa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5QBw2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "authenticatedHandler", ()=>authenticatedHandler);
var _retryMiddlewareMjs = require("../../middleware/retry/retryMiddleware.mjs");
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _amzSdkInvocationIdHeaderMiddlewareMjs = require("../../middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs");
var _amzSdkRequestHeaderMiddlewareMjs = require("../../middleware/retry/amzSdkRequestHeaderMiddleware.mjs");
var _middlewareMjs = require("../../middleware/signing/middleware.mjs");
var _middlewareMjs1 = require("../../middleware/userAgent/middleware.mjs");
var _composeTransferHandlerMjs = require("../../internal/composeTransferHandler.mjs");
var _fetchMjs = require("../fetch.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const authenticatedHandler = (0, _composeTransferHandlerMjs.composeTransferHandler)((0, _fetchMjs.fetchTransferHandler), [
    (0, _middlewareMjs1.userAgentMiddlewareFactory),
    (0, _amzSdkInvocationIdHeaderMiddlewareMjs.amzSdkInvocationIdHeaderMiddlewareFactory),
    (0, _retryMiddlewareMjs.retryMiddlewareFactory),
    (0, _amzSdkRequestHeaderMiddlewareMjs.amzSdkRequestHeaderMiddlewareFactory),
    (0, _middlewareMjs.signingMiddlewareFactory)
]);

},{"../../middleware/retry/retryMiddleware.mjs":"9XrdY","../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/retry.mjs":"apIO9","../../middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs":"bIERL","../../middleware/retry/amzSdkRequestHeaderMiddleware.mjs":"6xHaL","../../middleware/signing/middleware.mjs":"hpAwG","../../middleware/userAgent/middleware.mjs":"iS1O3","../../internal/composeTransferHandler.mjs":"8JUvX","../fetch.mjs":"4pQUT","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hpAwG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signingMiddlewareFactory", ()=>signingMiddlewareFactory);
var _signRequestMjs = require("./signer/signatureV4/signRequest.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _getSkewCorrectedDateMjs = require("./utils/getSkewCorrectedDate.mjs");
var _getUpdatedSystemClockOffsetMjs = require("./utils/getUpdatedSystemClockOffset.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.
 * This middleware is expected to be placed after retry middleware.
 */ const signingMiddlewareFactory = ({ credentials, region, service, uriEscapePath = true })=>{
    let currentSystemClockOffset;
    return (next, context)=>async function signingMiddleware(request) {
            currentSystemClockOffset = currentSystemClockOffset ?? 0;
            const signRequestOptions = {
                credentials: typeof credentials === 'function' ? await credentials({
                    forceRefresh: !!context?.isCredentialsExpired
                }) : credentials,
                signingDate: (0, _getSkewCorrectedDateMjs.getSkewCorrectedDate)(currentSystemClockOffset),
                signingRegion: region,
                signingService: service,
                uriEscapePath
            };
            const signedRequest = await (0, _signRequestMjs.signRequest)(request, signRequestOptions);
            const response = await next(signedRequest);
            // Update system clock offset if response contains date header, regardless of the status code.
            // non-2xx response will still be returned from next handler instead of thrown, because it's
            // only thrown by the retry middleware.
            const dateString = getDateHeader(response);
            if (dateString) currentSystemClockOffset = (0, _getUpdatedSystemClockOffsetMjs.getUpdatedSystemClockOffset)(Date.parse(dateString), currentSystemClockOffset);
            return response;
        };
};
const getDateHeader = ({ headers } = {})=>headers?.date ?? headers?.Date ?? headers?.['x-amz-date'];

},{"./signer/signatureV4/signRequest.mjs":"jCQnb","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","./utils/getSkewCorrectedDate.mjs":"jFxhE","./utils/getUpdatedSystemClockOffset.mjs":"glx5P","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jCQnb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signRequest", ()=>signRequest);
var _getSignedHeadersMjs = require("./utils/getSignedHeaders.mjs");
var _getSigningValuesMjs = require("./utils/getSigningValues.mjs");
var _constantsMjs = require("./constants.mjs");
var _getSignatureMjs = require("./utils/getSignature.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.
 *
 * @param request `HttpRequest` to be signed.
 * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.
 * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.
 */ const signRequest = (request, options)=>{
    const signingValues = (0, _getSigningValuesMjs.getSigningValues)(options);
    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;
    // create the request to sign
    const headers = {
        ...request.headers
    };
    headers[0, _constantsMjs.HOST_HEADER] = request.url.host;
    headers[0, _constantsMjs.AMZ_DATE_HEADER] = longDate;
    if (sessionToken) headers[0, _constantsMjs.TOKEN_HEADER] = sessionToken;
    const requestToSign = {
        ...request,
        headers
    };
    // calculate and add the signature to the request
    const signature = (0, _getSignatureMjs.getSignature)(requestToSign, signingValues);
    const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;
    const signedHeadersEntry = `SignedHeaders=${(0, _getSignedHeadersMjs.getSignedHeaders)(headers)}`;
    const signatureEntry = `Signature=${signature}`;
    headers[0, _constantsMjs.AUTH_HEADER] = `${0, _constantsMjs.SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;
    return requestToSign;
};

},{"./utils/getSignedHeaders.mjs":"eDwnd","./utils/getSigningValues.mjs":"6HH9G","./constants.mjs":"8HTv9","./utils/getSignature.mjs":"lBb59","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eDwnd":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns signed headers.
 *
 * @param headers `headers` from the request.
 * @returns List of headers included in canonical headers, separated by semicolons (;). This indicates which headers
 * are part of the signing process. Header names must use lowercase characters and must appear in alphabetical order.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignedHeaders", ()=>getSignedHeaders);
const getSignedHeaders = (headers)=>Object.keys(headers).map((key)=>key.toLowerCase()).sort().join(';');

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6HH9G":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSigningValues", ()=>getSigningValues);
var _getCredentialScopeMjs = require("./getCredentialScope.mjs");
var _getFormattedDatesMjs = require("./getFormattedDates.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Extracts common values used for signing both requests and urls.
 *
 * @param options `SignRequestOptions` object containing values used to construct the signature.
 * @returns Common `SigningValues` used for signing.
 *
 * @internal
 */ const getSigningValues = ({ credentials, signingDate = new Date(), signingRegion, signingService, uriEscapePath = true })=>{
    // get properties from credentials
    const { accessKeyId, secretAccessKey, sessionToken } = credentials;
    // get formatted dates for signing
    const { longDate, shortDate } = (0, _getFormattedDatesMjs.getFormattedDates)(signingDate);
    // copy header and set signing properties
    const credentialScope = (0, _getCredentialScopeMjs.getCredentialScope)(shortDate, signingRegion, signingService);
    return {
        accessKeyId,
        credentialScope,
        longDate,
        secretAccessKey,
        sessionToken,
        shortDate,
        signingRegion,
        signingService,
        uriEscapePath
    };
};

},{"./getCredentialScope.mjs":"6f3xg","./getFormattedDates.mjs":"7fGCO","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6f3xg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCredentialScope", ()=>getCredentialScope);
var _constantsMjs = require("../constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns the credential scope which restricts the resulting signature to the specified region and service.
 *
 * @param date Current date in the format 'YYYYMMDD'.
 * @param region AWS region in which the service resides.
 * @param service Service to which the signed request is being sent.
 *
 * @returns  A string representing the credential scope with format 'YYYYMMDD/region/service/aws4_request'.
 *
 * @internal
 */ const getCredentialScope = (date, region, service)=>`${date}/${region}/${service}/${0, _constantsMjs.KEY_TYPE_IDENTIFIER}`;

},{"../constants.mjs":"8HTv9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8HTv9":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// query params
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "EMPTY_HASH", ()=>EMPTY_HASH);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "REGION_SET_PARAM", ()=>REGION_SET_PARAM);
parcelHelpers.export(exports, "SHA256_ALGORITHM_IDENTIFIER", ()=>SHA256_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "SIGNATURE_IDENTIFIER", ()=>SIGNATURE_IDENTIFIER);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
const ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm';
const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date';
const CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential';
const EXPIRES_QUERY_PARAM = 'X-Amz-Expires';
const REGION_SET_PARAM = 'X-Amz-Region-Set';
const SIGNATURE_QUERY_PARAM = 'X-Amz-Signature';
const SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders';
const TOKEN_QUERY_PARAM = 'X-Amz-Security-Token';
// headers
const AUTH_HEADER = 'authorization';
const HOST_HEADER = 'host';
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
// identifiers
const KEY_TYPE_IDENTIFIER = 'aws4_request';
const SHA256_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256';
const SIGNATURE_IDENTIFIER = 'AWS4';
// preset values
const EMPTY_HASH = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';
const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7fGCO":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns expected date strings to be used in signing.
 *
 * @param date JavaScript `Date` object.
 * @returns `FormattedDates` object containing the following:
 * - longDate: A date string in 'YYYYMMDDThhmmssZ' format
 * - shortDate: A date string in 'YYYYMMDD' format
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getFormattedDates", ()=>getFormattedDates);
const getFormattedDates = (date)=>{
    const longDate = date.toISOString().replace(/[:-]|\.\d{3}/g, '');
    return {
        longDate,
        shortDate: longDate.slice(0, 8)
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lBb59":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignature", ()=>getSignature);
var _dataHashHelpersMjs = require("./dataHashHelpers.mjs");
var _getCanonicalRequestMjs = require("./getCanonicalRequest.mjs");
var _getSigningKeyMjs = require("./getSigningKey.mjs");
var _getStringToSignMjs = require("./getStringToSign.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Calculates and returns an AWS API Signature.
 * https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html
 *
 * @param request `HttpRequest` to be signed.
 * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.
 * @returns AWS API Signature to sign a request or url with.
 *
 * @internal
 */ const getSignature = (request, { credentialScope, longDate, secretAccessKey, shortDate, signingRegion, signingService, uriEscapePath })=>{
    // step 1: create a canonical request
    const canonicalRequest = (0, _getCanonicalRequestMjs.getCanonicalRequest)(request, uriEscapePath);
    // step 2: create a hash of the canonical request
    const hashedRequest = (0, _dataHashHelpersMjs.getHashedDataAsHex)(null, canonicalRequest);
    // step 3: create a string to sign
    const stringToSign = (0, _getStringToSignMjs.getStringToSign)(longDate, credentialScope, hashedRequest);
    // step 4: calculate the signature
    const signature = (0, _dataHashHelpersMjs.getHashedDataAsHex)((0, _getSigningKeyMjs.getSigningKey)(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
    return signature;
};

},{"./dataHashHelpers.mjs":"l7roP","./getCanonicalRequest.mjs":"da0SZ","./getSigningKey.mjs":"2YYhr","./getStringToSign.mjs":"aSS9a","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"l7roP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashedData", ()=>getHashedData);
parcelHelpers.export(exports, "getHashedDataAsHex", ()=>getHashedDataAsHex);
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// TODO: V6 update to different crypto dependency?
/**
 * Returns the hashed data a `Uint8Array`.
 *
 * @param key `SourceData` to be used as hashing key.
 * @param data Hashable `SourceData`.
 * @returns `Uint8Array` created from the data as input to a hash function.
 */ const getHashedData = (key, data)=>{
    const sha256 = new (0, _sha256Js.Sha256)(key ?? undefined);
    sha256.update(data);
    // TODO: V6 flip to async digest
    const hashedData = sha256.digestSync();
    return hashedData;
};
/**
 * Returns the hashed data as a hex string.
 *
 * @param key `SourceData` to be used as hashing key.
 * @param data Hashable `SourceData`.
 * @returns String using lowercase hexadecimal characters created from the data as input to a hash function.
 *
 * @internal
 */ const getHashedDataAsHex = (key, data)=>{
    const hashedData = getHashedData(key, data);
    return (0, _utilHexEncoding.toHex)(hashedData);
};

},{"@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"da0SZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalRequest", ()=>getCanonicalRequest);
var _getCanonicalHeadersMjs = require("./getCanonicalHeaders.mjs");
var _getCanonicalQueryStringMjs = require("./getCanonicalQueryString.mjs");
var _getCanonicalUriMjs = require("./getCanonicalUri.mjs");
var _getHashedPayloadMjs = require("./getHashedPayload.mjs");
var _getSignedHeadersMjs = require("./getSignedHeaders.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a canonical request.
 *
 * @param request `HttpRequest` from which to create the canonical request from.
 * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the
 *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.
 * @returns String created by by concatenating the following strings, separated by newline characters:
 * - HTTPMethod
 * - CanonicalUri
 * - CanonicalQueryString
 * - CanonicalHeaders
 * - SignedHeaders
 * - HashedPayload
 *
 * @internal
 */ const getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true)=>[
        method,
        (0, _getCanonicalUriMjs.getCanonicalUri)(url.pathname, uriEscapePath),
        (0, _getCanonicalQueryStringMjs.getCanonicalQueryString)(url.searchParams),
        (0, _getCanonicalHeadersMjs.getCanonicalHeaders)(headers),
        (0, _getSignedHeadersMjs.getSignedHeaders)(headers),
        (0, _getHashedPayloadMjs.getHashedPayload)(body)
    ].join('\n');

},{"./getCanonicalHeaders.mjs":"dLPEE","./getCanonicalQueryString.mjs":"aa8Dw","./getCanonicalUri.mjs":"4kCQK","./getHashedPayload.mjs":"ij5fh","./getSignedHeaders.mjs":"eDwnd","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dLPEE":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns canonical headers.
 *
 * @param headers Headers from the request.
 * @returns Request headers that will be signed, and their values, separated by newline characters. Header names must
 * use lowercase characters, must appear in alphabetical order, and must be followed by a colon (:). For the values,
 * trim any leading or trailing spaces, convert sequential spaces to a single space, and separate the values
 * for a multi-value header using commas.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
const getCanonicalHeaders = (headers)=>Object.entries(headers).map(([key, value])=>({
            key: key.toLowerCase(),
            value: value?.trim().replace(/\s+/g, ' ') ?? ''
        })).sort((a, b)=>a.key < b.key ? -1 : 1).map((entry)=>`${entry.key}:${entry.value}\n`).join('');

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aa8Dw":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a canonical query string.
 *
 * @param searchParams `searchParams` from the request url.
 * @returns URL-encoded query string parameters, separated by ampersands (&). Percent-encode reserved characters,
 * including the space character. Encode names and values separately. If there are empty parameters, append the equals
 * sign to the parameter name before encoding. After encoding, sort the parameters alphabetically by key name. If there
 * is no query string, use an empty string ("").
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalQueryString", ()=>getCanonicalQueryString);
const getCanonicalQueryString = (searchParams)=>Array.from(searchParams).sort(([keyA, valA], [keyB, valB])=>{
        if (keyA === keyB) return valA < valB ? -1 : 1;
        return keyA < keyB ? -1 : 1;
    }).map(([key, val])=>`${escapeUri(key)}=${escapeUri(val)}`).join('&');
const escapeUri = (uri)=>encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4kCQK":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a canonical uri.
 *
 * @param pathname `pathname` from request url.
 * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the
 *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.
 * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark
 * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalUri", ()=>getCanonicalUri);
const getCanonicalUri = (pathname, uriEscapePath = true)=>pathname ? uriEscapePath ? encodeURIComponent(pathname).replace(/%2F/g, '/') : pathname : '/';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ij5fh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashedPayload", ()=>getHashedPayload);
var _constantsMjs = require("../constants.mjs");
var _dataHashHelpersMjs = require("./dataHashHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns the hashed payload.
 *
 * @param body `body` (payload) from the request.
 * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string
 * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.
 *
 * @internal
 */ const getHashedPayload = (body)=>{
    // return precalculated empty hash if body is undefined or null
    if (body == null) return 0, _constantsMjs.EMPTY_HASH;
    if (isSourceData(body)) {
        const hashedData = (0, _dataHashHelpersMjs.getHashedDataAsHex)(null, body);
        return hashedData;
    }
    // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.
    return 0, _constantsMjs.UNSIGNED_PAYLOAD;
};
const isSourceData = (body)=>typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);
const isArrayBuffer = (arg)=>typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === '[object ArrayBuffer]';

},{"../constants.mjs":"8HTv9","./dataHashHelpers.mjs":"l7roP","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2YYhr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
var _constantsMjs = require("../constants.mjs");
var _dataHashHelpersMjs = require("./dataHashHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a signing key to be used for signing requests.
 *
 * @param secretAccessKey AWS secret access key from credentials.
 * @param date Current date in the format 'YYYYMMDD'.
 * @param region AWS region in which the service resides.
 * @param service Service to which the signed request is being sent.
 *
 * @returns `Uint8Array` calculated from its composite parts.
 *
 * @internal
 */ const getSigningKey = (secretAccessKey, date, region, service)=>{
    const key = `${(0, _constantsMjs.SIGNATURE_IDENTIFIER)}${secretAccessKey}`;
    const dateKey = (0, _dataHashHelpersMjs.getHashedData)(key, date);
    const regionKey = (0, _dataHashHelpersMjs.getHashedData)(dateKey, region);
    const serviceKey = (0, _dataHashHelpersMjs.getHashedData)(regionKey, service);
    const signingKey = (0, _dataHashHelpersMjs.getHashedData)(serviceKey, (0, _constantsMjs.KEY_TYPE_IDENTIFIER));
    return signingKey;
};

},{"../constants.mjs":"8HTv9","./dataHashHelpers.mjs":"l7roP","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aSS9a":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getStringToSign", ()=>getStringToSign);
var _constantsMjs = require("../constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a string to be signed.
 *
 * @param date Current date in the format 'YYYYMMDDThhmmssZ'.
 * @param credentialScope String representing the credential scope with format 'YYYYMMDD/region/service/aws4_request'.
 * @param hashedRequest Hashed canonical request.
 *
 * @returns A string created by by concatenating the following strings, separated by newline characters:
 * - Algorithm
 * - RequestDateTime
 * - CredentialScope
 * - HashedCanonicalRequest
 *
 * @internal
 */ const getStringToSign = (date, credentialScope, hashedRequest)=>[
        (0, _constantsMjs.SHA256_ALGORITHM_IDENTIFIER),
        date,
        credentialScope,
        hashedRequest
    ].join('\n');

},{"../constants.mjs":"8HTv9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jFxhE":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a `Date` that is corrected for clock skew.
 *
 * @param systemClockOffset The offset of the system clock in milliseconds.
 *
 * @returns `Date` representing the current time adjusted by the system clock offset.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSkewCorrectedDate", ()=>getSkewCorrectedDate);
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"glx5P":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUpdatedSystemClockOffset", ()=>getUpdatedSystemClockOffset);
var _isClockSkewedMjs = require("./isClockSkewed.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns the difference between clock time and the current system time if clock is skewed.
 *
 * @param clockTimeInMilliseconds Clock time in milliseconds.
 * @param currentSystemClockOffset Current system clock offset in milliseconds.
 *
 * @internal
 */ const getUpdatedSystemClockOffset = (clockTimeInMilliseconds, currentSystemClockOffset)=>{
    if ((0, _isClockSkewedMjs.isClockSkewed)(clockTimeInMilliseconds, currentSystemClockOffset)) return clockTimeInMilliseconds - Date.now();
    return currentSystemClockOffset;
};

},{"./isClockSkewed.mjs":"14gIS","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"14gIS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isClockSkewed", ()=>isClockSkewed);
var _getSkewCorrectedDateMjs = require("./getSkewCorrectedDate.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// 5 mins in milliseconds. Ref: https://github.com/aws/aws-sdk-js-v3/blob/6c0f44fab30a1bb2134af47362a31332abc3666b/packages/middleware-signing/src/utils/isClockSkewed.ts#L10
const SKEW_WINDOW = 300000;
/**
 * Checks if the provided date is within the skew window of 5 minutes.
 *
 * @param clockTimeInMilliseconds Time to check for skew in milliseconds.
 * @param clockOffsetInMilliseconds Offset to check clock against in milliseconds.
 *
 * @returns True if skewed. False otherwise.
 *
 * @internal
 */ const isClockSkewed = (clockTimeInMilliseconds, clockOffsetInMilliseconds)=>Math.abs((0, _getSkewCorrectedDateMjs.getSkewCorrectedDate)(clockOffsetInMilliseconds).getTime() - clockTimeInMilliseconds) >= SKEW_WINDOW;

},{"./getSkewCorrectedDate.mjs":"jFxhE","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5f64B":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Wraps encodeURIComponent to encode additional characters to fully adhere to RFC 3986.
 * @see https://github.com/aws/aws-sdk-js-v3/blob/86b432c464150069678b25ff88d57c2ca26e75a2/packages/smithy-client/src/extended-encode-uri-component.ts#L7
 *
 * @param uri URI string to encode
 * @returns RFC 3986 encoded string
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>extendedEncodeURIComponent);
const extendedEncodeURIComponent = (uri)=>{
    // Match characters normally not encoded by `encodeURIComponent`
    const extendedCharacters = /[!'()*]/g;
    return encodeURIComponent(uri).replace(extendedCharacters, hexEncode);
};
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5eaWa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultConfig", ()=>defaultConfig);
parcelHelpers.export(exports, "getSharedHeaders", ()=>getSharedHeaders);
var _getDnsSuffixMjs = require("../../clients/endpoints/getDnsSuffix.mjs");
var _jitteredBackoffMjs = require("../../clients/middleware/retry/jitteredBackoff.mjs");
var _defaultRetryDeciderMjs = require("../../clients/middleware/retry/defaultRetryDecider.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _errorHelpersMjs = require("../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _indexMjs = require("../../utils/amplifyUrl/index.mjs");
var _errorHelpersMjs1 = require("../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs1 = require("../../Platform/index.mjs");
var _typesMjs = require("../../Platform/types.mjs");
var _typesMjs1 = require("../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../Reachability/Reachability.mjs");
var _indexMjs2 = require("../../Hub/index.mjs");
var _indexMjs3 = require("../../utils/sessionListener/index.mjs");
var _jsonMjs = require("../../clients/serde/json.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * The service name used to sign requests if the API requires authentication.
 */ const SERVICE_NAME = 'mobiletargeting';
/**
 * The endpoint resolver function that returns the endpoint URL for a given region.
 */ const endpointResolver = ({ region })=>({
        url: new (0, _indexMjs.AmplifyUrl)(`https://pinpoint.${region}.${(0, _getDnsSuffixMjs.getDnsSuffix)(region)}`)
    });
/**
 * @internal
 */ const defaultConfig = {
    service: SERVICE_NAME,
    endpointResolver,
    retryDecider: (0, _defaultRetryDeciderMjs.getRetryDecider)((0, _jsonMjs.parseJsonError)),
    computeDelay: (0, _jitteredBackoffMjs.jitteredBackoff),
    get userAgentValue () {
        return (0, _indexMjs1.getAmplifyUserAgent)();
    }
};
/**
 * @internal
 */ const getSharedHeaders = ()=>({
        'content-type': 'application/json'
    });

},{"../../clients/endpoints/getDnsSuffix.mjs":"249Ub","../../clients/middleware/retry/jitteredBackoff.mjs":"ecaUw","../../clients/middleware/retry/defaultRetryDecider.mjs":"eKSsN","../../types/errors.mjs":"4wxZl","../../errors/errorHelpers.mjs":"6kl5J","../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../utils/retry/retry.mjs":"apIO9","../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../utils/amplifyUrl/index.mjs":"eZYHY","../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../Platform/index.mjs":"kdTt1","../../Platform/types.mjs":"4dWla","../../BackgroundProcessManager/types.mjs":"8jG07","../../Reachability/Reachability.mjs":"d55uC","../../Hub/index.mjs":"cN8sN","../../utils/sessionListener/index.mjs":"9sYmd","../../clients/serde/json.mjs":"lahjC","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8sV7T":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cacheEndpointId", ()=>cacheEndpointId);
var _indexMjs = require("../../../Cache/index.mjs");
var _getCacheKeyMjs = require("./getCacheKey.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Writes an endpoint id to a long-lived cache.
 *
 * @internal
 */ const cacheEndpointId = async (appId, category, endpointId)=>{
    const cacheKey = (0, _getCacheKeyMjs.getCacheKey)(appId, category);
    // Set a longer TTL to avoid endpoint id being deleted after the default TTL (3 days)
    // Also set its priority to the highest to reduce its chance of being deleted when cache is full
    const ttl = 3153600000000; // 100 years
    const expiration = new Date().getTime() + ttl;
    return (0, _indexMjs.Cache).setItem(cacheKey, endpointId, {
        expires: expiration,
        priority: 1
    });
};

},{"../../../Cache/index.mjs":"2Ws5t","./getCacheKey.mjs":"9OuAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9OuAN":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCacheKey", ()=>getCacheKey);
const PROVIDER_NAME = 'pinpoint';
/**
 * Returns a unique cache key for a particular category/appId combination.
 *
 * @internal
 */ const getCacheKey = (appId, category)=>`${category}:${PROVIDER_NAME}:${appId}`;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9IHKK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clearCreatedEndpointId", ()=>clearCreatedEndpointId);
parcelHelpers.export(exports, "createEndpointId", ()=>createEndpointId);
var _indexMjs = require("../../../utils/amplifyUuid/index.mjs");
var _getCacheKeyMjs = require("./getCacheKey.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createdEndpointIds = {};
/**
 * Creates an endpoint id and guarantees multiple creations for a category returns the same uuid.
 *
 * @internal
 */ const createEndpointId = (appId, category)=>{
    const cacheKey = (0, _getCacheKeyMjs.getCacheKey)(appId, category);
    if (!createdEndpointIds[cacheKey]) createdEndpointIds[cacheKey] = (0, _indexMjs.amplifyUuid)();
    return createdEndpointIds[cacheKey];
};
/**
 * Clears a created endpoint id for a category.
 *
 * @internal
 */ const clearCreatedEndpointId = (appId, category)=>{
    const cacheKey = (0, _getCacheKeyMjs.getCacheKey)(appId, category);
    delete createdEndpointIds[cacheKey];
};

},{"../../../utils/amplifyUuid/index.mjs":"j50Jv","./getCacheKey.mjs":"9OuAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cU814":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointId", ()=>getEndpointId);
var _indexMjs = require("../../../Cache/index.mjs");
var _getCacheKeyMjs = require("./getCacheKey.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns an endpoint id from cache or `undefined` if not found.
 *
 * @internal
 */ const getEndpointId = async (appId, category)=>{
    const cacheKey = (0, _getCacheKeyMjs.getCacheKey)(appId, category);
    const cachedEndpointId = await (0, _indexMjs.Cache).getItem(cacheKey);
    return cachedEndpointId ?? undefined;
};

},{"../../../Cache/index.mjs":"2Ws5t","./getCacheKey.mjs":"9OuAN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"69QT7":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Default buffer constants
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BUFFER_SIZE", ()=>BUFFER_SIZE);
parcelHelpers.export(exports, "FLUSH_INTERVAL", ()=>FLUSH_INTERVAL);
parcelHelpers.export(exports, "FLUSH_SIZE", ()=>FLUSH_SIZE);
parcelHelpers.export(exports, "RESEND_LIMIT", ()=>RESEND_LIMIT);
const BUFFER_SIZE = 1000;
const FLUSH_SIZE = 100;
const FLUSH_INTERVAL = 5000; // 5s
const RESEND_LIMIT = 5;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fjFMb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEventBuffer", ()=>getEventBuffer);
var _pinpointEventBufferMjs = require("./PinpointEventBuffer.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Map of buffers by region -> appId
const eventBufferMap = {};
/**
 * Returns a PinpointEventBuffer instance for the specified region & app ID, creating one if it does not yet exist.
 *
 * @internal
 */ const getEventBuffer = ({ appId, region, credentials, bufferSize, flushInterval, flushSize, resendLimit, identityId, userAgentValue })=>{
    if (eventBufferMap[region]?.[appId]) {
        const buffer = eventBufferMap[region][appId];
        /*
        If the identity or credentials has changed flush out the buffer and create a new instance. The old instance will be garbage
        collected.
        */ const shouldFlushBuffer = buffer.identityHasChanged(identityId) || buffer.haveCredentialsChanged(credentials);
        if (shouldFlushBuffer) buffer.flush();
        else return buffer;
    }
    const buffer = new (0, _pinpointEventBufferMjs.PinpointEventBuffer)({
        appId,
        bufferSize,
        credentials,
        flushInterval,
        flushSize,
        identityId,
        region,
        resendLimit,
        userAgentValue
    });
    if (!eventBufferMap[region]) eventBufferMap[region] = {};
    eventBufferMap[region][appId] = buffer;
    return buffer;
};

},{"./PinpointEventBuffer.mjs":"cikUr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cikUr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PinpointEventBuffer", ()=>PinpointEventBuffer);
var _consoleLoggerMjs = require("../../../Logger/ConsoleLogger.mjs");
var _errorsMjs = require("../../../types/errors.mjs");
var _errorHelpersMjs = require("../../../errors/errorHelpers.mjs");
var _getClientInfoMjs = require("../../../utils/getClientInfo/getClientInfo.mjs");
var _retryMjs = require("../../../utils/retry/retry.mjs");
var _parseAWSExportsMjs = require("../../../parseAWSExports.mjs");
var _uuid = require("uuid");
var _errorHelpersMjs1 = require("../../../singleton/Auth/utils/errorHelpers.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _haveCredentialsChangedMjs = require("../../../utils/haveCredentialsChanged.mjs");
var _indexMjs = require("../../../Platform/index.mjs");
var _typesMjs = require("../../../Platform/types.mjs");
var _typesMjs1 = require("../../../BackgroundProcessManager/types.mjs");
var _reachabilityMjs = require("../../../Reachability/Reachability.mjs");
var _indexMjs1 = require("../../../Hub/index.mjs");
var _indexMjs2 = require("../../../utils/sessionListener/index.mjs");
var _putEventsMjs = require("../../../awsClients/pinpoint/putEvents.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _consoleLoggerMjs.ConsoleLogger)('PinpointEventBuffer');
const RETRYABLE_CODES = [
    429,
    500
];
const ACCEPTED_CODES = [
    202
];
class PinpointEventBuffer {
    constructor(config){
        this._interval = undefined;
        this._pause = false;
        this._flush = false;
        this._buffer = [];
        this._config = config;
        this._sendBatch = this._sendBatch.bind(this);
        this._startLoop();
    }
    push(event) {
        if (this._buffer.length >= this._config.bufferSize) {
            logger.debug('Exceeded Pinpoint event buffer limits, event dropped.', {
                eventId: event.eventId
            });
            return;
        }
        this._buffer.push({
            [event.eventId]: event
        });
    }
    pause() {
        this._pause = true;
    }
    resume() {
        this._pause = false;
    }
    flush() {
        this._flush = true;
    }
    identityHasChanged(identityId) {
        return this._config.identityId !== identityId;
    }
    haveCredentialsChanged(credentials) {
        return (0, _haveCredentialsChangedMjs.haveCredentialsChanged)(this._config.credentials, credentials);
    }
    flushAll() {
        this._putEvents(this._buffer.splice(0, this._buffer.length));
    }
    _startLoop() {
        if (this._interval) clearInterval(this._interval);
        const { flushInterval } = this._config;
        this._interval = setInterval(this._sendBatch, flushInterval);
    }
    _sendBatch() {
        const bufferLength = this._buffer.length;
        if (this._flush && !bufferLength && this._interval) clearInterval(this._interval);
        if (this._pause || !bufferLength || false) return;
        const { flushSize } = this._config;
        const batchSize = Math.min(flushSize, bufferLength);
        const bufferSubset = this._buffer.splice(0, batchSize);
        this._putEvents(bufferSubset);
    }
    async _putEvents(buffer) {
        const eventMap = this._bufferToMap(buffer);
        const batchEventParams = this._generateBatchEventParams(eventMap);
        try {
            const { credentials, region, userAgentValue } = this._config;
            const data = await (0, _putEventsMjs.putEvents)({
                credentials,
                region,
                userAgentValue
            }, batchEventParams);
            this._processPutEventsSuccessResponse(data, eventMap);
        } catch (err) {
            this._handlePutEventsFailure(err, eventMap);
        }
    }
    _generateBatchEventParams(eventMap) {
        const batchItem = {};
        Object.values(eventMap).forEach((item)=>{
            const { event, timestamp, endpointId, eventId, session } = item;
            const { name, attributes, metrics } = event;
            batchItem[endpointId] = {
                Endpoint: {
                    ...batchItem[endpointId]?.Endpoint
                },
                Events: {
                    ...batchItem[endpointId]?.Events,
                    [eventId]: {
                        EventType: name,
                        Timestamp: new Date(timestamp).toISOString(),
                        Attributes: attributes,
                        Metrics: metrics,
                        Session: session
                    }
                }
            };
        });
        return {
            ApplicationId: this._config.appId,
            EventsRequest: {
                BatchItem: batchItem
            }
        };
    }
    _handlePutEventsFailure(err, eventMap) {
        logger.debug('putEvents call to Pinpoint failed.', err);
        const statusCode = err.$metadata && err.$metadata.httpStatusCode;
        if (RETRYABLE_CODES.includes(statusCode)) {
            const retryableEvents = Object.values(eventMap);
            this._retry(retryableEvents);
        }
    }
    _processPutEventsSuccessResponse(data, eventMap) {
        const { Results = {} } = data.EventsResponse ?? {};
        const retryableEvents = [];
        Object.entries(Results).forEach(([_, endpointValues])=>{
            const responses = endpointValues.EventsItemResponse ?? {};
            Object.entries(responses).forEach(([eventId, eventValues])=>{
                const eventObject = eventMap[eventId];
                if (!eventObject) return;
                const { StatusCode, Message } = eventValues ?? {};
                if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) return;
                if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {
                    retryableEvents.push(eventObject);
                    return;
                }
                const { name } = eventObject.event;
                logger.warn('Pinpoint event failed to send.', {
                    eventId,
                    name,
                    message: Message
                });
            });
        });
        if (retryableEvents.length) this._retry(retryableEvents);
    }
    _retry(retryableEvents) {
        // retryable events that haven't reached the resendLimit
        const eligibleEvents = [];
        retryableEvents.forEach((bufferedEvent)=>{
            const { eventId } = bufferedEvent;
            const { name } = bufferedEvent.event;
            if (bufferedEvent.resendLimit-- > 0) {
                logger.debug('Resending event.', {
                    eventId,
                    name,
                    remainingAttempts: bufferedEvent.resendLimit
                });
                eligibleEvents.push({
                    [eventId]: bufferedEvent
                });
                return;
            }
            logger.debug('No retry attempts remaining for event.', {
                eventId,
                name
            });
        });
        // add the events to the front of the buffer
        this._buffer.unshift(...eligibleEvents);
    }
    _bufferToMap(buffer) {
        return buffer.reduce((acc, curVal)=>{
            const [[key, value]] = Object.entries(curVal);
            acc[key] = value;
            return acc;
        }, {});
    }
}

},{"../../../Logger/ConsoleLogger.mjs":"dnAuQ","../../../types/errors.mjs":"4wxZl","../../../errors/errorHelpers.mjs":"6kl5J","../../../utils/getClientInfo/getClientInfo.mjs":"gZWZH","../../../utils/retry/retry.mjs":"apIO9","../../../parseAWSExports.mjs":"jOmdm","uuid":"f1qTK","../../../singleton/Auth/utils/errorHelpers.mjs":"juuoT","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../../../utils/haveCredentialsChanged.mjs":"bw4Pu","../../../Platform/index.mjs":"kdTt1","../../../Platform/types.mjs":"4dWla","../../../BackgroundProcessManager/types.mjs":"8jG07","../../../Reachability/Reachability.mjs":"d55uC","../../../Hub/index.mjs":"cN8sN","../../../utils/sessionListener/index.mjs":"9sYmd","../../../awsClients/pinpoint/putEvents.mjs":"aViAt","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bw4Pu":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Utility for determining if credentials have changed.
 *
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "haveCredentialsChanged", ()=>haveCredentialsChanged);
const haveCredentialsChanged = (cachedCredentials, credentials)=>{
    return cachedCredentials.accessKeyId !== credentials.accessKeyId || cachedCredentials.sessionToken !== credentials.sessionToken || cachedCredentials.secretAccessKey !== credentials.secretAccessKey;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aViAt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "putEvents", ()=>putEvents);
var _authenticatedMjs = require("../../clients/handlers/aws/authenticated.mjs");
var _composeServiceApiMjs = require("../../clients/internal/composeServiceApi.mjs");
var _extendedEncodeURIComponentMjs = require("../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs");
var _responseInfoMjs = require("../../clients/serde/responseInfo.mjs");
var _jsonMjs = require("../../clients/serde/json.mjs");
var _indexMjs = require("../../utils/amplifyUrl/index.mjs");
var _baseMjs = require("./base.mjs");
var _errorHelpersMjs = require("./errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const putEventsSerializer = ({ ApplicationId, EventsRequest }, endpoint)=>{
    (0, _errorHelpersMjs.assert)(!!ApplicationId, (0, _errorHelpersMjs.PinpointValidationErrorCode).NoAppId);
    const headers = (0, _baseMjs.getSharedHeaders)();
    const url = new (0, _indexMjs.AmplifyUrl)(endpoint.url);
    url.pathname = `v1/apps/${(0, _extendedEncodeURIComponentMjs.extendedEncodeURIComponent)(ApplicationId)}/events`;
    const body = JSON.stringify(EventsRequest ?? {});
    return {
        method: 'POST',
        headers,
        url,
        body
    };
};
const putEventsDeserializer = async (response)=>{
    if (response.statusCode >= 300) {
        const error = await (0, _jsonMjs.parseJsonError)(response);
        throw error;
    } else {
        const { Results } = await (0, _jsonMjs.parseJsonBody)(response);
        return {
            EventsResponse: {
                Results
            },
            $metadata: (0, _responseInfoMjs.parseMetadata)(response)
        };
    }
};
/**
 * @internal
 */ const putEvents = (0, _composeServiceApiMjs.composeServiceApi)((0, _authenticatedMjs.authenticatedHandler), putEventsSerializer, putEventsDeserializer, (0, _baseMjs.defaultConfig));

},{"../../clients/handlers/aws/authenticated.mjs":"5QBw2","../../clients/internal/composeServiceApi.mjs":"4yvCA","../../clients/middleware/signing/utils/extendedEncodeURIComponent.mjs":"5f64B","../../clients/serde/responseInfo.mjs":"bmNRC","../../clients/serde/json.mjs":"lahjC","../../utils/amplifyUrl/index.mjs":"eZYHY","./base.mjs":"5eaWa","./errorHelpers.mjs":"5uHXq","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7CsEe":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateEndpointException", ()=>UpdateEndpointException);
var UpdateEndpointException;
(function(UpdateEndpointException) {
    UpdateEndpointException["BadRequestException"] = "BadRequestException";
    UpdateEndpointException["ForbiddenException"] = "ForbiddenException";
    UpdateEndpointException["InternalServerErrorException"] = "InternalServerErrorException";
    UpdateEndpointException["MethodNotAllowedException"] = "MethodNotAllowedException";
    UpdateEndpointException["NotFoundException"] = "NotFoundException";
    UpdateEndpointException["PayloadTooLargeException"] = "PayloadTooLargeException";
    UpdateEndpointException["TooManyRequestsException"] = "TooManyRequestsException";
})(UpdateEndpointException || (UpdateEndpointException = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"29DdL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorkerErrorCode", ()=>ServiceWorkerErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _createAssertionFunctionMjs = require("../errors/createAssertionFunction.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _errorHelpersMjs = require("../errors/errorHelpers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var ServiceWorkerErrorCode;
(function(ServiceWorkerErrorCode) {
    ServiceWorkerErrorCode["UndefinedInstance"] = "UndefinedInstance";
    ServiceWorkerErrorCode["UndefinedRegistration"] = "UndefinedRegistration";
    ServiceWorkerErrorCode["Unavailable"] = "Unavailable";
})(ServiceWorkerErrorCode || (ServiceWorkerErrorCode = {}));
const serviceWorkerErrorMap = {
    [ServiceWorkerErrorCode.UndefinedInstance]: {
        message: 'Service Worker instance is undefined.'
    },
    [ServiceWorkerErrorCode.UndefinedRegistration]: {
        message: 'Service Worker registration is undefined.'
    },
    [ServiceWorkerErrorCode.Unavailable]: {
        message: 'Service Worker not available.'
    }
};
const assert = (0, _createAssertionFunctionMjs.createAssertionFunction)(serviceWorkerErrorMap);

},{"../errors/createAssertionFunction.mjs":"23eMH","../types/errors.mjs":"4wxZl","../errors/errorHelpers.mjs":"6kl5J","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dRREz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateRandomString", ()=>(0, _generateRandomStringMjs.generateRandomString));
parcelHelpers.export(exports, "getClientInfo", ()=>(0, _getClientInfoMjs.getClientInfo));
parcelHelpers.export(exports, "isBrowser", ()=>(0, _isBrowserMjs.isBrowser));
parcelHelpers.export(exports, "isWebWorker", ()=>(0, _isWebWorkerMjs.isWebWorker));
parcelHelpers.export(exports, "NonRetryableError", ()=>(0, _nonRetryableErrorMjs.NonRetryableError));
parcelHelpers.export(exports, "isNonRetryableError", ()=>(0, _isNonRetryableErrorMjs.isNonRetryableError));
parcelHelpers.export(exports, "jitteredBackoff", ()=>(0, _jitteredBackoffMjs.jitteredBackoff));
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>(0, _jitteredExponentialRetryMjs.jitteredExponentialRetry));
parcelHelpers.export(exports, "retry", ()=>(0, _retryMjs.retry));
parcelHelpers.export(exports, "urlSafeDecode", ()=>(0, _urlSafeDecodeMjs.urlSafeDecode));
parcelHelpers.export(exports, "urlSafeEncode", ()=>(0, _urlSafeEncodeMjs.urlSafeEncode));
parcelHelpers.export(exports, "deDupeAsyncFunction", ()=>(0, _deDupeAsyncFunctionMjs.deDupeAsyncFunction));
parcelHelpers.export(exports, "isTokenExpired", ()=>(0, _isTokenExpiredMjs.isTokenExpired));
parcelHelpers.export(exports, "parseAWSExports", ()=>(0, _parseAWSExportsMjs.parseAWSExports));
parcelHelpers.export(exports, "isAmplifyOutputs", ()=>(0, _parseAmplifyOutputsMjs.isAmplifyOutputs));
parcelHelpers.export(exports, "parseAmplifyOutputs", ()=>(0, _parseAmplifyOutputsMjs.parseAmplifyOutputs));
parcelHelpers.export(exports, "ADD_OAUTH_LISTENER", ()=>(0, _constantsMjs.ADD_OAUTH_LISTENER));
parcelHelpers.export(exports, "amplifyUuid", ()=>(0, _indexMjs.amplifyUuid));
parcelHelpers.export(exports, "AmplifyUrl", ()=>(0, _indexMjs1.AmplifyUrl));
parcelHelpers.export(exports, "AmplifyUrlSearchParams", ()=>(0, _indexMjs1.AmplifyUrlSearchParams));
parcelHelpers.export(exports, "parseAmplifyConfig", ()=>(0, _parseAmplifyConfigMjs.parseAmplifyConfig));
parcelHelpers.export(exports, "getDeviceName", ()=>(0, _getDeviceNameMjs.getDeviceName));
parcelHelpers.export(exports, "assertIdentityPoolIdConfig", ()=>(0, _indexMjs2.assertIdentityPoolIdConfig));
parcelHelpers.export(exports, "assertOAuthConfig", ()=>(0, _indexMjs2.assertOAuthConfig));
parcelHelpers.export(exports, "assertTokenProviderConfig", ()=>(0, _indexMjs2.assertTokenProviderConfig));
parcelHelpers.export(exports, "decodeJWT", ()=>(0, _indexMjs2.decodeJWT));
parcelHelpers.export(exports, "Signer", ()=>(0, _signerMjs.Signer));
parcelHelpers.export(exports, "haveCredentialsChanged", ()=>(0, _haveCredentialsChangedMjs.haveCredentialsChanged));
parcelHelpers.export(exports, "Platform", ()=>(0, _indexMjs3.Platform));
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>(0, _indexMjs3.getAmplifyUserAgent));
parcelHelpers.export(exports, "getAmplifyUserAgentObject", ()=>(0, _indexMjs3.getAmplifyUserAgentObject));
parcelHelpers.export(exports, "AiAction", ()=>(0, _typesMjs.AiAction));
parcelHelpers.export(exports, "AnalyticsAction", ()=>(0, _typesMjs.AnalyticsAction));
parcelHelpers.export(exports, "ApiAction", ()=>(0, _typesMjs.ApiAction));
parcelHelpers.export(exports, "AuthAction", ()=>(0, _typesMjs.AuthAction));
parcelHelpers.export(exports, "Category", ()=>(0, _typesMjs.Category));
parcelHelpers.export(exports, "DataStoreAction", ()=>(0, _typesMjs.DataStoreAction));
parcelHelpers.export(exports, "Framework", ()=>(0, _typesMjs.Framework));
parcelHelpers.export(exports, "GeoAction", ()=>(0, _typesMjs.GeoAction));
parcelHelpers.export(exports, "InAppMessagingAction", ()=>(0, _typesMjs.InAppMessagingAction));
parcelHelpers.export(exports, "InteractionsAction", ()=>(0, _typesMjs.InteractionsAction));
parcelHelpers.export(exports, "PredictionsAction", ()=>(0, _typesMjs.PredictionsAction));
parcelHelpers.export(exports, "PubSubAction", ()=>(0, _typesMjs.PubSubAction));
parcelHelpers.export(exports, "PushNotificationAction", ()=>(0, _typesMjs.PushNotificationAction));
parcelHelpers.export(exports, "StorageAction", ()=>(0, _typesMjs.StorageAction));
parcelHelpers.export(exports, "setCustomUserAgent", ()=>(0, _customUserAgentMjs.setCustomUserAgent));
parcelHelpers.export(exports, "AmplifyError", ()=>(0, _amplifyErrorMjs.AmplifyError));
parcelHelpers.export(exports, "ApiError", ()=>(0, _apierrorMjs.ApiError));
parcelHelpers.export(exports, "createAssertionFunction", ()=>(0, _createAssertionFunctionMjs.createAssertionFunction));
parcelHelpers.export(exports, "PlatformNotSupportedError", ()=>(0, _platformNotSupportedErrorMjs.PlatformNotSupportedError));
parcelHelpers.export(exports, "AmplifyErrorCode", ()=>(0, _errorsMjs.AmplifyErrorCode));
parcelHelpers.export(exports, "BackgroundProcessManager", ()=>(0, _backgroundProcessManagerMjs.BackgroundProcessManager));
parcelHelpers.export(exports, "Mutex", ()=>(0, _mutexMjs.Mutex));
parcelHelpers.export(exports, "Reachability", ()=>(0, _reachabilityMjs.Reachability));
parcelHelpers.export(exports, "USER_AGENT_HEADER", ()=>(0, _constantsMjs1.USER_AGENT_HEADER));
parcelHelpers.export(exports, "fetchAuthSession", ()=>(0, _fetchAuthSessionMjs.fetchAuthSession));
parcelHelpers.export(exports, "AMPLIFY_SYMBOL", ()=>(0, _indexMjs4.AMPLIFY_SYMBOL));
parcelHelpers.export(exports, "HubInternal", ()=>(0, _indexMjs4.HubInternal));
parcelHelpers.export(exports, "base64Decoder", ()=>(0, _base64DecoderMjs.base64Decoder));
parcelHelpers.export(exports, "base64Encoder", ()=>(0, _base64EncoderMjs.base64Encoder));
parcelHelpers.export(exports, "getCrypto", ()=>(0, _indexMjs5.getCrypto));
parcelHelpers.export(exports, "cryptoSecureRandomInt", ()=>(0, _cryptoSecureRandomIntMjs.cryptoSecureRandomInt));
parcelHelpers.export(exports, "WordArray", ()=>(0, _wordArrayMjs.WordArray));
parcelHelpers.export(exports, "sessionListener", ()=>(0, _indexMjs6.sessionListener));
parcelHelpers.export(exports, "SESSION_START_EVENT", ()=>(0, _constantsMjs2.SESSION_START_EVENT));
parcelHelpers.export(exports, "SESSION_STOP_EVENT", ()=>(0, _constantsMjs2.SESSION_STOP_EVENT));
var _generateRandomStringMjs = require("./utils/generateRandomString.mjs");
var _getClientInfoMjs = require("./utils/getClientInfo/getClientInfo.mjs");
var _isBrowserMjs = require("./utils/isBrowser.mjs");
var _isWebWorkerMjs = require("./utils/isWebWorker.mjs");
var _nonRetryableErrorMjs = require("./utils/retry/NonRetryableError.mjs");
var _isNonRetryableErrorMjs = require("./utils/retry/isNonRetryableError.mjs");
var _jitteredBackoffMjs = require("./utils/retry/jitteredBackoff.mjs");
var _jitteredExponentialRetryMjs = require("./utils/retry/jitteredExponentialRetry.mjs");
var _retryMjs = require("./utils/retry/retry.mjs");
var _urlSafeDecodeMjs = require("./utils/urlSafeDecode.mjs");
var _urlSafeEncodeMjs = require("./utils/urlSafeEncode.mjs");
var _deDupeAsyncFunctionMjs = require("./utils/deDupeAsyncFunction.mjs");
var _isTokenExpiredMjs = require("./utils/isTokenExpired.mjs");
var _parseAWSExportsMjs = require("./parseAWSExports.mjs");
var _parseAmplifyOutputsMjs = require("./parseAmplifyOutputs.mjs");
var _constantsMjs = require("./singleton/constants.mjs");
var _indexMjs = require("./utils/amplifyUuid/index.mjs");
var _indexMjs1 = require("./utils/amplifyUrl/index.mjs");
var _parseAmplifyConfigMjs = require("./utils/parseAmplifyConfig.mjs");
var _getDeviceNameMjs = require("./utils/deviceName/getDeviceName.mjs");
var _indexMjs2 = require("./singleton/Auth/utils/index.mjs");
var _signerMjs = require("./Signer/Signer.mjs");
var _haveCredentialsChangedMjs = require("./utils/haveCredentialsChanged.mjs");
var _indexMjs3 = require("./Platform/index.mjs");
var _typesMjs = require("./Platform/types.mjs");
var _customUserAgentMjs = require("./Platform/customUserAgent.mjs");
var _amplifyErrorMjs = require("./errors/AmplifyError.mjs");
var _apierrorMjs = require("./errors/APIError.mjs");
var _createAssertionFunctionMjs = require("./errors/createAssertionFunction.mjs");
var _platformNotSupportedErrorMjs = require("./errors/PlatformNotSupportedError.mjs");
var _errorHelpersMjs = require("./errors/errorHelpers.mjs");
var _errorsMjs = require("./types/errors.mjs");
var _backgroundProcessManagerMjs = require("./BackgroundProcessManager/BackgroundProcessManager.mjs");
var _mutexMjs = require("./Mutex/Mutex.mjs");
var _reachabilityMjs = require("./Reachability/Reachability.mjs");
var _constantsMjs1 = require("./constants.mjs");
var _fetchAuthSessionMjs = require("./singleton/apis/internal/fetchAuthSession.mjs");
var _indexMjs4 = require("./Hub/index.mjs");
var _base64DecoderMjs = require("./utils/convert/base64/base64Decoder.mjs");
var _base64EncoderMjs = require("./utils/convert/base64/base64Encoder.mjs");
var _indexMjs5 = require("./utils/globalHelpers/index.mjs");
var _cryptoSecureRandomIntMjs = require("./utils/cryptoSecureRandomInt.mjs");
var _wordArrayMjs = require("./utils/WordArray.mjs");
var _indexMjs6 = require("./utils/sessionListener/index.mjs");
var _constantsMjs2 = require("./utils/sessionListener/constants.mjs");

},{"./utils/generateRandomString.mjs":"iombf","./utils/getClientInfo/getClientInfo.mjs":"gZWZH","./utils/isBrowser.mjs":"93TiA","./utils/isWebWorker.mjs":"8aVSr","./utils/retry/NonRetryableError.mjs":"auQNS","./utils/retry/isNonRetryableError.mjs":"fr0Zr","./utils/retry/jitteredBackoff.mjs":"eQdBr","./utils/retry/jitteredExponentialRetry.mjs":"dLKKM","./utils/retry/retry.mjs":"apIO9","./utils/urlSafeDecode.mjs":"aMZpK","./utils/urlSafeEncode.mjs":"3UQGw","./utils/deDupeAsyncFunction.mjs":"dr4Ui","./utils/isTokenExpired.mjs":"804eV","./parseAWSExports.mjs":"jOmdm","./parseAmplifyOutputs.mjs":"bKNwZ","./singleton/constants.mjs":"eR9Tg","./utils/amplifyUuid/index.mjs":"j50Jv","./utils/amplifyUrl/index.mjs":"eZYHY","./utils/parseAmplifyConfig.mjs":"6LVoV","./utils/deviceName/getDeviceName.mjs":"3qwF9","./singleton/Auth/utils/index.mjs":"jzax8","./Signer/Signer.mjs":"6ohba","./utils/haveCredentialsChanged.mjs":"bw4Pu","./Platform/index.mjs":"kdTt1","./Platform/types.mjs":"4dWla","./Platform/customUserAgent.mjs":"dwiQF","./errors/AmplifyError.mjs":"G8oLh","./errors/APIError.mjs":"j7Qcj","./errors/createAssertionFunction.mjs":"23eMH","./errors/PlatformNotSupportedError.mjs":"5GpZj","./errors/errorHelpers.mjs":"6kl5J","./types/errors.mjs":"4wxZl","./BackgroundProcessManager/BackgroundProcessManager.mjs":"iMg4Y","./Mutex/Mutex.mjs":"3dWM7","./Reachability/Reachability.mjs":"d55uC","./constants.mjs":"dq3x2","./singleton/apis/internal/fetchAuthSession.mjs":"aRdEx","./Hub/index.mjs":"cN8sN","./utils/convert/base64/base64Decoder.mjs":"gEkly","./utils/convert/base64/base64Encoder.mjs":"kcpSz","./utils/globalHelpers/index.mjs":"kMIha","./utils/cryptoSecureRandomInt.mjs":"03GWz","./utils/WordArray.mjs":"3l3wM","./utils/sessionListener/index.mjs":"9sYmd","./utils/sessionListener/constants.mjs":"7PHU6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iombf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateRandomString", ()=>generateRandomString);
var _indexMjs = require("./globalHelpers/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const generateRandomString = (length)=>{
    const STATE_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    const result = [];
    const randomNums = new Uint8Array(length);
    (0, _indexMjs.getCrypto)().getRandomValues(randomNums);
    for (const num of randomNums)result.push(STATE_CHARSET[num % STATE_CHARSET.length]);
    return result.join('');
};

},{"./globalHelpers/index.mjs":"kMIha","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"auQNS":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NonRetryableError", ()=>NonRetryableError);
class NonRetryableError extends Error {
    constructor(){
        super(...arguments);
        this.nonRetryable = true;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dLKKM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>jitteredExponentialRetry);
var _constantsMjs = require("./constants.mjs");
var _jitteredBackoffMjs = require("./jitteredBackoff.mjs");
var _retryMjs = require("./retry.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @private
 * Internal use of Amplify only
 */ const jitteredExponentialRetry = (functionToRetry, args, maxDelayMs = (0, _constantsMjs.MAX_DELAY_MS), onTerminate)=>(0, _retryMjs.retry)(functionToRetry, args, (0, _jitteredBackoffMjs.jitteredBackoff)(maxDelayMs), onTerminate);

},{"./constants.mjs":"8l6Vr","./jitteredBackoff.mjs":"eQdBr","./retry.mjs":"apIO9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aMZpK":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlSafeDecode", ()=>urlSafeDecode);
function urlSafeDecode(hex) {
    const matchArr = hex.match(/.{2}/g) || [];
    return matchArr.map((char)=>String.fromCharCode(parseInt(char, 16))).join('');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3UQGw":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlSafeEncode", ()=>urlSafeEncode);
function urlSafeEncode(str) {
    return str.split('').map((char)=>char.charCodeAt(0).toString(16).padStart(2, '0')).join('');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dr4Ui":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * returns in-flight promise if there is one
 *
 * @param asyncFunction - asyncFunction to be deduped.
 * @returns - the return type of the callback
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deDupeAsyncFunction", ()=>deDupeAsyncFunction);
const deDupeAsyncFunction = (asyncFunction)=>{
    let inflightPromise;
    return async (...args)=>{
        if (inflightPromise) return inflightPromise;
        inflightPromise = new Promise((resolve, reject)=>{
            asyncFunction(...args).then((result)=>{
                resolve(result);
            }).catch((error)=>{
                reject(error);
            }).finally(()=>{
                inflightPromise = undefined;
            });
        });
        return inflightPromise;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"804eV":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isTokenExpired", ()=>isTokenExpired);
function isTokenExpired({ expiresAt, clockDrift, tolerance = 5000 }) {
    const currentTime = Date.now();
    return currentTime + clockDrift + tolerance > expiresAt;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3qwF9":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Retrieves the device name using the User-Agent Client Hints API if available,
 * falling back to the traditional userAgent string if not.
 *
 * @returns {Promise<string>} A promise that resolves with a string representing the device name.
 *
 * Example Output:
 * navigator.userAgentData:
 *   'macOS 14.2.1 arm macOS Not A(Brand/99.0.0.0;Google Chrome/121.0.6167.160;Chromium/121.0.6167.160'
 * navigator.userAgent:
 *   'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0'
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDeviceName", ()=>getDeviceName);
const getDeviceName = async ()=>{
    const { userAgentData } = navigator;
    if (!userAgentData) return navigator.userAgent;
    const { platform = '', platformVersion = '', model = '', architecture = '', fullVersionList = [] } = await userAgentData.getHighEntropyValues([
        'platform',
        'platformVersion',
        'architecture',
        'model',
        'fullVersionList'
    ]);
    const versionList = fullVersionList.map((v)=>`${v.brand}/${v.version}`).join(';');
    const deviceName = [
        platform,
        platformVersion,
        architecture,
        model,
        platform,
        versionList
    ].filter((value)=>value).join(' ');
    return deviceName || navigator.userAgent;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6ohba":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Signer", ()=>Signer);
var _signRequestMjs = require("../clients/middleware/signing/signer/signatureV4/signRequest.mjs");
var _presignUrlMjs = require("../clients/middleware/signing/signer/signatureV4/presignUrl.mjs");
var _constantsMjs = require("../clients/middleware/signing/signer/signatureV4/constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _utilHexEncoding = require("@smithy/util-hex-encoding");
var _indexMjs = require("../utils/amplifyUrl/index.mjs");
var _dateUtilsMjs = require("./DateUtils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const IOT_SERVICE_NAME = 'iotdevicegateway';
// Best practice regex to parse the service and region from an AWS endpoint
const AWS_ENDPOINT_REGEX = /([^.]+)\.(?:([^.]*)\.)?amazonaws\.com(.cn)?$/;
/**
 * This class is intended to be deprecated and replaced by `signRequest` and `presignUrl` functions from
 * `clients/middleware/signing/signer/signatureV4`.
 *
 * TODO: refactor the logics here into `signRequest` and `presignUrl` functions and remove this class.
 *
 * @internal
 * @deprecated
 */ class Signer {
    /**
    * Sign a HTTP request, add 'Authorization' header to request param
    * @method sign
    * @memberof Signer
    * @static
    *
    * @param {object} request - HTTP request object
    <pre>
    request: {
        method: GET | POST | PUT ...
        url: ...,
        headers: {
            header1: ...
        },
        data: data
    }
    </pre>
    * @param {object} access_info - AWS access credential info
    <pre>
    access_info: {
        access_key: ...,
        secret_key: ...,
        session_token: ...
    }
    </pre>
    * @param {object} [service_info] - AWS service type and region, optional,
    *                                  if not provided then parse out from url
    <pre>
    service_info: {
        service: ...,
        region: ...
    }
    </pre>
    *
    * @returns {object} Signed HTTP request
    */ static sign(request, accessInfo, serviceInfo) {
        request.headers = request.headers || {};
        if (request.body && !request.data) throw new Error('The attribute "body" was found on the request object. Please use the attribute "data" instead.');
        const requestToSign = {
            ...request,
            body: request.data,
            url: new (0, _indexMjs.AmplifyUrl)(request.url)
        };
        const options = getOptions(requestToSign, accessInfo, serviceInfo);
        const signedRequest = (0, _signRequestMjs.signRequest)(requestToSign, options);
        // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property
        // back to a string so as not to disrupt consumers of Signer.
        signedRequest.url = signedRequest.url.toString();
        // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and
        // limit the impact of this implementation swap, replace lowercased headers with title cased ones.
        signedRequest.headers.Authorization = signedRequest.headers.authorization;
        signedRequest.headers['X-Amz-Security-Token'] = signedRequest.headers['x-amz-security-token'];
        delete signedRequest.headers.authorization;
        delete signedRequest.headers['x-amz-security-token'];
        return signedRequest;
    }
    static signUrl(urlOrRequest, accessInfo, serviceInfo, expiration) {
        const urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;
        const method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';
        const body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;
        const presignable = {
            body,
            method,
            url: new (0, _indexMjs.AmplifyUrl)(urlToSign)
        };
        const options = getOptions(presignable, accessInfo, serviceInfo, expiration);
        const signedUrl = (0, _presignUrlMjs.presignUrl)(presignable, options);
        if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) signedUrl.searchParams.append((0, _constantsMjs.TOKEN_QUERY_PARAM), accessInfo.session_token);
        return signedUrl.toString();
    }
}
const getOptions = (request, accessInfo, serviceInfo, expiration)=>{
    const { access_key, secret_key, session_token } = accessInfo ?? {};
    const { region: urlRegion, service: urlService } = parseServiceInfo(request.url);
    const { region = urlRegion, service = urlService } = serviceInfo ?? {};
    const credentials = {
        accessKeyId: access_key,
        secretAccessKey: secret_key,
        ...sessionTokenRequiredInSigning(service) ? {
            sessionToken: session_token
        } : {}
    };
    return {
        credentials,
        signingDate: (0, _dateUtilsMjs.DateUtils).getDateWithClockOffset(),
        signingRegion: region,
        signingService: service,
        ...expiration && {
            expiration
        }
    };
};
const parseServiceInfo = (url)=>{
    const { host } = url;
    const matched = host.match(AWS_ENDPOINT_REGEX) ?? [];
    let parsed = matched.slice(1, 3);
    if (parsed[1] === 'es') // Elastic Search
    parsed = parsed.reverse();
    return {
        service: parsed[0],
        region: parsed[1]
    };
};
// IoT service does not allow the session token in the canonical request
// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html
const sessionTokenRequiredInSigning = (service)=>service !== IOT_SERVICE_NAME;

},{"../clients/middleware/signing/signer/signatureV4/signRequest.mjs":"jCQnb","../clients/middleware/signing/signer/signatureV4/presignUrl.mjs":"3NysQ","../clients/middleware/signing/signer/signatureV4/constants.mjs":"8HTv9","@aws-crypto/sha256-js":"7twCg","@smithy/util-hex-encoding":"6gSS1","../utils/amplifyUrl/index.mjs":"eZYHY","./DateUtils.mjs":"9fFvX","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3NysQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "presignUrl", ()=>presignUrl);
var _indexMjs = require("../../../../../utils/amplifyUrl/index.mjs");
var _constantsMjs = require("./constants.mjs");
var _getSigningValuesMjs = require("./utils/getSigningValues.mjs");
var _getSignatureMjs = require("./utils/getSignature.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.
 *
 * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.
 * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.
 * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.
 */ const presignUrl = ({ body, method = 'GET', url }, { expiration, ...options })=>{
    const signingValues = (0, _getSigningValuesMjs.getSigningValues)(options);
    const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;
    // create the request to sign
    const presignedUrl = new (0, _indexMjs.AmplifyUrl)(url);
    Object.entries({
        [(0, _constantsMjs.ALGORITHM_QUERY_PARAM)]: (0, _constantsMjs.SHA256_ALGORITHM_IDENTIFIER),
        [(0, _constantsMjs.CREDENTIAL_QUERY_PARAM)]: `${accessKeyId}/${credentialScope}`,
        [(0, _constantsMjs.AMZ_DATE_QUERY_PARAM)]: longDate,
        [(0, _constantsMjs.SIGNED_HEADERS_QUERY_PARAM)]: (0, _constantsMjs.HOST_HEADER),
        ...expiration && {
            [(0, _constantsMjs.EXPIRES_QUERY_PARAM)]: expiration.toString()
        },
        ...sessionToken && {
            [(0, _constantsMjs.TOKEN_QUERY_PARAM)]: sessionToken
        }
    }).forEach(([key, value])=>{
        presignedUrl.searchParams.append(key, value);
    });
    const requestToSign = {
        body,
        headers: {
            [(0, _constantsMjs.HOST_HEADER)]: url.host
        },
        method,
        url: presignedUrl
    };
    // calculate and add the signature to the url
    const signature = (0, _getSignatureMjs.getSignature)(requestToSign, signingValues);
    presignedUrl.searchParams.append((0, _constantsMjs.SIGNATURE_QUERY_PARAM), signature);
    return presignedUrl;
};

},{"../../../../../utils/amplifyUrl/index.mjs":"eZYHY","./constants.mjs":"8HTv9","./utils/getSigningValues.mjs":"6HH9G","./utils/getSignature.mjs":"lBb59","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9fFvX":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Date & time utility functions to abstract the `aws-sdk` away from users.
 * (v2 => v3 modularization is a breaking change)
 *
 * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DateUtils", ()=>DateUtils);
const FIVE_MINUTES_IN_MS = 300000;
/**
 * This utility is intended to be deprecated and replaced by `signRequest` and `presignUrl` functions from
 * `clients/middleware/signing/signer/signatureV4`.
 *
 * TODO: refactor the logics here into `signRequest` and `presignUrl` functions and remove this class.
 *
 * @internal
 * @deprecated
 */ const DateUtils = {
    /**
     * Milliseconds to offset the date to compensate for clock skew between device & services
     */ clockOffset: 0,
    getDateWithClockOffset () {
        if (DateUtils.clockOffset) return new Date(new Date().getTime() + DateUtils.clockOffset);
        else return new Date();
    },
    /**
     * @returns {number} Clock offset in milliseconds
     */ getClockOffset () {
        return DateUtils.clockOffset;
    },
    getHeaderStringFromDate (date = DateUtils.getDateWithClockOffset()) {
        return date.toISOString().replace(/[:-]|\.\d{3}/g, '');
    },
    getDateFromHeaderString (header) {
        const [, year, month, day, hour, minute, second] = header.match(/^(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2}).+/);
        return new Date(Date.UTC(Number(year), Number(month) - 1, Number(day), Number(hour), Number(minute), Number(second)));
    },
    isClockSkewed (serverDate) {
        // API gateway permits client calls that are off by no more than ±5 minutes
        return Math.abs(serverDate.getTime() - DateUtils.getDateWithClockOffset().getTime()) >= FIVE_MINUTES_IN_MS;
    },
    isClockSkewError (error) {
        if (!error.response || !error.response.headers) return false;
        const { headers } = error.response;
        return Boolean([
            'BadRequestException',
            'InvalidSignatureException'
        ].includes(headers['x-amzn-errortype']) && (headers.date || headers.Date));
    },
    /**
     * @param {number} offset Clock offset in milliseconds
     */ setClockOffset (offset) {
        DateUtils.clockOffset = offset;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"j7Qcj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ApiError", ()=>ApiError);
var _amplifyErrorMjs = require("./AmplifyError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Error class for errors that associated with unsuccessful HTTP responses.
 * It's throw by API category REST API handlers and GraphQL query handlers for now.
 */ class ApiError extends (0, _amplifyErrorMjs.AmplifyError) {
    /**
     * The unwrapped HTTP response causing the given API error.
     */ get response() {
        return this._response ? replicateApiErrorResponse(this._response) : undefined;
    }
    constructor(params){
        super(params);
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = ApiError;
        Object.setPrototypeOf(this, ApiError.prototype);
        if (params.response) this._response = params.response;
    }
}
const replicateApiErrorResponse = (response)=>({
        ...response,
        headers: {
            ...response.headers
        }
    });

},{"./AmplifyError.mjs":"G8oLh","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iMg4Y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackgroundProcessManager", ()=>BackgroundProcessManager);
var _backgroundManagerNotOpenErrorMjs = require("./BackgroundManagerNotOpenError.mjs");
var _typesMjs = require("./types.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @private For internal Amplify use.
 *
 * Creates a new scope for promises, observables, and other types of work or
 * processes that may be running in the background. This manager provides
 * an singular entrypoint to request termination and await completion.
 *
 * As work completes on its own prior to close, the manager removes them
 * from the registry to avoid holding references to completed jobs.
 */ class BackgroundProcessManager {
    constructor(){
        /**
         * A string indicating whether the manager is accepting new work ("Open"),
         * waiting for work to complete ("Closing"), or fully done with all
         * submitted work and *not* accepting new jobs ("Closed").
         */ this._state = (0, _typesMjs.BackgroundProcessManagerState).Open;
        /**
         * The list of outstanding jobs we'll need to wait for upon `close()`
         */ this.jobs = new Set();
    }
    add(jobOrDescription, optionalDescription) {
        let job;
        let description;
        if (typeof jobOrDescription === 'string') {
            job = undefined;
            description = jobOrDescription;
        } else {
            job = jobOrDescription;
            description = optionalDescription;
        }
        const error = this.closedFailure(description);
        if (error) return error;
        if (job === undefined) return this.addHook(description);
        else if (typeof job === 'function') return this.addFunction(job, description);
        else if (job instanceof BackgroundProcessManager) this.addManager(job, description);
        else throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');
    }
    /**
     * Adds a **cleaner** function that doesn't immediately get executed.
     * Instead, the caller gets a **terminate** function back. The *cleaner* is
     * invoked only once the mananger *closes* or the returned **terminate**
     * function is called.
     *
     * @param clean The cleanup function.
     * @param description Optional description to help identify pending jobs.
     * @returns A terminate function.
     */ addCleaner(clean, description) {
        const { resolve, onTerminate } = this.addHook(description);
        const proxy = async ()=>{
            await clean();
            resolve();
        };
        onTerminate.then(proxy);
        return proxy;
    }
    addFunction(job, description) {
        // the function we call when we want to try to terminate this job.
        let terminate;
        // the promise the job can opt into listening to for termination.
        const onTerminate = new Promise((resolve)=>{
            terminate = resolve;
        });
        // finally! start the job.
        const jobResult = job(onTerminate);
        // depending on what the job gives back, register the result
        // so we can monitor for completion.
        if (typeof jobResult?.then === 'function') this.registerPromise(jobResult, terminate, description);
        // At the end of the day, or you know, method call, it doesn't matter
        // what the return value is at all; we just pass it through to the
        // caller.
        return jobResult;
    }
    addManager(manager, description) {
        this.addCleaner(async ()=>manager.close(), description);
    }
    /**
     * Creates and registers a fabricated job for processes that need to operate
     * with callbacks/hooks. The returned `resolve` and `reject`
     * functions can be used to signal the job is done successfully or not.
     * The returned `onTerminate` is a promise that will resolve when the
     * manager is requesting the termination of the job.
     *
     * @param description Optional description to help identify pending jobs.
     * @returns `{ resolve, reject, onTerminate }`
     */ addHook(description) {
        // the resolve/reject functions we'll provide to the caller to signal
        // the state of the job.
        let promiseResolve;
        let promiseReject;
        // the underlying promise we'll use to manage it, pretty much like
        // any other promise.
        const promise = new Promise((resolve, reject)=>{
            promiseResolve = resolve;
            promiseReject = reject;
        });
        // the function we call when we want to try to terminate this job.
        let terminate;
        // the promise the job can opt into listening to for termination.
        const onTerminate = new Promise((resolve)=>{
            terminate = resolve;
        });
        this.registerPromise(promise, terminate, description);
        return {
            resolve: promiseResolve,
            reject: promiseReject,
            onTerminate
        };
    }
    /**
     * Adds a Promise based job to the list of jobs for monitoring and listens
     * for either a success or failure, upon which the job is considered "done"
     * and removed from the registry.
     *
     * @param promise A promise that is on its way to being returned to a
     * caller, which needs to be tracked as a background job.
     * @param terminate The termination function to register, which can be
     * invoked to request the job stop.
     * @param description Optional description to help identify pending jobs.
     */ registerPromise(promise, terminate, description) {
        const jobEntry = {
            promise,
            terminate,
            description
        };
        this.jobs.add(jobEntry);
        // in all of my testing, it is safe to multi-subscribe to a promise.
        // so, rather than create another layer of promising, we're just going
        // to hook into the promise we already have, and when it's done
        // (successfully or not), we no longer need to wait for it upon close.
        //
        // sorry this is a bit hand-wavy:
        //
        // i believe we use `.then` and `.catch` instead of `.finally` because
        // `.finally` is invoked in a different order in the sequence, and this
        // breaks assumptions throughout and causes failures.
        promise.then(()=>{
            this.jobs.delete(jobEntry);
        }).catch(()=>{
            this.jobs.delete(jobEntry);
        });
    }
    /**
     * The number of jobs being waited on.
     *
     * We don't use this for anything. It's just informational for the caller,
     * and can be used in logging and testing.
     *
     * @returns the number of jobs.
     */ get length() {
        return this.jobs.size;
    }
    /**
     * The execution state of the manager. One of:
     *
     * 1. "Open" -> Accepting new jobs
     * 1. "Closing" -> Not accepting new work. Waiting for jobs to complete.
     * 1. "Closed" -> Not accepting new work. All submitted jobs are complete.
     */ get state() {
        return this._state;
    }
    /**
     * The registered `description` of all still-pending jobs.
     *
     * @returns descriptions as an array.
     */ get pending() {
        return Array.from(this.jobs).map((job)=>job.description);
    }
    /**
     * Whether the manager is accepting new jobs.
     */ get isOpen() {
        return this._state === (0, _typesMjs.BackgroundProcessManagerState).Open;
    }
    /**
     * Whether the manager is rejecting new work, but still waiting for
     * submitted work to complete.
     */ get isClosing() {
        return this._state === (0, _typesMjs.BackgroundProcessManagerState).Closing;
    }
    /**
     * Whether the manager is rejecting work and done waiting for submitted
     * work to complete.
     */ get isClosed() {
        return this._state === (0, _typesMjs.BackgroundProcessManagerState).Closed;
    }
    closedFailure(description) {
        if (!this.isOpen) return Promise.reject(new (0, _backgroundManagerNotOpenErrorMjs.BackgroundManagerNotOpenError)([
            `The manager is ${this.state}.`,
            `You tried to add "${description}".`,
            `Pending jobs: [\n${this.pending.map((t)=>'    ' + t).join(',\n')}\n]`
        ].join('\n')));
    }
    /**
     * Signals jobs to stop (for those that accept interruptions) and waits
     * for confirmation that jobs have stopped.
     *
     * This immediately puts the manager into a closing state and just begins
     * to reject new work. After all work in the manager is complete, the
     * manager goes into a `Completed` state and `close()` returns.
     *
     * This call is idempotent.
     *
     * If the manager is already closing or closed, `finalCleaup` is not executed.
     *
     * @param onClosed
     * @returns The settled results of each still-running job's promise. If the
     * manager is already closed, this will contain the results as of when the
     * manager's `close()` was called in an `Open` state.
     */ async close() {
        if (this.isOpen) {
            this._state = (0, _typesMjs.BackgroundProcessManagerState).Closing;
            for (const job of Array.from(this.jobs))try {
                job.terminate();
            } catch (error) {
                // Due to potential races with a job's natural completion, it's
                // reasonable to expect the termination call to fail. Hence,
                // not logging as an error.
                // eslint-disable-next-line no-console
                console.warn(`Failed to send termination signal to job. Error: ${error.message}`, job);
            }
            // Use `allSettled()` because we want to wait for all to finish. We do
            // not want to stop waiting if there is a failure.
            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map((j)=>j.promise));
            await this._closingPromise;
            this._state = (0, _typesMjs.BackgroundProcessManagerState).Closed;
        }
        return this._closingPromise;
    }
    /**
     * Signals the manager to start accepting work (again) and returns once
     * the manager is ready to do so.
     *
     * If the state is already `Open`, this call is a no-op.
     *
     * If the state is `Closed`, this call simply updates state and returns.
     *
     * If the state is `Closing`, this call waits for completion before it
     * updates the state and returns.
     */ async open() {
        if (this.isClosing) await this.close();
        this._state = (0, _typesMjs.BackgroundProcessManagerState).Open;
    }
}

},{"./BackgroundManagerNotOpenError.mjs":"b206I","./types.mjs":"8jG07","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"b206I":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackgroundManagerNotOpenError", ()=>BackgroundManagerNotOpenError);
class BackgroundManagerNotOpenError extends Error {
    constructor(message){
        super(`BackgroundManagerNotOpenError: ${message}`);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3dWM7":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/*!
 * The MIT License (MIT)
 *
 * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mutex", ()=>Mutex);
class Mutex {
    constructor(){
        this._queue = [];
        this._pending = false;
    }
    isLocked() {
        return this._pending;
    }
    acquire() {
        const ticket = new Promise((resolve)=>this._queue.push(resolve));
        if (!this._pending) this._dispatchNext();
        return ticket;
    }
    runExclusive(callback) {
        return this.acquire().then((release)=>{
            let result;
            try {
                result = callback();
            } catch (e) {
                release();
                throw e;
            }
            return Promise.resolve(result).then((x)=>{
                release();
                return x;
            }, (e)=>{
                release();
                throw e;
            });
        });
    }
    _dispatchNext() {
        if (this._queue.length > 0) {
            this._pending = true;
            this._queue.shift()(this._dispatchNext.bind(this));
        } else this._pending = false;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kcpSz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "base64Encoder", ()=>base64Encoder);
var _indexMjs = require("../../globalHelpers/index.mjs");
var _bytesToStringMjs = require("./bytesToString.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const base64Encoder = {
    /**
     * Convert input to base64-encoded string
     * @param input - string to convert to base64
     * @param options - encoding options that can optionally produce a base64url string
     * @returns base64-encoded string
     */ convert (input, options = {
        urlSafe: false,
        skipPadding: false
    }) {
        const inputStr = typeof input === 'string' ? input : (0, _bytesToStringMjs.bytesToString)(input);
        let encodedStr = (0, _indexMjs.getBtoa)()(inputStr);
        // urlSafe char replacement and skipPadding options conform to the base64url spec
        // https://datatracker.ietf.org/doc/html/rfc4648#section-5
        if (options.urlSafe) encodedStr = encodedStr.replace(/\+/g, '-').replace(/\//g, '_');
        if (options.skipPadding) encodedStr = encodedStr.replace(/=/g, '');
        return encodedStr;
    }
};

},{"../../globalHelpers/index.mjs":"kMIha","./bytesToString.mjs":"7XfAm","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7XfAm":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bytesToString", ()=>bytesToString);
function bytesToString(input) {
    return Array.from(input, (byte)=>String.fromCodePoint(byte)).join('');
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"03GWz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cryptoSecureRandomInt", ()=>cryptoSecureRandomInt);
var _indexMjs = require("./globalHelpers/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/*
 * Cryptographically secure pseudorandom number generator
 * As Math.random() is cryptographically not safe to use
 */ function cryptoSecureRandomInt() {
    const crypto = (0, _indexMjs.getCrypto)();
    const randomResult = crypto.getRandomValues(new Uint32Array(1))[0];
    return randomResult;
}

},{"./globalHelpers/index.mjs":"kMIha","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3l3wM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WordArray", ()=>WordArray);
var _cryptoSecureRandomIntMjs = require("./cryptoSecureRandomInt.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Hex encoding strategy.
 * Converts a word array to a hex string.
 * @param {WordArray} wordArray The word array.
 * @return {string} The hex string.
 * @static
 */ function hexStringify(wordArray) {
    // Shortcuts
    const { words } = wordArray;
    const { sigBytes } = wordArray;
    // Convert
    const hexChars = [];
    for(let i = 0; i < sigBytes; i++){
        const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
    }
    return hexChars.join('');
}
class WordArray {
    constructor(words, sigBytes){
        this.words = [];
        let Words = words;
        Words = this.words = Words || [];
        if (sigBytes !== undefined) this.sigBytes = sigBytes;
        else this.sigBytes = Words.length * 4;
    }
    random(nBytes) {
        const words = [];
        for(let i = 0; i < nBytes; i += 4)words.push((0, _cryptoSecureRandomIntMjs.cryptoSecureRandomInt)());
        return new WordArray(words, nBytes);
    }
    toString() {
        return hexStringify(this);
    }
}

},{"./cryptoSecureRandomInt.mjs":"03GWz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8Zj4n":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signUp", ()=>(0, _signUpMjs.signUp));
parcelHelpers.export(exports, "resetPassword", ()=>(0, _resetPasswordMjs.resetPassword));
parcelHelpers.export(exports, "confirmResetPassword", ()=>(0, _confirmResetPasswordMjs.confirmResetPassword));
parcelHelpers.export(exports, "signIn", ()=>(0, _signInMjs.signIn));
parcelHelpers.export(exports, "resendSignUpCode", ()=>(0, _resendSignUpCodeMjs.resendSignUpCode));
parcelHelpers.export(exports, "confirmSignUp", ()=>(0, _confirmSignUpMjs.confirmSignUp));
parcelHelpers.export(exports, "confirmSignIn", ()=>(0, _confirmSignInMjs.confirmSignIn));
parcelHelpers.export(exports, "updateMFAPreference", ()=>(0, _updateMFAPreferenceMjs.updateMFAPreference));
parcelHelpers.export(exports, "fetchMFAPreference", ()=>(0, _fetchMFAPreferenceMjs.fetchMFAPreference));
parcelHelpers.export(exports, "verifyTOTPSetup", ()=>(0, _verifyTOTPSetupMjs.verifyTOTPSetup));
parcelHelpers.export(exports, "updatePassword", ()=>(0, _updatePasswordMjs.updatePassword));
parcelHelpers.export(exports, "setUpTOTP", ()=>(0, _setUpTOTPMjs.setUpTOTP));
parcelHelpers.export(exports, "updateUserAttributes", ()=>(0, _updateUserAttributesMjs.updateUserAttributes));
parcelHelpers.export(exports, "updateUserAttribute", ()=>(0, _updateUserAttributeMjs.updateUserAttribute));
parcelHelpers.export(exports, "getCurrentUser", ()=>(0, _getCurrentUserMjs.getCurrentUser));
parcelHelpers.export(exports, "confirmUserAttribute", ()=>(0, _confirmUserAttributeMjs.confirmUserAttribute));
parcelHelpers.export(exports, "signInWithRedirect", ()=>(0, _signInWithRedirectMjs.signInWithRedirect));
parcelHelpers.export(exports, "fetchUserAttributes", ()=>(0, _fetchUserAttributesMjs.fetchUserAttributes));
parcelHelpers.export(exports, "signOut", ()=>(0, _signOutMjs.signOut));
parcelHelpers.export(exports, "sendUserAttributeVerificationCode", ()=>(0, _sendUserAttributeVerificationCodeMjs.sendUserAttributeVerificationCode));
parcelHelpers.export(exports, "deleteUserAttributes", ()=>(0, _deleteUserAttributesMjs.deleteUserAttributes));
parcelHelpers.export(exports, "deleteUser", ()=>(0, _deleteUserMjs.deleteUser));
parcelHelpers.export(exports, "rememberDevice", ()=>(0, _rememberDeviceMjs.rememberDevice));
parcelHelpers.export(exports, "forgetDevice", ()=>(0, _forgetDeviceMjs.forgetDevice));
parcelHelpers.export(exports, "fetchDevices", ()=>(0, _fetchDevicesMjs.fetchDevices));
parcelHelpers.export(exports, "autoSignIn", ()=>(0, _autoSignInMjs.autoSignIn));
parcelHelpers.export(exports, "cognitoCredentialsProvider", ()=>(0, _indexMjs.cognitoCredentialsProvider));
parcelHelpers.export(exports, "refreshAuthTokens", ()=>(0, _refreshAuthTokensMjs.refreshAuthTokens));
parcelHelpers.export(exports, "refreshAuthTokensWithoutDedupe", ()=>(0, _refreshAuthTokensMjs.refreshAuthTokensWithoutDedupe));
parcelHelpers.export(exports, "DefaultTokenStore", ()=>(0, _tokenStoreMjs.DefaultTokenStore));
parcelHelpers.export(exports, "createKeysForAuthStorage", ()=>(0, _tokenStoreMjs.createKeysForAuthStorage));
parcelHelpers.export(exports, "TokenOrchestrator", ()=>(0, _tokenOrchestratorMjs.TokenOrchestrator));
parcelHelpers.export(exports, "cognitoUserPoolsTokenProvider", ()=>(0, _tokenProviderMjs.cognitoUserPoolsTokenProvider));
parcelHelpers.export(exports, "AUTH_KEY_PREFIX", ()=>(0, _constantsMjs.AUTH_KEY_PREFIX));
parcelHelpers.export(exports, "generateCodeVerifier", ()=>(0, _generateCodeVerifierMjs.generateCodeVerifier));
parcelHelpers.export(exports, "generateState", ()=>(0, _generateStateMjs.generateState));
parcelHelpers.export(exports, "getRedirectUrl", ()=>(0, _getRedirectUrlMjs.getRedirectUrl));
parcelHelpers.export(exports, "validateState", ()=>(0, _validateStateMjs.validateState));
parcelHelpers.export(exports, "CognitoAWSCredentialsAndIdentityIdProvider", ()=>(0, _credentialsProviderMjs.CognitoAWSCredentialsAndIdentityIdProvider));
parcelHelpers.export(exports, "DefaultIdentityIdStore", ()=>(0, _identityIdStoreMjs.DefaultIdentityIdStore));
var _signUpMjs = require("./apis/signUp.mjs");
var _resetPasswordMjs = require("./apis/resetPassword.mjs");
var _confirmResetPasswordMjs = require("./apis/confirmResetPassword.mjs");
var _signInMjs = require("./apis/signIn.mjs");
var _resendSignUpCodeMjs = require("./apis/resendSignUpCode.mjs");
var _confirmSignUpMjs = require("./apis/confirmSignUp.mjs");
var _confirmSignInMjs = require("./apis/confirmSignIn.mjs");
var _updateMFAPreferenceMjs = require("./apis/updateMFAPreference.mjs");
var _fetchMFAPreferenceMjs = require("./apis/fetchMFAPreference.mjs");
var _verifyTOTPSetupMjs = require("./apis/verifyTOTPSetup.mjs");
var _updatePasswordMjs = require("./apis/updatePassword.mjs");
var _setUpTOTPMjs = require("./apis/setUpTOTP.mjs");
var _updateUserAttributesMjs = require("./apis/updateUserAttributes.mjs");
var _updateUserAttributeMjs = require("./apis/updateUserAttribute.mjs");
var _getCurrentUserMjs = require("./apis/getCurrentUser.mjs");
var _confirmUserAttributeMjs = require("./apis/confirmUserAttribute.mjs");
var _signInWithRedirectMjs = require("./apis/signInWithRedirect.mjs");
var _fetchUserAttributesMjs = require("./apis/fetchUserAttributes.mjs");
var _signOutMjs = require("./apis/signOut.mjs");
var _sendUserAttributeVerificationCodeMjs = require("./apis/sendUserAttributeVerificationCode.mjs");
var _deleteUserAttributesMjs = require("./apis/deleteUserAttributes.mjs");
var _deleteUserMjs = require("./apis/deleteUser.mjs");
var _rememberDeviceMjs = require("./apis/rememberDevice.mjs");
var _forgetDeviceMjs = require("./apis/forgetDevice.mjs");
var _fetchDevicesMjs = require("./apis/fetchDevices.mjs");
var _autoSignInMjs = require("./apis/autoSignIn.mjs");
var _indexMjs = require("./credentialsProvider/index.mjs");
var _refreshAuthTokensMjs = require("./utils/refreshAuthTokens.mjs");
var _tokenStoreMjs = require("./tokenProvider/TokenStore.mjs");
var _tokenOrchestratorMjs = require("./tokenProvider/TokenOrchestrator.mjs");
var _tokenProviderMjs = require("./tokenProvider/tokenProvider.mjs");
var _constantsMjs = require("./tokenProvider/constants.mjs");
var _generateCodeVerifierMjs = require("./utils/oauth/generateCodeVerifier.mjs");
var _generateStateMjs = require("./utils/oauth/generateState.mjs");
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _getRedirectUrlMjs = require("./utils/oauth/getRedirectUrl.mjs");
var _typesMjs = require("./utils/types.mjs");
var _constantsMjs1 = require("../../errors/constants.mjs");
var _errorsMjs = require("../../Errors.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validateStateMjs = require("./utils/oauth/validateState.mjs");
var _credentialsProviderMjs = require("./credentialsProvider/credentialsProvider.mjs");
var _identityIdStoreMjs = require("./credentialsProvider/IdentityIdStore.mjs");

},{"./apis/signUp.mjs":false,"./apis/resetPassword.mjs":false,"./apis/confirmResetPassword.mjs":false,"./apis/signIn.mjs":false,"./apis/resendSignUpCode.mjs":false,"./apis/confirmSignUp.mjs":false,"./apis/confirmSignIn.mjs":false,"./apis/updateMFAPreference.mjs":false,"./apis/fetchMFAPreference.mjs":false,"./apis/verifyTOTPSetup.mjs":false,"./apis/updatePassword.mjs":false,"./apis/setUpTOTP.mjs":false,"./apis/updateUserAttributes.mjs":false,"./apis/updateUserAttribute.mjs":false,"./apis/getCurrentUser.mjs":false,"./apis/confirmUserAttribute.mjs":false,"./apis/signInWithRedirect.mjs":"jWEhZ","./apis/fetchUserAttributes.mjs":false,"./apis/signOut.mjs":false,"./apis/sendUserAttributeVerificationCode.mjs":false,"./apis/deleteUserAttributes.mjs":false,"./apis/deleteUser.mjs":false,"./apis/rememberDevice.mjs":false,"./apis/forgetDevice.mjs":false,"./apis/fetchDevices.mjs":false,"./apis/autoSignIn.mjs":false,"./credentialsProvider/index.mjs":"9oJSi","./utils/refreshAuthTokens.mjs":false,"./tokenProvider/TokenStore.mjs":false,"./tokenProvider/TokenOrchestrator.mjs":false,"./tokenProvider/tokenProvider.mjs":"dIoqv","./tokenProvider/constants.mjs":false,"./utils/oauth/generateCodeVerifier.mjs":false,"./utils/oauth/generateState.mjs":false,"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","./utils/oauth/getRedirectUrl.mjs":false,"./utils/types.mjs":"7EObU","../../errors/constants.mjs":"8UaIu","../../Errors.mjs":"aAB8b","../../common/AuthErrorStrings.mjs":"dhvVB","./utils/oauth/validateState.mjs":false,"./credentialsProvider/credentialsProvider.mjs":"4h4LE","./credentialsProvider/IdentityIdStore.mjs":"8UUhB","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cg2qr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signUp", ()=>signUp);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _apiHelpersMjs = require("../utils/apiHelpers.mjs");
var _signUpHelpersMjs = require("../utils/signUpHelpers.mjs");
var _userContextDataMjs = require("../utils/userContextData.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _createSignUpClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Creates a user
 *
 * @param input - The SignUpInput object
 * @returns SignUpOutput
 * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.
 * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signUp(input) {
    const { username, password, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';
    const { clientMetadata, validationData, autoSignIn } = input.options ?? {};
    (0, _utils.assertTokenProviderConfig)(authConfig);
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignUpUsername);
    const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;
    const signInInput = {
        username,
        options: signInServiceOptions
    };
    // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password
    if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') signInInput.password = password;
    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
    const signUpClient = (0, _createSignUpClientMjs.createSignUpClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const signUpClientInput = {
        Username: username,
        Password: undefined,
        UserAttributes: options?.userAttributes && (0, _apiHelpersMjs.toAttributeType)(options?.userAttributes),
        ClientMetadata: clientMetadata,
        ValidationData: validationData && (0, _apiHelpersMjs.toAttributeType)(validationData),
        ClientId: userPoolClientId,
        UserContextData: (0, _userContextDataMjs.getUserContextData)({
            username,
            userPoolId,
            userPoolClientId
        })
    };
    if (password) signUpClientInput.Password = password;
    const { UserSub: userId, CodeDeliveryDetails: cdd, UserConfirmed: userConfirmed, Session: session } = await signUpClient({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignUp)
    }, signUpClientInput);
    if (signInServiceOptions || autoSignIn === true) {
        (0, _autoSignInStoreMjs.autoSignInStore).dispatch({
            type: 'START'
        });
        (0, _autoSignInStoreMjs.autoSignInStore).dispatch({
            type: 'SET_USERNAME',
            value: username
        });
        (0, _autoSignInStoreMjs.autoSignInStore).dispatch({
            type: 'SET_SESSION',
            value: session
        });
    }
    const codeDeliveryDetails = {
        destination: cdd?.Destination,
        deliveryMedium: cdd?.DeliveryMedium,
        attributeName: cdd?.AttributeName
    };
    const isSignUpComplete = !!userConfirmed;
    const isAutoSignInStarted = (0, _autoSignInStoreMjs.autoSignInStore).getState().active;
    // Sign Up Complete
    // No Confirm Sign In Step Required
    if (isSignUpComplete) {
        if (isAutoSignInStarted) {
            (0, _autoSignInMjs.setAutoSignIn)((0, _signUpHelpersMjs.autoSignInUserConfirmed)(signInInput));
            return {
                isSignUpComplete: true,
                nextStep: {
                    signUpStep: 'COMPLETE_AUTO_SIGN_IN'
                },
                userId
            };
        }
        return {
            isSignUpComplete: true,
            nextStep: {
                signUpStep: 'DONE'
            },
            userId
        };
    }
    // Sign Up Not Complete
    // Confirm Sign Up Step Required
    if (isAutoSignInStarted) {
        // Confirmation Via Link Occurs In Separate Context
        // AutoSignIn Fn Will Initiate Polling Once Executed
        if (signUpVerificationMethod === 'link') {
            (0, _autoSignInMjs.setAutoSignIn)((0, _signUpHelpersMjs.autoSignInWhenUserIsConfirmedWithLink)(signInInput));
            return {
                isSignUpComplete: false,
                nextStep: {
                    signUpStep: 'COMPLETE_AUTO_SIGN_IN',
                    codeDeliveryDetails
                },
                userId
            };
        }
        // Confirmation Via Code Occurs In Same Context
        // AutoSignIn Next Step Will Be Returned From Confirm Sign Up
        (0, _signUpHelpersMjs.handleCodeAutoSignIn)(signInInput);
    }
    return {
        isSignUpComplete: false,
        nextStep: {
            signUpStep: 'CONFIRM_SIGN_UP',
            codeDeliveryDetails
        },
        userId
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/types/validation.mjs":"8dvEu","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/apiHelpers.mjs":"g2DMU","../utils/signUpHelpers.mjs":"9vCok","../utils/userContextData.mjs":"lOoDf","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs":"efr3r","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bJ8zE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertValidationError", ()=>assertValidationError);
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _authErrorMjs = require("../AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function assertValidationError(assertion, name) {
    const { message, recoverySuggestion } = (0, _authErrorStringsMjs.validationErrorMap)[name];
    if (!assertion) throw new (0, _authErrorMjs.AuthError)({
        name,
        message,
        recoverySuggestion
    });
}

},{"../../common/AuthErrorStrings.mjs":"dhvVB","../AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dhvVB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthErrorCodes", ()=>AuthErrorCodes);
parcelHelpers.export(exports, "AuthErrorStrings", ()=>AuthErrorStrings);
parcelHelpers.export(exports, "validationErrorMap", ()=>validationErrorMap);
var _validationMjs = require("../errors/types/validation.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const validationErrorMap = {
    [(0, _validationMjs.AuthValidationErrorCode).EmptyChallengeResponse]: {
        message: 'challengeResponse is required to confirmSignIn'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordUsername]: {
        message: 'username is required to confirmResetPassword'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmSignUpCode]: {
        message: 'code is required to confirmSignUp'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmSignUpUsername]: {
        message: 'username is required to confirmSignUp'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordConfirmationCode]: {
        message: 'confirmationCode is required to confirmResetPassword'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordNewPassword]: {
        message: 'newPassword is required to confirmResetPassword'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyResendSignUpCodeUsername]: {
        message: 'username is required to confirmSignUp'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyResetPasswordUsername]: {
        message: 'username is required to resetPassword'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword]: {
        message: 'password is required to signIn'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername]: {
        message: 'username is required to signIn'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptySignUpPassword]: {
        message: 'password is required to signUp'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptySignUpUsername]: {
        message: 'username is required to signUp'
    },
    [(0, _validationMjs.AuthValidationErrorCode).CustomAuthSignInPassword]: {
        message: 'A password is not needed when signing in with CUSTOM_WITHOUT_SRP',
        recoverySuggestion: 'Do not include a password in your signIn call.'
    },
    [(0, _validationMjs.AuthValidationErrorCode).IncorrectMFAMethod]: {
        message: 'Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL',
        recoverySuggestion: 'Try to pass SMS, TOTP, or EMAIL as the challengeResponse'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyVerifyTOTPSetupCode]: {
        message: 'code is required to verifyTotpSetup'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyUpdatePassword]: {
        message: 'oldPassword and newPassword are required to changePassword'
    },
    [(0, _validationMjs.AuthValidationErrorCode).EmptyConfirmUserAttributeCode]: {
        message: 'confirmation code is required to confirmUserAttribute'
    }
};
// TODO: delete this code when the Auth class is removed.
var AuthErrorStrings;
(function(AuthErrorStrings) {
    AuthErrorStrings["DEFAULT_MSG"] = "Authentication Error";
    AuthErrorStrings["EMPTY_EMAIL"] = "Email cannot be empty";
    AuthErrorStrings["EMPTY_PHONE"] = "Phone number cannot be empty";
    AuthErrorStrings["EMPTY_USERNAME"] = "Username cannot be empty";
    AuthErrorStrings["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
    AuthErrorStrings["EMPTY_PASSWORD"] = "Password cannot be empty";
    AuthErrorStrings["EMPTY_CODE"] = "Confirmation code cannot be empty";
    AuthErrorStrings["SIGN_UP_ERROR"] = "Error creating account";
    AuthErrorStrings["NO_MFA"] = "No valid MFA method provided";
    AuthErrorStrings["INVALID_MFA"] = "Invalid MFA type";
    AuthErrorStrings["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
    AuthErrorStrings["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
    AuthErrorStrings["NETWORK_ERROR"] = "Network Error";
    AuthErrorStrings["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
    AuthErrorStrings["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
    AuthErrorStrings["OAUTH_ERROR"] = "Couldn't finish OAuth flow, check your User Pool HostedUI settings";
})(AuthErrorStrings || (AuthErrorStrings = {}));
var AuthErrorCodes;
(function(AuthErrorCodes) {
    AuthErrorCodes["SignInException"] = "SignInException";
    AuthErrorCodes["OAuthSignInError"] = "OAuthSignInException";
})(AuthErrorCodes || (AuthErrorCodes = {}));

},{"../errors/types/validation.mjs":"8dvEu","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8dvEu":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthValidationErrorCode", ()=>AuthValidationErrorCode);
var AuthValidationErrorCode;
(function(AuthValidationErrorCode) {
    AuthValidationErrorCode["EmptySignInUsername"] = "EmptySignInUsername";
    AuthValidationErrorCode["EmptySignInPassword"] = "EmptySignInPassword";
    AuthValidationErrorCode["CustomAuthSignInPassword"] = "CustomAuthSignInPassword";
    AuthValidationErrorCode["EmptySignUpUsername"] = "EmptySignUpUsername";
    AuthValidationErrorCode["EmptySignUpPassword"] = "EmptySignUpPassword";
    AuthValidationErrorCode["EmptyConfirmSignUpUsername"] = "EmptyConfirmSignUpUsername";
    AuthValidationErrorCode["EmptyConfirmSignUpCode"] = "EmptyConfirmSignUpCode";
    AuthValidationErrorCode["EmptyResendSignUpCodeUsername"] = "EmptyresendSignUpCodeUsername";
    AuthValidationErrorCode["EmptyChallengeResponse"] = "EmptyChallengeResponse";
    AuthValidationErrorCode["EmptyConfirmResetPasswordUsername"] = "EmptyConfirmResetPasswordUsername";
    AuthValidationErrorCode["EmptyConfirmResetPasswordNewPassword"] = "EmptyConfirmResetPasswordNewPassword";
    AuthValidationErrorCode["EmptyConfirmResetPasswordConfirmationCode"] = "EmptyConfirmResetPasswordConfirmationCode";
    AuthValidationErrorCode["EmptyResetPasswordUsername"] = "EmptyResetPasswordUsername";
    AuthValidationErrorCode["EmptyVerifyTOTPSetupCode"] = "EmptyVerifyTOTPSetupCode";
    AuthValidationErrorCode["EmptyConfirmUserAttributeCode"] = "EmptyConfirmUserAttributeCode";
    AuthValidationErrorCode["IncorrectMFAMethod"] = "IncorrectMFAMethod";
    AuthValidationErrorCode["EmptyUpdatePassword"] = "EmptyUpdatePassword";
})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"eST5l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthError", ()=>AuthError);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class AuthError extends (0, _utils.AmplifyError) {
    constructor(params){
        super(params);
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = AuthError;
        Object.setPrototypeOf(this, AuthError.prototype);
    }
}

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1DoVs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegionFromIdentityPoolId", ()=>getRegionFromIdentityPoolId);
parcelHelpers.export(exports, "getRegionFromUserPoolId", ()=>getRegionFromUserPoolId);
var _authErrorMjs = require("../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function getRegionFromUserPoolId(userPoolId) {
    const region = userPoolId?.split('_')[0];
    if (!userPoolId || userPoolId.indexOf('_') < 0 || !region || typeof region !== 'string') throw new (0, _authErrorMjs.AuthError)({
        name: 'InvalidUserPoolId',
        message: 'Invalid user pool id provided.'
    });
    return region;
}
function getRegionFromIdentityPoolId(identityPoolId) {
    if (!identityPoolId || !identityPoolId.includes(':')) throw new (0, _authErrorMjs.AuthError)({
        name: 'InvalidIdentityPoolIdException',
        message: 'Invalid identity pool id provided.',
        recoverySuggestion: 'Make sure a valid identityPoolId is given in the config.'
    });
    return identityPoolId.split(':')[0];
}

},{"../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"g2DMU":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Transforms a user attributes object into an array of AttributeType objects.
 * @param attributes user attributes to be mapped to AttributeType objects.
 * @returns an array of AttributeType objects.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toAttributeType", ()=>toAttributeType);
parcelHelpers.export(exports, "toAuthUserAttribute", ()=>toAuthUserAttribute);
function toAttributeType(attributes) {
    return Object.entries(attributes).map(([key, value])=>({
            Name: key,
            Value: value
        }));
}
/**
 * Transforms an array of AttributeType objects into a user attributes object.
 *
 * @param attributes - an array of AttributeType objects.
 * @returns AuthUserAttributes object.
 */ function toAuthUserAttribute(attributes) {
    const userAttributes = {};
    attributes?.forEach((attribute)=>{
        if (attribute.Name) userAttributes[attribute.Name] = attribute.Value;
    });
    return userAttributes;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9vCok":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "autoSignInUserConfirmed", ()=>autoSignInUserConfirmed);
parcelHelpers.export(exports, "autoSignInWhenUserIsConfirmedWithLink", ()=>autoSignInWhenUserIsConfirmedWithLink);
parcelHelpers.export(exports, "handleCodeAutoSignIn", ()=>handleCodeAutoSignIn);
var _utils = require("@aws-amplify/core/internals/utils");
var _signInMjs = require("../apis/signIn.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _autoSignInMjs = require("../apis/autoSignIn.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
var _signInWithUserAuthMjs = require("../apis/signInWithUserAuth.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const MAX_AUTOSIGNIN_POLLING_MS = 180000;
function handleCodeAutoSignIn(signInInput) {
    const stopHubListener = (0, _utils.HubInternal).listen('auth-internal', async ({ payload })=>{
        switch(payload.event){
            case 'confirmSignUp':
                {
                    const response = payload.data;
                    if (response?.isSignUpComplete) {
                        (0, _utils.HubInternal).dispatch('auth-internal', {
                            event: 'autoSignIn'
                        });
                        (0, _autoSignInMjs.setAutoSignIn)(autoSignInWithCode(signInInput));
                        stopHubListener();
                    }
                }
        }
    });
    // This will stop the listener if confirmSignUp is not resolved.
    const timeOutId = setTimeout(()=>{
        stopHubListener();
        clearTimeout(timeOutId);
        (0, _autoSignInMjs.resetAutoSignIn)();
    }, MAX_AUTOSIGNIN_POLLING_MS);
}
function debounce(fun, delay) {
    let timer;
    return (args)=>{
        if (!timer) fun(...args);
        clearTimeout(timer);
        timer = setTimeout(()=>{
            timer = undefined;
        }, delay);
    };
}
function handleAutoSignInWithLink(signInInput, resolve, reject) {
    const start = Date.now();
    const autoSignInPollingIntervalId = setInterval(async ()=>{
        const elapsedTime = Date.now() - start;
        const maxTime = MAX_AUTOSIGNIN_POLLING_MS;
        if (elapsedTime > maxTime) {
            clearInterval(autoSignInPollingIntervalId);
            reject(new (0, _authErrorMjs.AuthError)({
                name: (0, _constantsMjs.AUTO_SIGN_IN_EXCEPTION),
                message: 'The account was not confirmed on time.',
                recoverySuggestion: 'Try to verify your account by clicking the link sent your email or phone and then login manually.'
            }));
            (0, _autoSignInMjs.resetAutoSignIn)();
        } else try {
            const signInOutput = await (0, _signInMjs.signIn)(signInInput);
            if (signInOutput.nextStep.signInStep !== 'CONFIRM_SIGN_UP') {
                resolve(signInOutput);
                clearInterval(autoSignInPollingIntervalId);
                (0, _autoSignInMjs.resetAutoSignIn)();
            }
        } catch (error) {
            clearInterval(autoSignInPollingIntervalId);
            reject(error);
            (0, _autoSignInMjs.resetAutoSignIn)();
        }
    }, 5000);
}
const debouncedAutoSignInWithLink = debounce(handleAutoSignInWithLink, 300);
const debouncedAutoSignWithCodeOrUserConfirmed = debounce(handleAutoSignInWithCodeOrUserConfirmed, 300);
function autoSignInWhenUserIsConfirmedWithLink(signInInput) {
    return async ()=>{
        return new Promise((resolve, reject)=>{
            debouncedAutoSignInWithLink([
                signInInput,
                resolve,
                reject
            ]);
        });
    };
}
async function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {
    try {
        const output = signInInput?.options?.authFlowType === 'USER_AUTH' ? await (0, _signInWithUserAuthMjs.signInWithUserAuth)(signInInput) : await (0, _signInMjs.signIn)(signInInput);
        resolve(output);
        (0, _autoSignInMjs.resetAutoSignIn)();
    } catch (error) {
        reject(error);
        (0, _autoSignInMjs.resetAutoSignIn)();
    }
}
function autoSignInWithCode(signInInput) {
    return async ()=>{
        return new Promise((resolve, reject)=>{
            debouncedAutoSignWithCodeOrUserConfirmed([
                signInInput,
                resolve,
                reject
            ]);
        });
    };
}
const autoSignInUserConfirmed = autoSignInWithCode;

},{"@aws-amplify/core/internals/utils":"dRREz","../apis/signIn.mjs":"4wjGy","../../../errors/AuthError.mjs":"eST5l","../apis/autoSignIn.mjs":"e8H7g","../../../errors/constants.mjs":"8UaIu","../apis/signInWithUserAuth.mjs":"jTXZx","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4wjGy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signIn", ()=>signIn);
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _signInWithCustomAuthMjs = require("./signInWithCustomAuth.mjs");
var _signInWithCustomSRPAuthMjs = require("./signInWithCustomSRPAuth.mjs");
var _signInWithSRPMjs = require("./signInWithSRP.mjs");
var _signInWithUserPasswordMjs = require("./signInWithUserPassword.mjs");
var _signInWithUserAuthMjs = require("./signInWithUserAuth.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in
 *
 * @param input -  The SignInInput object
 * @returns SignInOutput
 * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }
 *  - Cognito service errors thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signIn(input) {
    // Here we want to reset the store but not reassign the callback.
    // The callback is reset when the underlying promise resolves or rejects.
    // With the advent of session based sign in, this guarantees that the signIn API initiates a new auth flow,
    // regardless of whether it is called for a user currently engaged in an active auto sign in session.
    (0, _autoSignInMjs.resetAutoSignIn)(false);
    const authFlowType = input.options?.authFlowType;
    await (0, _signInHelpersMjs.assertUserNotAuthenticated)();
    switch(authFlowType){
        case 'USER_SRP_AUTH':
            return (0, _signInWithSRPMjs.signInWithSRP)(input);
        case 'USER_PASSWORD_AUTH':
            return (0, _signInWithUserPasswordMjs.signInWithUserPassword)(input);
        case 'CUSTOM_WITHOUT_SRP':
            return (0, _signInWithCustomAuthMjs.signInWithCustomAuth)(input);
        case 'CUSTOM_WITH_SRP':
            return (0, _signInWithCustomSRPAuthMjs.signInWithCustomSRPAuth)(input);
        case 'USER_AUTH':
            return (0, _signInWithUserAuthMjs.signInWithUserAuth)(input);
        default:
            return (0, _signInWithSRPMjs.signInWithSRP)(input);
    }
}

},{"../utils/signInHelpers.mjs":"jkbXB","./signInWithCustomAuth.mjs":"h12Ro","./signInWithCustomSRPAuth.mjs":"bmZqN","./signInWithSRP.mjs":"hzJmY","./signInWithUserPassword.mjs":"6llbb","./signInWithUserAuth.mjs":"jTXZx","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jkbXB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertUserNotAuthenticated", ()=>assertUserNotAuthenticated);
parcelHelpers.export(exports, "createAttributes", ()=>createAttributes);
parcelHelpers.export(exports, "getActiveSignInUsername", ()=>getActiveSignInUsername);
parcelHelpers.export(exports, "getAllowedMfaSetupTypes", ()=>getAllowedMfaSetupTypes);
parcelHelpers.export(exports, "getMFAType", ()=>getMFAType);
parcelHelpers.export(exports, "getMFATypes", ()=>getMFATypes);
parcelHelpers.export(exports, "getSignInResult", ()=>getSignInResult);
parcelHelpers.export(exports, "getSignInResultFromError", ()=>getSignInResultFromError);
parcelHelpers.export(exports, "getTOTPSetupDetails", ()=>getTOTPSetupDetails);
parcelHelpers.export(exports, "handleChallengeName", ()=>handleChallengeName);
parcelHelpers.export(exports, "handleCompleteNewPasswordChallenge", ()=>handleCompleteNewPasswordChallenge);
parcelHelpers.export(exports, "handleCustomAuthFlowWithoutSRP", ()=>handleCustomAuthFlowWithoutSRP);
parcelHelpers.export(exports, "handleCustomChallenge", ()=>handleCustomChallenge);
parcelHelpers.export(exports, "handleCustomSRPAuthFlow", ()=>handleCustomSRPAuthFlow);
parcelHelpers.export(exports, "handleMFAChallenge", ()=>handleMFAChallenge);
parcelHelpers.export(exports, "handleMFASetupChallenge", ()=>handleMFASetupChallenge);
parcelHelpers.export(exports, "handleSelectMFATypeChallenge", ()=>handleSelectMFATypeChallenge);
parcelHelpers.export(exports, "handleUserPasswordAuthFlow", ()=>handleUserPasswordAuthFlow);
parcelHelpers.export(exports, "handleUserSRPAuthFlow", ()=>handleUserSRPAuthFlow);
parcelHelpers.export(exports, "mapMfaType", ()=>mapMfaType);
parcelHelpers.export(exports, "parseAttributes", ()=>parseAttributes);
parcelHelpers.export(exports, "parseMFATypes", ()=>parseMFATypes);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
var _getCurrentUserMjs = require("../apis/getCurrentUser.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _createInitiateAuthClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs1 = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createVerifySoftwareTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs");
var _createAssociateSoftwareTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _handleWebAuthnSignInResultMjs = require("../../../client/flows/userAuth/handleWebAuthnSignInResult.mjs");
var _handlePasswordSRPMjs = require("../../../client/flows/shared/handlePasswordSRP.mjs");
var _handleSelectChallengeMjs = require("../../../client/flows/userAuth/handleSelectChallenge.mjs");
var _handleSelectChallengeWithPasswordMjs = require("../../../client/flows/userAuth/handleSelectChallengeWithPassword.mjs");
var _handleSelectChallengeWithPasswordSRPMjs = require("../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs");
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _getAuthenticationHelperMjs = require("./srp/getAuthenticationHelper.mjs");
var _constantsMjs2 = require("./srp/constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _userContextDataMjs = require("./userContextData.mjs");
var _handlePasswordVerifierChallengeMjs = require("./handlePasswordVerifierChallenge.mjs");
var _handleDeviceSRPAuthMjs = require("./handleDeviceSRPAuth.mjs");
var _retryOnResourceNotFoundExceptionMjs = require("./retryOnResourceNotFoundException.mjs");
var _setActiveSignInUsernameMjs = require("./setActiveSignInUsername.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const USER_ATTRIBUTES = 'userAttributes.';
function isWebAuthnResultAuthSignInOutput(result) {
    return 'isSignedIn' in result && 'nextStep' in result;
}
async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config, tokenOrchestrator }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const challengeResponses = {
        USERNAME: username,
        ANSWER: challengeResponse
    };
    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);
    if (deviceMetadata && deviceMetadata.deviceKey) challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        ChallengeName: 'CUSTOM_CHALLENGE',
        ChallengeResponses: challengeResponses,
        Session: session,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, jsonReq);
    if (response.ChallengeName === 'DEVICE_SRP_AUTH') return (0, _handleDeviceSRPAuthMjs.handleDeviceSRPAuth)({
        username,
        config,
        clientMetadata,
        session: response.Session,
        tokenOrchestrator
    });
    return response;
}
async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    if (challengeResponse === 'EMAIL') return {
        ChallengeName: 'MFA_SETUP',
        Session: session,
        ChallengeParameters: {
            MFAS_CAN_SETUP: '["EMAIL_OTP"]'
        },
        $metadata: {}
    };
    if (challengeResponse === 'TOTP') return {
        ChallengeName: 'MFA_SETUP',
        Session: session,
        ChallengeParameters: {
            MFAS_CAN_SETUP: '["SOFTWARE_TOKEN_MFA"]'
        },
        $metadata: {}
    };
    const challengeResponses = {
        USERNAME: username
    };
    const isTOTPCode = /^\d+$/.test(challengeResponse);
    if (isTOTPCode) {
        const verifySoftwareToken = (0, _createVerifySoftwareTokenClientMjs.createVerifySoftwareTokenClient)({
            endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                endpointOverride: userPoolEndpoint
            })
        });
        const { Session } = await verifySoftwareToken({
            region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
        }, {
            UserCode: challengeResponse,
            Session: session,
            FriendlyDeviceName: deviceName
        });
        (0, _signInStoreMjs.signInStore).dispatch({
            type: 'SET_SIGN_IN_SESSION',
            value: Session
        });
        const jsonReq = {
            ChallengeName: 'MFA_SETUP',
            ChallengeResponses: challengeResponses,
            Session,
            ClientMetadata: clientMetadata,
            ClientId: userPoolClientId
        };
        const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
            endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                endpointOverride: userPoolEndpoint
            })
        });
        return respondToAuthChallenge({
            region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
        }, jsonReq);
    }
    const isEmail = challengeResponse.includes('@');
    if (isEmail) {
        challengeResponses.EMAIL = challengeResponse;
        const jsonReq = {
            ChallengeName: 'MFA_SETUP',
            ChallengeResponses: challengeResponses,
            Session: session,
            ClientMetadata: clientMetadata,
            ClientId: userPoolClientId
        };
        const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
            endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                endpointOverride: userPoolEndpoint
            })
        });
        return respondToAuthChallenge({
            region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
        }, jsonReq);
    }
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,
        recoverySuggestion: 'Try passing "EMAIL", "TOTP", a valid email, or OTP code as the challengeResponse.'
    });
}
async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    (0, _assertValidationErrorMjs.assertValidationError)(challengeResponse === 'TOTP' || challengeResponse === 'SMS' || challengeResponse === 'EMAIL', (0, _validationMjs.AuthValidationErrorCode).IncorrectMFAMethod);
    const challengeResponses = {
        USERNAME: username,
        ANSWER: mapMfaType(challengeResponse)
    };
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        ChallengeName: 'SELECT_MFA_TYPE',
        ChallengeResponses: challengeResponses,
        Session: session,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    return respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, jsonReq);
}
async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const challengeResponses = {
        ...createAttributes(requiredAttributes),
        NEW_PASSWORD: challengeResponse,
        USERNAME: username
    };
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        ChallengeName: 'NEW_PASSWORD_REQUIRED',
        ChallengeResponses: challengeResponses,
        ClientMetadata: clientMetadata,
        Session: session,
        ClientId: userPoolClientId,
        UserContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    return respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, jsonReq);
}
async function handleUserPasswordAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {
    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;
    const authParameters = {
        USERNAME: username,
        PASSWORD: password
    };
    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);
    if (deviceMetadata && deviceMetadata.deviceKey) authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        AuthFlow: 'USER_PASSWORD_AUTH',
        AuthParameters: authParameters,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const initiateAuth = (0, _createInitiateAuthClientMjs.createInitiateAuthClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await initiateAuth({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignIn)
    }, jsonReq);
    const activeUsername = response.ChallengeParameters?.USERNAME ?? response.ChallengeParameters?.USER_ID_FOR_SRP ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    if (response.ChallengeName === 'DEVICE_SRP_AUTH') return (0, _handleDeviceSRPAuthMjs.handleDeviceSRPAuth)({
        username: activeUsername,
        config,
        clientMetadata,
        session: response.Session,
        tokenOrchestrator
    });
    return response;
}
async function handleUserSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {
    return (0, _handlePasswordSRPMjs.handlePasswordSRP)({
        username,
        password,
        clientMetadata,
        config,
        tokenOrchestrator,
        authFlow: 'USER_SRP_AUTH'
    });
}
async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config, tokenOrchestrator) {
    const { userPoolClientId, userPoolId, userPoolEndpoint } = config;
    const authParameters = {
        USERNAME: username
    };
    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);
    if (deviceMetadata && deviceMetadata.deviceKey) authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        AuthFlow: 'CUSTOM_AUTH',
        AuthParameters: authParameters,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const initiateAuth = (0, _createInitiateAuthClientMjs.createInitiateAuthClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await initiateAuth({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignIn)
    }, jsonReq);
    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    if (response.ChallengeName === 'DEVICE_SRP_AUTH') return (0, _handleDeviceSRPAuthMjs.handleDeviceSRPAuth)({
        username: activeUsername,
        config,
        clientMetadata,
        session: response.Session,
        tokenOrchestrator
    });
    return response;
}
async function handleCustomSRPAuthFlow(username, password, clientMetadata, config, tokenOrchestrator) {
    (0, _utils.assertTokenProviderConfig)(config);
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const userPoolName = userPoolId?.split('_')[1] || '';
    const authenticationHelper = await (0, _getAuthenticationHelperMjs.getAuthenticationHelper)(userPoolName);
    const authParameters = {
        USERNAME: username,
        SRP_A: authenticationHelper.A.toString(16),
        CHALLENGE_NAME: 'SRP_A'
    };
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        AuthFlow: 'CUSTOM_AUTH',
        AuthParameters: authParameters,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const initiateAuth = (0, _createInitiateAuthClientMjs.createInitiateAuthClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignIn)
    }, jsonReq);
    const activeUsername = challengeParameters?.USERNAME ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    return (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)((0, _handlePasswordVerifierChallengeMjs.handlePasswordVerifierChallenge), [
        password,
        challengeParameters,
        clientMetadata,
        session,
        authenticationHelper,
        config,
        tokenOrchestrator
    ], activeUsername, tokenOrchestrator);
}
async function getSignInResult(params) {
    const { challengeName, challengeParameters, availableChallenges } = params;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    switch(challengeName){
        case 'CUSTOM_CHALLENGE':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE',
                    additionalInfo: challengeParameters
                }
            };
        case 'MFA_SETUP':
            {
                const { signInSession, username } = (0, _signInStoreMjs.signInStore).getState();
                const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];
                const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);
                const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes('TOTP');
                const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes('EMAIL');
                if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) return {
                    isSignedIn: false,
                    nextStep: {
                        signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION',
                        allowedMFATypes: allowedMfaSetupTypes
                    }
                };
                if (isEmailMfaSetupAvailable) return {
                    isSignedIn: false,
                    nextStep: {
                        signInStep: 'CONTINUE_SIGN_IN_WITH_EMAIL_SETUP'
                    }
                };
                if (isTotpMfaSetupAvailable) {
                    const associateSoftwareToken = (0, _createAssociateSoftwareTokenClientMjs.createAssociateSoftwareTokenClient)({
                        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                            endpointOverride: authConfig.userPoolEndpoint
                        })
                    });
                    const { Session, SecretCode: secretCode } = await associateSoftwareToken({
                        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(authConfig.userPoolId)
                    }, {
                        Session: signInSession
                    });
                    (0, _signInStoreMjs.signInStore).dispatch({
                        type: 'SET_SIGN_IN_SESSION',
                        value: Session
                    });
                    return {
                        isSignedIn: false,
                        nextStep: {
                            signInStep: 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP',
                            totpSetupDetails: getTOTPSetupDetails(secretCode, username)
                        }
                    };
                }
                throw new (0, _authErrorMjs.AuthError)({
                    name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
                    message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`
                });
            }
        case 'NEW_PASSWORD_REQUIRED':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED',
                    missingAttributes: parseAttributes(challengeParameters.requiredAttributes)
                }
            };
        case 'SELECT_MFA_TYPE':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONTINUE_SIGN_IN_WITH_MFA_SELECTION',
                    allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))
                }
            };
        case 'SMS_OTP':
        case 'SMS_MFA':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_SMS_CODE',
                    codeDeliveryDetails: {
                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
                        destination: challengeParameters.CODE_DELIVERY_DESTINATION
                    }
                }
            };
        case 'SOFTWARE_TOKEN_MFA':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'
                }
            };
        case 'EMAIL_OTP':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_EMAIL_CODE',
                    codeDeliveryDetails: {
                        deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
                        destination: challengeParameters.CODE_DELIVERY_DESTINATION
                    }
                }
            };
        case 'WEB_AUTHN':
            {
                const result = await (0, _handleWebAuthnSignInResultMjs.handleWebAuthnSignInResult)(challengeParameters);
                if (isWebAuthnResultAuthSignInOutput(result)) return result;
                return getSignInResult(result);
            }
        case 'PASSWORD':
        case 'PASSWORD_SRP':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONFIRM_SIGN_IN_WITH_PASSWORD'
                }
            };
        case 'SELECT_CHALLENGE':
            return {
                isSignedIn: false,
                nextStep: {
                    signInStep: 'CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION',
                    availableChallenges
                }
            };
    }
    // TODO: remove this error message for production apps
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: 'An error occurred during the sign in process. ' + `${challengeName} challengeName returned by the underlying service was not addressed.`
    });
}
function getTOTPSetupDetails(secretCode, username) {
    return {
        sharedSecret: secretCode,
        getSetupUri: (appName, accountName)=>{
            const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;
            return new (0, _utils.AmplifyUrl)(totpUri);
        }
    };
}
function getSignInResultFromError(errorName) {
    if (errorName === (0, _errorsMjs.InitiateAuthException).PasswordResetRequiredException) return {
        isSignedIn: false,
        nextStep: {
            signInStep: 'RESET_PASSWORD'
        }
    };
    else if (errorName === (0, _errorsMjs.InitiateAuthException).UserNotConfirmedException) return {
        isSignedIn: false,
        nextStep: {
            signInStep: 'CONFIRM_SIGN_UP'
        }
    };
}
function parseAttributes(attributes) {
    if (!attributes) return [];
    const parsedAttributes = JSON.parse(attributes).map((att)=>att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, '') : att);
    return parsedAttributes;
}
function createAttributes(attributes) {
    if (!attributes) return {};
    const newAttributes = {};
    Object.entries(attributes).forEach(([key, value])=>{
        if (value) newAttributes[`${USER_ATTRIBUTES}${key}`] = value;
    });
    return newAttributes;
}
async function handleChallengeName(username, challengeName, session, challengeResponse, config, tokenOrchestrator, clientMetadata, options) {
    const userAttributes = options?.userAttributes;
    const deviceName = options?.friendlyDeviceName;
    switch(challengeName){
        case 'WEB_AUTHN':
        case 'SELECT_CHALLENGE':
            if (challengeResponse === 'PASSWORD_SRP' || challengeResponse === 'PASSWORD') return {
                ChallengeName: challengeResponse,
                Session: session,
                $metadata: {}
            };
            return (0, _handleSelectChallengeMjs.initiateSelectedChallenge)({
                username,
                session,
                selectedChallenge: challengeResponse,
                config,
                clientMetadata
            });
        case 'SELECT_MFA_TYPE':
            return handleSelectMFATypeChallenge({
                challengeResponse,
                clientMetadata,
                session,
                username,
                config
            });
        case 'MFA_SETUP':
            return handleMFASetupChallenge({
                challengeResponse,
                clientMetadata,
                session,
                username,
                deviceName,
                config
            });
        case 'NEW_PASSWORD_REQUIRED':
            return handleCompleteNewPasswordChallenge({
                challengeResponse,
                clientMetadata,
                session,
                username,
                requiredAttributes: userAttributes,
                config
            });
        case 'CUSTOM_CHALLENGE':
            return (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)(handleCustomChallenge, [
                {
                    challengeResponse,
                    clientMetadata,
                    session,
                    username,
                    config,
                    tokenOrchestrator
                }
            ], username, tokenOrchestrator);
        case 'SMS_MFA':
        case 'SOFTWARE_TOKEN_MFA':
        case 'SMS_OTP':
        case 'EMAIL_OTP':
            return handleMFAChallenge({
                challengeName,
                challengeResponse,
                clientMetadata,
                session,
                username,
                config
            });
        case 'PASSWORD':
            return (0, _handleSelectChallengeWithPasswordMjs.handleSelectChallengeWithPassword)(username, challengeResponse, clientMetadata, config, session);
        case 'PASSWORD_SRP':
            return (0, _handleSelectChallengeWithPasswordSRPMjs.handleSelectChallengeWithPasswordSRP)(username, challengeResponse, clientMetadata, config, session, tokenOrchestrator);
    }
    // TODO: remove this error message for production apps
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: `An error occurred during the sign in process.
		${challengeName} challengeName returned by the underlying service was not addressed.`
    });
}
function mapMfaType(mfa) {
    let mfaType = 'SMS_MFA';
    if (mfa === 'TOTP') mfaType = 'SOFTWARE_TOKEN_MFA';
    if (mfa === 'EMAIL') mfaType = 'EMAIL_OTP';
    return mfaType;
}
function getMFAType(type) {
    if (type === 'SMS_MFA') return 'SMS';
    if (type === 'SOFTWARE_TOKEN_MFA') return 'TOTP';
    if (type === 'EMAIL_OTP') return 'EMAIL';
// TODO: log warning for unknown MFA type
}
function getMFATypes(types) {
    if (!types) return undefined;
    return types.map(getMFAType).filter(Boolean);
}
function parseMFATypes(mfa) {
    if (!mfa) return [];
    return JSON.parse(mfa);
}
function getAllowedMfaSetupTypes(availableMfaSetupTypes) {
    return availableMfaSetupTypes.filter((authMfaType)=>authMfaType === 'EMAIL' || authMfaType === 'TOTP');
}
async function assertUserNotAuthenticated() {
    let authUser;
    try {
        authUser = await (0, _getCurrentUserMjs.getCurrentUser)();
    } catch (error) {}
    if (authUser && authUser.userId && authUser.username) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _constantsMjs.USER_ALREADY_AUTHENTICATED_EXCEPTION),
        message: 'There is already a signed in user.',
        recoverySuggestion: 'Call signOut before calling signIn again.'
    });
}
function getActiveSignInUsername(username) {
    const state = (0, _signInStoreMjs.signInStore).getState();
    return state.username ?? username;
}
async function handleMFAChallenge({ challengeName, challengeResponse, clientMetadata, session, username, config }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const challengeResponses = {
        USERNAME: username
    };
    if (challengeName === 'EMAIL_OTP') challengeResponses.EMAIL_OTP_CODE = challengeResponse;
    if (challengeName === 'SMS_MFA') challengeResponses.SMS_MFA_CODE = challengeResponse;
    if (challengeName === 'SMS_OTP') challengeResponses.SMS_OTP_CODE = challengeResponse;
    if (challengeName === 'SOFTWARE_TOKEN_MFA') challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;
    const userContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        ChallengeName: challengeName,
        ChallengeResponses: challengeResponses,
        Session: session,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData: userContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    return respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, jsonReq);
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/AuthError.mjs":"eST5l","../types/errors.mjs":"2qQV1","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/constants.mjs":"8UaIu","../apis/getCurrentUser.mjs":"d9HYR","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs":"9g63I","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs":"inOun","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs":"1urqd","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../client/flows/userAuth/handleWebAuthnSignInResult.mjs":"509rG","../../../client/flows/shared/handlePasswordSRP.mjs":"8s3dg","../../../client/flows/userAuth/handleSelectChallenge.mjs":"80lVq","../../../client/flows/userAuth/handleSelectChallengeWithPassword.mjs":"aE0BD","../../../client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs":"aWT2K","../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","./srp/getAuthenticationHelper.mjs":"jLFhO","./srp/constants.mjs":"iJTaO","@aws-crypto/sha256-js":"7twCg","./userContextData.mjs":"lOoDf","./handlePasswordVerifierChallenge.mjs":"9qspM","./handleDeviceSRPAuth.mjs":"6PsRG","./retryOnResourceNotFoundException.mjs":"7W4D7","./setActiveSignInUsername.mjs":"flc2V","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2qQV1":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AssociateSoftwareTokenException", ()=>AssociateSoftwareTokenException);
parcelHelpers.export(exports, "ChangePasswordException", ()=>ChangePasswordException);
parcelHelpers.export(exports, "ConfirmDeviceException", ()=>ConfirmDeviceException);
parcelHelpers.export(exports, "ConfirmForgotPasswordException", ()=>ConfirmForgotPasswordException);
parcelHelpers.export(exports, "ConfirmSignUpException", ()=>ConfirmSignUpException);
parcelHelpers.export(exports, "DeleteUserAttributesException", ()=>DeleteUserAttributesException);
parcelHelpers.export(exports, "DeleteUserException", ()=>DeleteUserException);
parcelHelpers.export(exports, "ForgetDeviceException", ()=>ForgetDeviceException);
parcelHelpers.export(exports, "ForgotPasswordException", ()=>ForgotPasswordException);
parcelHelpers.export(exports, "GetCredentialsForIdentityException", ()=>GetCredentialsForIdentityException);
parcelHelpers.export(exports, "GetIdException", ()=>GetIdException);
parcelHelpers.export(exports, "GetUserAttributeVerificationException", ()=>GetUserAttributeVerificationException);
parcelHelpers.export(exports, "GetUserException", ()=>GetUserException);
parcelHelpers.export(exports, "GlobalSignOutException", ()=>GlobalSignOutException);
parcelHelpers.export(exports, "InitiateAuthException", ()=>InitiateAuthException);
parcelHelpers.export(exports, "ListDevicesException", ()=>ListDevicesException);
parcelHelpers.export(exports, "ResendConfirmationException", ()=>ResendConfirmationException);
parcelHelpers.export(exports, "RespondToAuthChallengeException", ()=>RespondToAuthChallengeException);
parcelHelpers.export(exports, "SETUP_TOTP_EXCEPTION", ()=>SETUP_TOTP_EXCEPTION);
parcelHelpers.export(exports, "SetUserMFAPreferenceException", ()=>SetUserMFAPreferenceException);
parcelHelpers.export(exports, "SignUpException", ()=>SignUpException);
parcelHelpers.export(exports, "UpdateDeviceStatusException", ()=>UpdateDeviceStatusException);
parcelHelpers.export(exports, "UpdateUserAttributesException", ()=>UpdateUserAttributesException);
parcelHelpers.export(exports, "VerifySoftwareTokenException", ()=>VerifySoftwareTokenException);
parcelHelpers.export(exports, "VerifyUserAttributeException", ()=>VerifyUserAttributeException);
var AssociateSoftwareTokenException;
(function(AssociateSoftwareTokenException) {
    AssociateSoftwareTokenException["ConcurrentModificationException"] = "ConcurrentModificationException";
    AssociateSoftwareTokenException["ForbiddenException"] = "ForbiddenException";
    AssociateSoftwareTokenException["InternalErrorException"] = "InternalErrorException";
    AssociateSoftwareTokenException["InvalidParameterException"] = "InvalidParameterException";
    AssociateSoftwareTokenException["NotAuthorizedException"] = "NotAuthorizedException";
    AssociateSoftwareTokenException["ResourceNotFoundException"] = "ResourceNotFoundException";
    AssociateSoftwareTokenException["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
})(AssociateSoftwareTokenException || (AssociateSoftwareTokenException = {}));
var ChangePasswordException;
(function(ChangePasswordException) {
    ChangePasswordException["ForbiddenException"] = "ForbiddenException";
    ChangePasswordException["InternalErrorException"] = "InternalErrorException";
    ChangePasswordException["InvalidParameterException"] = "InvalidParameterException";
    ChangePasswordException["InvalidPasswordException"] = "InvalidPasswordException";
    ChangePasswordException["LimitExceededException"] = "LimitExceededException";
    ChangePasswordException["NotAuthorizedException"] = "NotAuthorizedException";
    ChangePasswordException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    ChangePasswordException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ChangePasswordException["TooManyRequestsException"] = "TooManyRequestsException";
    ChangePasswordException["UserNotConfirmedException"] = "UserNotConfirmedException";
    ChangePasswordException["UserNotFoundException"] = "UserNotFoundException";
})(ChangePasswordException || (ChangePasswordException = {}));
var ConfirmDeviceException;
(function(ConfirmDeviceException) {
    ConfirmDeviceException["ForbiddenException"] = "ForbiddenException";
    ConfirmDeviceException["InternalErrorException"] = "InternalErrorException";
    ConfirmDeviceException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    ConfirmDeviceException["InvalidParameterException"] = "InvalidParameterException";
    ConfirmDeviceException["InvalidPasswordException"] = "InvalidPasswordException";
    ConfirmDeviceException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    ConfirmDeviceException["NotAuthorizedException"] = "NotAuthorizedException";
    ConfirmDeviceException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    ConfirmDeviceException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ConfirmDeviceException["TooManyRequestsException"] = "TooManyRequestsException";
    ConfirmDeviceException["UsernameExistsException"] = "UsernameExistsException";
    ConfirmDeviceException["UserNotConfirmedException"] = "UserNotConfirmedException";
    ConfirmDeviceException["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmDeviceException || (ConfirmDeviceException = {}));
var ConfirmForgotPasswordException;
(function(ConfirmForgotPasswordException) {
    ConfirmForgotPasswordException["CodeMismatchException"] = "CodeMismatchException";
    ConfirmForgotPasswordException["ExpiredCodeException"] = "ExpiredCodeException";
    ConfirmForgotPasswordException["ForbiddenException"] = "ForbiddenException";
    ConfirmForgotPasswordException["InternalErrorException"] = "InternalErrorException";
    ConfirmForgotPasswordException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    ConfirmForgotPasswordException["InvalidParameterException"] = "InvalidParameterException";
    ConfirmForgotPasswordException["InvalidPasswordException"] = "InvalidPasswordException";
    ConfirmForgotPasswordException["LimitExceededException"] = "LimitExceededException";
    ConfirmForgotPasswordException["NotAuthorizedException"] = "NotAuthorizedException";
    ConfirmForgotPasswordException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ConfirmForgotPasswordException["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
    ConfirmForgotPasswordException["TooManyRequestsException"] = "TooManyRequestsException";
    ConfirmForgotPasswordException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    ConfirmForgotPasswordException["UserLambdaValidationException"] = "UserLambdaValidationException";
    ConfirmForgotPasswordException["UserNotConfirmedException"] = "UserNotConfirmedException";
    ConfirmForgotPasswordException["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmForgotPasswordException || (ConfirmForgotPasswordException = {}));
var ConfirmSignUpException;
(function(ConfirmSignUpException) {
    ConfirmSignUpException["AliasExistsException"] = "AliasExistsException";
    ConfirmSignUpException["CodeMismatchException"] = "CodeMismatchException";
    ConfirmSignUpException["ExpiredCodeException"] = "ExpiredCodeException";
    ConfirmSignUpException["ForbiddenException"] = "ForbiddenException";
    ConfirmSignUpException["InternalErrorException"] = "InternalErrorException";
    ConfirmSignUpException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    ConfirmSignUpException["InvalidParameterException"] = "InvalidParameterException";
    ConfirmSignUpException["LimitExceededException"] = "LimitExceededException";
    ConfirmSignUpException["NotAuthorizedException"] = "NotAuthorizedException";
    ConfirmSignUpException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ConfirmSignUpException["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
    ConfirmSignUpException["TooManyRequestsException"] = "TooManyRequestsException";
    ConfirmSignUpException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    ConfirmSignUpException["UserLambdaValidationException"] = "UserLambdaValidationException";
    ConfirmSignUpException["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmSignUpException || (ConfirmSignUpException = {}));
var DeleteUserAttributesException;
(function(DeleteUserAttributesException) {
    DeleteUserAttributesException["ForbiddenException"] = "ForbiddenException";
    DeleteUserAttributesException["InternalErrorException"] = "InternalErrorException";
    DeleteUserAttributesException["InvalidParameterException"] = "InvalidParameterException";
    DeleteUserAttributesException["NotAuthorizedException"] = "NotAuthorizedException";
    DeleteUserAttributesException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    DeleteUserAttributesException["ResourceNotFoundException"] = "ResourceNotFoundException";
    DeleteUserAttributesException["TooManyRequestsException"] = "TooManyRequestsException";
    DeleteUserAttributesException["UserNotConfirmedException"] = "UserNotConfirmedException";
    DeleteUserAttributesException["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserAttributesException || (DeleteUserAttributesException = {}));
var DeleteUserException;
(function(DeleteUserException) {
    DeleteUserException["ForbiddenException"] = "ForbiddenException";
    DeleteUserException["InternalErrorException"] = "InternalErrorException";
    DeleteUserException["InvalidParameterException"] = "InvalidParameterException";
    DeleteUserException["NotAuthorizedException"] = "NotAuthorizedException";
    DeleteUserException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    DeleteUserException["ResourceNotFoundException"] = "ResourceNotFoundException";
    DeleteUserException["TooManyRequestsException"] = "TooManyRequestsException";
    DeleteUserException["UserNotConfirmedException"] = "UserNotConfirmedException";
    DeleteUserException["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserException || (DeleteUserException = {}));
var ForgetDeviceException;
(function(ForgetDeviceException) {
    ForgetDeviceException["ForbiddenException"] = "ForbiddenException";
    ForgetDeviceException["InternalErrorException"] = "InternalErrorException";
    ForgetDeviceException["InvalidParameterException"] = "InvalidParameterException";
    ForgetDeviceException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    ForgetDeviceException["NotAuthorizedException"] = "NotAuthorizedException";
    ForgetDeviceException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    ForgetDeviceException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ForgetDeviceException["TooManyRequestsException"] = "TooManyRequestsException";
    ForgetDeviceException["UserNotConfirmedException"] = "UserNotConfirmedException";
    ForgetDeviceException["UserNotFoundException"] = "UserNotFoundException";
})(ForgetDeviceException || (ForgetDeviceException = {}));
var ForgotPasswordException;
(function(ForgotPasswordException) {
    ForgotPasswordException["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
    ForgotPasswordException["ForbiddenException"] = "ForbiddenException";
    ForgotPasswordException["InternalErrorException"] = "InternalErrorException";
    ForgotPasswordException["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
    ForgotPasswordException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    ForgotPasswordException["InvalidParameterException"] = "InvalidParameterException";
    ForgotPasswordException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    ForgotPasswordException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    ForgotPasswordException["LimitExceededException"] = "LimitExceededException";
    ForgotPasswordException["NotAuthorizedException"] = "NotAuthorizedException";
    ForgotPasswordException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ForgotPasswordException["TooManyRequestsException"] = "TooManyRequestsException";
    ForgotPasswordException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    ForgotPasswordException["UserLambdaValidationException"] = "UserLambdaValidationException";
    ForgotPasswordException["UserNotFoundException"] = "UserNotFoundException";
})(ForgotPasswordException || (ForgotPasswordException = {}));
var GetUserException;
(function(GetUserException) {
    GetUserException["ForbiddenException"] = "ForbiddenException";
    GetUserException["InternalErrorException"] = "InternalErrorException";
    GetUserException["InvalidParameterException"] = "InvalidParameterException";
    GetUserException["NotAuthorizedException"] = "NotAuthorizedException";
    GetUserException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    GetUserException["ResourceNotFoundException"] = "ResourceNotFoundException";
    GetUserException["TooManyRequestsException"] = "TooManyRequestsException";
    GetUserException["UserNotConfirmedException"] = "UserNotConfirmedException";
    GetUserException["UserNotFoundException"] = "UserNotFoundException";
})(GetUserException || (GetUserException = {}));
var GetIdException;
(function(GetIdException) {
    GetIdException["ExternalServiceException"] = "ExternalServiceException";
    GetIdException["InternalErrorException"] = "InternalErrorException";
    GetIdException["InvalidParameterException"] = "InvalidParameterException";
    GetIdException["LimitExceededException"] = "LimitExceededException";
    GetIdException["NotAuthorizedException"] = "NotAuthorizedException";
    GetIdException["ResourceConflictException"] = "ResourceConflictException";
    GetIdException["ResourceNotFoundException"] = "ResourceNotFoundException";
    GetIdException["TooManyRequestsException"] = "TooManyRequestsException";
})(GetIdException || (GetIdException = {}));
var GetCredentialsForIdentityException;
(function(GetCredentialsForIdentityException) {
    GetCredentialsForIdentityException["ExternalServiceException"] = "ExternalServiceException";
    GetCredentialsForIdentityException["InternalErrorException"] = "InternalErrorException";
    GetCredentialsForIdentityException["InvalidIdentityPoolConfigurationException"] = "InvalidIdentityPoolConfigurationException";
    GetCredentialsForIdentityException["InvalidParameterException"] = "InvalidParameterException";
    GetCredentialsForIdentityException["NotAuthorizedException"] = "NotAuthorizedException";
    GetCredentialsForIdentityException["ResourceConflictException"] = "ResourceConflictException";
    GetCredentialsForIdentityException["ResourceNotFoundException"] = "ResourceNotFoundException";
    GetCredentialsForIdentityException["TooManyRequestsException"] = "TooManyRequestsException";
})(GetCredentialsForIdentityException || (GetCredentialsForIdentityException = {}));
var GetUserAttributeVerificationException;
(function(GetUserAttributeVerificationException) {
    GetUserAttributeVerificationException["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
    GetUserAttributeVerificationException["ForbiddenException"] = "ForbiddenException";
    GetUserAttributeVerificationException["InternalErrorException"] = "InternalErrorException";
    GetUserAttributeVerificationException["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
    GetUserAttributeVerificationException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    GetUserAttributeVerificationException["InvalidParameterException"] = "InvalidParameterException";
    GetUserAttributeVerificationException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    GetUserAttributeVerificationException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    GetUserAttributeVerificationException["LimitExceededException"] = "LimitExceededException";
    GetUserAttributeVerificationException["NotAuthorizedException"] = "NotAuthorizedException";
    GetUserAttributeVerificationException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    GetUserAttributeVerificationException["ResourceNotFoundException"] = "ResourceNotFoundException";
    GetUserAttributeVerificationException["TooManyRequestsException"] = "TooManyRequestsException";
    GetUserAttributeVerificationException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    GetUserAttributeVerificationException["UserLambdaValidationException"] = "UserLambdaValidationException";
    GetUserAttributeVerificationException["UserNotConfirmedException"] = "UserNotConfirmedException";
    GetUserAttributeVerificationException["UserNotFoundException"] = "UserNotFoundException";
})(GetUserAttributeVerificationException || (GetUserAttributeVerificationException = {}));
var GlobalSignOutException;
(function(GlobalSignOutException) {
    GlobalSignOutException["ForbiddenException"] = "ForbiddenException";
    GlobalSignOutException["InternalErrorException"] = "InternalErrorException";
    GlobalSignOutException["InvalidParameterException"] = "InvalidParameterException";
    GlobalSignOutException["NotAuthorizedException"] = "NotAuthorizedException";
    GlobalSignOutException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    GlobalSignOutException["ResourceNotFoundException"] = "ResourceNotFoundException";
    GlobalSignOutException["TooManyRequestsException"] = "TooManyRequestsException";
    GlobalSignOutException["UserNotConfirmedException"] = "UserNotConfirmedException";
})(GlobalSignOutException || (GlobalSignOutException = {}));
var InitiateAuthException;
(function(InitiateAuthException) {
    InitiateAuthException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    InitiateAuthException["ForbiddenException"] = "ForbiddenException";
    InitiateAuthException["InternalErrorException"] = "InternalErrorException";
    InitiateAuthException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    InitiateAuthException["InvalidParameterException"] = "InvalidParameterException";
    InitiateAuthException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    InitiateAuthException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    InitiateAuthException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    InitiateAuthException["NotAuthorizedException"] = "NotAuthorizedException";
    InitiateAuthException["ResourceNotFoundException"] = "ResourceNotFoundException";
    InitiateAuthException["TooManyRequestsException"] = "TooManyRequestsException";
    InitiateAuthException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    InitiateAuthException["UserLambdaValidationException"] = "UserLambdaValidationException";
    InitiateAuthException["UserNotConfirmedException"] = "UserNotConfirmedException";
    InitiateAuthException["UserNotFoundException"] = "UserNotFoundException";
})(InitiateAuthException || (InitiateAuthException = {}));
var ResendConfirmationException;
(function(ResendConfirmationException) {
    ResendConfirmationException["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
    ResendConfirmationException["ForbiddenException"] = "ForbiddenException";
    ResendConfirmationException["InternalErrorException"] = "InternalErrorException";
    ResendConfirmationException["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
    ResendConfirmationException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    ResendConfirmationException["InvalidParameterException"] = "InvalidParameterException";
    ResendConfirmationException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    ResendConfirmationException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    ResendConfirmationException["LimitExceededException"] = "LimitExceededException";
    ResendConfirmationException["NotAuthorizedException"] = "NotAuthorizedException";
    ResendConfirmationException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ResendConfirmationException["TooManyRequestsException"] = "TooManyRequestsException";
    ResendConfirmationException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    ResendConfirmationException["UserLambdaValidationException"] = "UserLambdaValidationException";
    ResendConfirmationException["UserNotFoundException"] = "UserNotFoundException";
})(ResendConfirmationException || (ResendConfirmationException = {}));
var RespondToAuthChallengeException;
(function(RespondToAuthChallengeException) {
    RespondToAuthChallengeException["AliasExistsException"] = "AliasExistsException";
    RespondToAuthChallengeException["CodeMismatchException"] = "CodeMismatchException";
    RespondToAuthChallengeException["ExpiredCodeException"] = "ExpiredCodeException";
    RespondToAuthChallengeException["ForbiddenException"] = "ForbiddenException";
    RespondToAuthChallengeException["InternalErrorException"] = "InternalErrorException";
    RespondToAuthChallengeException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    RespondToAuthChallengeException["InvalidParameterException"] = "InvalidParameterException";
    RespondToAuthChallengeException["InvalidPasswordException"] = "InvalidPasswordException";
    RespondToAuthChallengeException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    RespondToAuthChallengeException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    RespondToAuthChallengeException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    RespondToAuthChallengeException["MFAMethodNotFoundException"] = "MFAMethodNotFoundException";
    RespondToAuthChallengeException["NotAuthorizedException"] = "NotAuthorizedException";
    RespondToAuthChallengeException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    RespondToAuthChallengeException["ResourceNotFoundException"] = "ResourceNotFoundException";
    RespondToAuthChallengeException["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
    RespondToAuthChallengeException["TooManyRequestsException"] = "TooManyRequestsException";
    RespondToAuthChallengeException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    RespondToAuthChallengeException["UserLambdaValidationException"] = "UserLambdaValidationException";
    RespondToAuthChallengeException["UserNotConfirmedException"] = "UserNotConfirmedException";
    RespondToAuthChallengeException["UserNotFoundException"] = "UserNotFoundException";
})(RespondToAuthChallengeException || (RespondToAuthChallengeException = {}));
var SetUserMFAPreferenceException;
(function(SetUserMFAPreferenceException) {
    SetUserMFAPreferenceException["ForbiddenException"] = "ForbiddenException";
    SetUserMFAPreferenceException["InternalErrorException"] = "InternalErrorException";
    SetUserMFAPreferenceException["InvalidParameterException"] = "InvalidParameterException";
    SetUserMFAPreferenceException["NotAuthorizedException"] = "NotAuthorizedException";
    SetUserMFAPreferenceException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    SetUserMFAPreferenceException["ResourceNotFoundException"] = "ResourceNotFoundException";
    SetUserMFAPreferenceException["UserNotConfirmedException"] = "UserNotConfirmedException";
    SetUserMFAPreferenceException["UserNotFoundException"] = "UserNotFoundException";
})(SetUserMFAPreferenceException || (SetUserMFAPreferenceException = {}));
var SignUpException;
(function(SignUpException) {
    SignUpException["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
    SignUpException["InternalErrorException"] = "InternalErrorException";
    SignUpException["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
    SignUpException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    SignUpException["InvalidParameterException"] = "InvalidParameterException";
    SignUpException["InvalidPasswordException"] = "InvalidPasswordException";
    SignUpException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    SignUpException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    SignUpException["NotAuthorizedException"] = "NotAuthorizedException";
    SignUpException["ResourceNotFoundException"] = "ResourceNotFoundException";
    SignUpException["TooManyRequestsException"] = "TooManyRequestsException";
    SignUpException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    SignUpException["UserLambdaValidationException"] = "UserLambdaValidationException";
    SignUpException["UsernameExistsException"] = "UsernameExistsException";
})(SignUpException || (SignUpException = {}));
var UpdateUserAttributesException;
(function(UpdateUserAttributesException) {
    UpdateUserAttributesException["AliasExistsException"] = "AliasExistsException";
    UpdateUserAttributesException["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
    UpdateUserAttributesException["CodeMismatchException"] = "CodeMismatchException";
    UpdateUserAttributesException["ExpiredCodeException"] = "ExpiredCodeException";
    UpdateUserAttributesException["ForbiddenException"] = "ForbiddenException";
    UpdateUserAttributesException["InternalErrorException"] = "InternalErrorException";
    UpdateUserAttributesException["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
    UpdateUserAttributesException["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
    UpdateUserAttributesException["InvalidParameterException"] = "InvalidParameterException";
    UpdateUserAttributesException["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
    UpdateUserAttributesException["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
    UpdateUserAttributesException["NotAuthorizedException"] = "NotAuthorizedException";
    UpdateUserAttributesException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    UpdateUserAttributesException["ResourceNotFoundException"] = "ResourceNotFoundException";
    UpdateUserAttributesException["TooManyRequestsException"] = "TooManyRequestsException";
    UpdateUserAttributesException["UnexpectedLambdaException"] = "UnexpectedLambdaException";
    UpdateUserAttributesException["UserLambdaValidationException"] = "UserLambdaValidationException";
    UpdateUserAttributesException["UserNotConfirmedException"] = "UserNotConfirmedException";
    UpdateUserAttributesException["UserNotFoundException"] = "UserNotFoundException";
})(UpdateUserAttributesException || (UpdateUserAttributesException = {}));
var VerifySoftwareTokenException;
(function(VerifySoftwareTokenException) {
    VerifySoftwareTokenException["CodeMismatchException"] = "CodeMismatchException";
    VerifySoftwareTokenException["EnableSoftwareTokenMFAException"] = "EnableSoftwareTokenMFAException";
    VerifySoftwareTokenException["ForbiddenException"] = "ForbiddenException";
    VerifySoftwareTokenException["InternalErrorException"] = "InternalErrorException";
    VerifySoftwareTokenException["InvalidParameterException"] = "InvalidParameterException";
    VerifySoftwareTokenException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    VerifySoftwareTokenException["NotAuthorizedException"] = "NotAuthorizedException";
    VerifySoftwareTokenException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    VerifySoftwareTokenException["ResourceNotFoundException"] = "ResourceNotFoundException";
    VerifySoftwareTokenException["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
    VerifySoftwareTokenException["TooManyRequestsException"] = "TooManyRequestsException";
    VerifySoftwareTokenException["UserNotConfirmedException"] = "UserNotConfirmedException";
    VerifySoftwareTokenException["UserNotFoundException"] = "UserNotFoundException";
})(VerifySoftwareTokenException || (VerifySoftwareTokenException = {}));
var VerifyUserAttributeException;
(function(VerifyUserAttributeException) {
    VerifyUserAttributeException["AliasExistsException"] = "AliasExistsException";
    VerifyUserAttributeException["CodeMismatchException"] = "CodeMismatchException";
    VerifyUserAttributeException["ExpiredCodeException"] = "ExpiredCodeException";
    VerifyUserAttributeException["ForbiddenException"] = "ForbiddenException";
    VerifyUserAttributeException["InternalErrorException"] = "InternalErrorException";
    VerifyUserAttributeException["InvalidParameterException"] = "InvalidParameterException";
    VerifyUserAttributeException["LimitExceededException"] = "LimitExceededException";
    VerifyUserAttributeException["NotAuthorizedException"] = "NotAuthorizedException";
    VerifyUserAttributeException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    VerifyUserAttributeException["ResourceNotFoundException"] = "ResourceNotFoundException";
    VerifyUserAttributeException["TooManyRequestsException"] = "TooManyRequestsException";
    VerifyUserAttributeException["UserNotConfirmedException"] = "UserNotConfirmedException";
    VerifyUserAttributeException["UserNotFoundException"] = "UserNotFoundException";
})(VerifyUserAttributeException || (VerifyUserAttributeException = {}));
var UpdateDeviceStatusException;
(function(UpdateDeviceStatusException) {
    UpdateDeviceStatusException["ForbiddenException"] = "ForbiddenException";
    UpdateDeviceStatusException["InternalErrorException"] = "InternalErrorException";
    UpdateDeviceStatusException["InvalidParameterException"] = "InvalidParameterException";
    UpdateDeviceStatusException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    UpdateDeviceStatusException["NotAuthorizedException"] = "NotAuthorizedException";
    UpdateDeviceStatusException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    UpdateDeviceStatusException["ResourceNotFoundException"] = "ResourceNotFoundException";
    UpdateDeviceStatusException["TooManyRequestsException"] = "TooManyRequestsException";
    UpdateDeviceStatusException["UserNotConfirmedException"] = "UserNotConfirmedException";
    UpdateDeviceStatusException["UserNotFoundException"] = "UserNotFoundException";
})(UpdateDeviceStatusException || (UpdateDeviceStatusException = {}));
var ListDevicesException;
(function(ListDevicesException) {
    ListDevicesException["ForbiddenException"] = "ForbiddenException";
    ListDevicesException["InternalErrorException"] = "InternalErrorException";
    ListDevicesException["InvalidParameterException"] = "InvalidParameterException";
    ListDevicesException["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
    ListDevicesException["NotAuthorizedException"] = "NotAuthorizedException";
    ListDevicesException["PasswordResetRequiredException"] = "PasswordResetRequiredException";
    ListDevicesException["ResourceNotFoundException"] = "ResourceNotFoundException";
    ListDevicesException["TooManyRequestsException"] = "TooManyRequestsException";
    ListDevicesException["UserNotConfirmedException"] = "UserNotConfirmedException";
    ListDevicesException["UserNotFoundException"] = "UserNotFoundException";
})(ListDevicesException || (ListDevicesException = {}));
const SETUP_TOTP_EXCEPTION = 'SetUpTOTPException';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8UaIu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AUTO_SIGN_IN_EXCEPTION", ()=>AUTO_SIGN_IN_EXCEPTION);
parcelHelpers.export(exports, "DEVICE_METADATA_NOT_FOUND_EXCEPTION", ()=>DEVICE_METADATA_NOT_FOUND_EXCEPTION);
parcelHelpers.export(exports, "INVALID_APP_SCHEME_EXCEPTION", ()=>INVALID_APP_SCHEME_EXCEPTION);
parcelHelpers.export(exports, "INVALID_ORIGIN_EXCEPTION", ()=>INVALID_ORIGIN_EXCEPTION);
parcelHelpers.export(exports, "INVALID_PREFERRED_REDIRECT_EXCEPTION", ()=>INVALID_PREFERRED_REDIRECT_EXCEPTION);
parcelHelpers.export(exports, "INVALID_REDIRECT_EXCEPTION", ()=>INVALID_REDIRECT_EXCEPTION);
parcelHelpers.export(exports, "OAUTH_SIGNOUT_EXCEPTION", ()=>OAUTH_SIGNOUT_EXCEPTION);
parcelHelpers.export(exports, "TOKEN_REFRESH_EXCEPTION", ()=>TOKEN_REFRESH_EXCEPTION);
parcelHelpers.export(exports, "UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION", ()=>UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION);
parcelHelpers.export(exports, "USER_ALREADY_AUTHENTICATED_EXCEPTION", ()=>USER_ALREADY_AUTHENTICATED_EXCEPTION);
parcelHelpers.export(exports, "USER_UNAUTHENTICATED_EXCEPTION", ()=>USER_UNAUTHENTICATED_EXCEPTION);
parcelHelpers.export(exports, "invalidAppSchemeException", ()=>invalidAppSchemeException);
parcelHelpers.export(exports, "invalidOriginException", ()=>invalidOriginException);
parcelHelpers.export(exports, "invalidPreferredRedirectUrlException", ()=>invalidPreferredRedirectUrlException);
parcelHelpers.export(exports, "invalidRedirectException", ()=>invalidRedirectException);
var _authErrorMjs = require("./AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const USER_UNAUTHENTICATED_EXCEPTION = 'UserUnAuthenticatedException';
const USER_ALREADY_AUTHENTICATED_EXCEPTION = 'UserAlreadyAuthenticatedException';
const DEVICE_METADATA_NOT_FOUND_EXCEPTION = 'DeviceMetadataNotFoundException';
const AUTO_SIGN_IN_EXCEPTION = 'AutoSignInException';
const INVALID_REDIRECT_EXCEPTION = 'InvalidRedirectException';
const INVALID_APP_SCHEME_EXCEPTION = 'InvalidAppSchemeException';
const INVALID_PREFERRED_REDIRECT_EXCEPTION = 'InvalidPreferredRedirectUrlException';
const invalidRedirectException = new (0, _authErrorMjs.AuthError)({
    name: INVALID_REDIRECT_EXCEPTION,
    message: 'signInRedirect or signOutRedirect had an invalid format or was not found.',
    recoverySuggestion: 'Please make sure the signIn/Out redirect in your oauth config is valid.'
});
const invalidAppSchemeException = new (0, _authErrorMjs.AuthError)({
    name: INVALID_APP_SCHEME_EXCEPTION,
    message: 'A valid non-http app scheme was not found in the config.',
    recoverySuggestion: 'Please make sure a valid custom app scheme is present in the config.'
});
const invalidPreferredRedirectUrlException = new (0, _authErrorMjs.AuthError)({
    name: INVALID_PREFERRED_REDIRECT_EXCEPTION,
    message: 'The given preferredRedirectUrl does not match any items in the redirectSignOutUrls array from the config.',
    recoverySuggestion: 'Please make sure a matching preferredRedirectUrl is provided.'
});
const INVALID_ORIGIN_EXCEPTION = 'InvalidOriginException';
const invalidOriginException = new (0, _authErrorMjs.AuthError)({
    name: INVALID_ORIGIN_EXCEPTION,
    message: 'redirect is coming from a different origin. The oauth flow needs to be initiated from the same origin',
    recoverySuggestion: 'Please call signInWithRedirect from the same origin.'
});
const OAUTH_SIGNOUT_EXCEPTION = 'OAuthSignOutException';
const TOKEN_REFRESH_EXCEPTION = 'TokenRefreshException';
const UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION = 'UnexpectedSignInInterruptionException';

},{"./AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"d9HYR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCurrentUser", ()=>getCurrentUser);
var _core = require("@aws-amplify/core");
var _getCurrentUserMjs = require("./internal/getCurrentUser.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Gets the current user from the idToken.
 *
 * @param input -  The GetCurrentUserInput object.
 * @returns GetCurrentUserOutput
 * @throws - {@link InitiateAuthException} - Thrown when the service fails to refresh the tokens.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ const getCurrentUser = async ()=>{
    return (0, _getCurrentUserMjs.getCurrentUser)((0, _core.Amplify));
};

},{"@aws-amplify/core":"hJ80y","./internal/getCurrentUser.mjs":"1eseF","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1eseF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCurrentUser", ()=>getCurrentUser);
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../utils/types.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const getCurrentUser = async (amplify)=>{
    const authConfig = amplify.getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const tokens = await amplify.Auth.getTokens({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const { 'cognito:username': username, sub } = tokens.idToken?.payload ?? {};
    const authUser = {
        username: username,
        userId: sub
    };
    const signInDetails = getSignInDetailsFromTokens(tokens);
    if (signInDetails) authUser.signInDetails = signInDetails;
    return authUser;
};
function getSignInDetailsFromTokens(tokens) {
    return tokens?.signInDetails;
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../utils/types.mjs":"7EObU","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7EObU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OAuthStorageKeys", ()=>OAuthStorageKeys);
parcelHelpers.export(exports, "assertAuthTokens", ()=>assertAuthTokens);
parcelHelpers.export(exports, "assertAuthTokensWithRefreshToken", ()=>assertAuthTokensWithRefreshToken);
parcelHelpers.export(exports, "assertDeviceMetadata", ()=>assertDeviceMetadata);
parcelHelpers.export(exports, "assertIdTokenInAuthTokens", ()=>assertIdTokenInAuthTokens);
parcelHelpers.export(exports, "isTypeUserPoolConfig", ()=>isTypeUserPoolConfig);
parcelHelpers.export(exports, "oAuthTokenRefreshException", ()=>oAuthTokenRefreshException);
parcelHelpers.export(exports, "tokenRefreshException", ()=>tokenRefreshException);
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function isTypeUserPoolConfig(authConfig) {
    if (authConfig && authConfig.Cognito.userPoolId && authConfig.Cognito.userPoolClientId) return true;
    return false;
}
function assertAuthTokens(tokens) {
    if (!tokens || !tokens.accessToken) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _constantsMjs.USER_UNAUTHENTICATED_EXCEPTION),
        message: 'User needs to be authenticated to call this API.',
        recoverySuggestion: 'Sign in before calling this API again.'
    });
}
function assertIdTokenInAuthTokens(tokens) {
    if (!tokens || !tokens.idToken) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _constantsMjs.USER_UNAUTHENTICATED_EXCEPTION),
        message: 'User needs to be authenticated to call this API.',
        recoverySuggestion: 'Sign in before calling this API again.'
    });
}
const oAuthTokenRefreshException = new (0, _authErrorMjs.AuthError)({
    name: (0, _constantsMjs.TOKEN_REFRESH_EXCEPTION),
    message: `Token refresh is not supported when authenticated with the 'implicit grant' (token) oauth flow. 
	Please change your oauth configuration to use 'code grant' flow.`,
    recoverySuggestion: `Please logout and change your Amplify configuration to use "code grant" flow. 
	E.g { responseType: 'code' }`
});
const tokenRefreshException = new (0, _authErrorMjs.AuthError)({
    name: (0, _constantsMjs.USER_UNAUTHENTICATED_EXCEPTION),
    message: 'User needs to be authenticated to call this API.',
    recoverySuggestion: 'Sign in before calling this API again.'
});
function assertAuthTokensWithRefreshToken(tokens) {
    if (isAuthenticatedWithImplicitOauthFlow(tokens)) throw oAuthTokenRefreshException;
    if (!isAuthenticatedWithRefreshToken(tokens)) throw tokenRefreshException;
}
function assertDeviceMetadata(deviceMetadata) {
    if (!deviceMetadata || !deviceMetadata.deviceKey || !deviceMetadata.deviceGroupKey || !deviceMetadata.randomPassword) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _constantsMjs.DEVICE_METADATA_NOT_FOUND_EXCEPTION),
        message: 'Either deviceKey, deviceGroupKey or secretPassword were not found during the sign-in process.',
        recoverySuggestion: 'Make sure to not clear storage after calling the signIn API.'
    });
}
const OAuthStorageKeys = {
    inflightOAuth: 'inflightOAuth',
    oauthSignIn: 'oauthSignIn',
    oauthPKCE: 'oauthPKCE',
    oauthState: 'oauthState'
};
function isAuthenticated(tokens) {
    return tokens?.accessToken || tokens?.idToken;
}
function isAuthenticatedWithRefreshToken(tokens) {
    return isAuthenticated(tokens) && tokens?.refreshToken;
}
function isAuthenticatedWithImplicitOauthFlow(tokens) {
    return isAuthenticated(tokens) && !tokens?.refreshToken;
}

},{"../../../errors/AuthError.mjs":"eST5l","../../../errors/constants.mjs":"8UaIu","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lBlCr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAuthUserAgentValue", ()=>getAuthUserAgentValue);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const getAuthUserAgentValue = (action, customUserAgentDetails)=>(0, _utils.getAmplifyUserAgent)({
        category: (0, _utils.Category).Auth,
        action,
        ...customUserAgentDetails
    });

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9g63I":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createInitiateAuthClient", ()=>createInitiateAuthClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createInitiateAuthClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('InitiateAuth'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"atnR1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "composeServiceApi", ()=>(0, _composeServiceApiMjs.composeServiceApi));
parcelHelpers.export(exports, "composeTransferHandler", ()=>(0, _composeTransferHandlerMjs.composeTransferHandler));
var _composeServiceApiMjs = require("./composeServiceApi.mjs");
var _composeTransferHandlerMjs = require("./composeTransferHandler.mjs");

},{"./composeServiceApi.mjs":"4yvCA","./composeTransferHandler.mjs":"8JUvX","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"qnlfC":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUserPoolSerializer", ()=>createUserPoolSerializer);
const createUserPoolSerializer = (operation)=>(input, endpoint)=>{
        const headers = getSharedHeaders(operation);
        const body = JSON.stringify(input);
        return buildHttpRpcRequest(endpoint, headers, body);
    };
const getSharedHeaders = (operation)=>({
        'content-type': 'application/x-amz-json-1.1',
        'x-amz-target': `AWSCognitoIdentityProviderService.${operation}`
    });
const buildHttpRpcRequest = ({ url }, headers, body)=>({
        headers,
        url,
        body,
        method: 'POST'
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"i8vuQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUserPoolDeserializer", ()=>createUserPoolDeserializer);
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _assertServiceErrorMjs = require("../../../../../../errors/utils/assertServiceError.mjs");
var _authErrorMjs = require("../../../../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createUserPoolDeserializer = ()=>async (response)=>{
        if (response.statusCode >= 300) {
            const error = await (0, _awsClientUtils.parseJsonError)(response);
            (0, _assertServiceErrorMjs.assertServiceError)(error);
            throw new (0, _authErrorMjs.AuthError)({
                name: error.name,
                message: error.message,
                metadata: error.$metadata
            });
        }
        return (0, _awsClientUtils.parseJsonBody)(response);
    };

},{"@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5U21t":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDnsSuffix", ()=>(0, _getDnsSuffixMjs.getDnsSuffix));
parcelHelpers.export(exports, "fetchTransferHandler", ()=>(0, _fetchMjs.fetchTransferHandler));
parcelHelpers.export(exports, "unauthenticatedHandler", ()=>(0, _unauthenticatedMjs.unauthenticatedHandler));
parcelHelpers.export(exports, "authenticatedHandler", ()=>(0, _authenticatedMjs.authenticatedHandler));
parcelHelpers.export(exports, "signRequest", ()=>(0, _signRequestMjs.signRequest));
parcelHelpers.export(exports, "presignUrl", ()=>(0, _presignUrlMjs.presignUrl));
parcelHelpers.export(exports, "EMPTY_SHA256_HASH", ()=>(0, _constantsMjs.EMPTY_HASH));
parcelHelpers.export(exports, "getHashedPayload", ()=>(0, _getHashedPayloadMjs.getHashedPayload));
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>(0, _extendedEncodeURIComponentMjs.extendedEncodeURIComponent));
parcelHelpers.export(exports, "signingMiddlewareFactory", ()=>(0, _middlewareMjs.signingMiddlewareFactory));
parcelHelpers.export(exports, "retryMiddlewareFactory", ()=>(0, _retryMiddlewareMjs.retryMiddlewareFactory));
parcelHelpers.export(exports, "jitteredBackoff", ()=>(0, _jitteredBackoffMjs.jitteredBackoff));
parcelHelpers.export(exports, "getRetryDecider", ()=>(0, _defaultRetryDeciderMjs.getRetryDecider));
parcelHelpers.export(exports, "amzSdkInvocationIdHeaderMiddlewareFactory", ()=>(0, _amzSdkInvocationIdHeaderMiddlewareMjs.amzSdkInvocationIdHeaderMiddlewareFactory));
parcelHelpers.export(exports, "amzSdkRequestHeaderMiddlewareFactory", ()=>(0, _amzSdkRequestHeaderMiddlewareMjs.amzSdkRequestHeaderMiddlewareFactory));
parcelHelpers.export(exports, "userAgentMiddlewareFactory", ()=>(0, _middlewareMjs1.userAgentMiddlewareFactory));
parcelHelpers.export(exports, "parseMetadata", ()=>(0, _responseInfoMjs.parseMetadata));
parcelHelpers.export(exports, "parseJsonBody", ()=>(0, _jsonMjs.parseJsonBody));
parcelHelpers.export(exports, "parseJsonError", ()=>(0, _jsonMjs.parseJsonError));
parcelHelpers.export(exports, "withMemoization", ()=>(0, _memoizationMjs.withMemoization));
var _getDnsSuffixMjs = require("./endpoints/getDnsSuffix.mjs");
var _fetchMjs = require("./handlers/fetch.mjs");
var _unauthenticatedMjs = require("./handlers/aws/unauthenticated.mjs");
var _authenticatedMjs = require("./handlers/aws/authenticated.mjs");
var _signRequestMjs = require("./middleware/signing/signer/signatureV4/signRequest.mjs");
var _presignUrlMjs = require("./middleware/signing/signer/signatureV4/presignUrl.mjs");
var _constantsMjs = require("./middleware/signing/signer/signatureV4/constants.mjs");
var _getHashedPayloadMjs = require("./middleware/signing/signer/signatureV4/utils/getHashedPayload.mjs");
var _extendedEncodeURIComponentMjs = require("./middleware/signing/utils/extendedEncodeURIComponent.mjs");
var _middlewareMjs = require("./middleware/signing/middleware.mjs");
var _retryMiddlewareMjs = require("./middleware/retry/retryMiddleware.mjs");
var _jitteredBackoffMjs = require("./middleware/retry/jitteredBackoff.mjs");
var _defaultRetryDeciderMjs = require("./middleware/retry/defaultRetryDecider.mjs");
var _amzSdkInvocationIdHeaderMiddlewareMjs = require("./middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs");
var _amzSdkRequestHeaderMiddlewareMjs = require("./middleware/retry/amzSdkRequestHeaderMiddleware.mjs");
var _middlewareMjs1 = require("./middleware/userAgent/middleware.mjs");
var _responseInfoMjs = require("./serde/responseInfo.mjs");
var _jsonMjs = require("./serde/json.mjs");
var _memoizationMjs = require("./utils/memoization.mjs");

},{"./endpoints/getDnsSuffix.mjs":"249Ub","./handlers/fetch.mjs":"4pQUT","./handlers/aws/unauthenticated.mjs":"lzz2j","./handlers/aws/authenticated.mjs":"5QBw2","./middleware/signing/signer/signatureV4/signRequest.mjs":"jCQnb","./middleware/signing/signer/signatureV4/presignUrl.mjs":"3NysQ","./middleware/signing/signer/signatureV4/constants.mjs":"8HTv9","./middleware/signing/signer/signatureV4/utils/getHashedPayload.mjs":"ij5fh","./middleware/signing/utils/extendedEncodeURIComponent.mjs":"5f64B","./middleware/signing/middleware.mjs":"hpAwG","./middleware/retry/retryMiddleware.mjs":"9XrdY","./middleware/retry/jitteredBackoff.mjs":"ecaUw","./middleware/retry/defaultRetryDecider.mjs":"eKSsN","./middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs":"bIERL","./middleware/retry/amzSdkRequestHeaderMiddleware.mjs":"6xHaL","./middleware/userAgent/middleware.mjs":"iS1O3","./serde/responseInfo.mjs":"bmNRC","./serde/json.mjs":"lahjC","./utils/memoization.mjs":"aKxCN","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fOoR8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertServiceError", ()=>assertServiceError);
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function assertServiceError(error) {
    if (!error || error.name === 'Error' || error instanceof TypeError) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _utils.AmplifyErrorCode).Unknown,
        message: 'An unknown error has occurred.',
        underlyingError: error
    });
}

},{"@aws-amplify/core/internals/utils":"dRREz","../AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jWExT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoUserPoolTransferHandler", ()=>cognitoUserPoolTransferHandler);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * A Cognito Identity-specific middleware that disables caching for all requests.
 */ const disableCacheMiddlewareFactory = ()=>(next, _)=>async function disableCacheMiddleware(request) {
            request.headers['cache-control'] = 'no-store';
            return next(request);
        };
/**
 * A Cognito Identity-specific transfer handler that does NOT sign requests, and
 * disables caching.
 *
 * @internal
 */ const cognitoUserPoolTransferHandler = (0, _composers.composeTransferHandler)((0, _awsClientUtils.unauthenticatedHandler), [
    disableCacheMiddlewareFactory
]);

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dhcbk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_SERVICE_CLIENT_API_CONFIG", ()=>DEFAULT_SERVICE_CLIENT_API_CONFIG);
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("../../../constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_SERVICE_CLIENT_API_CONFIG = {
    service: (0, _constantsMjs.COGNITO_IDP_SERVICE_NAME),
    retryDecider: (0, _awsClientUtils.getRetryDecider)((0, _awsClientUtils.parseJsonError)),
    computeDelay: (0, _awsClientUtils.jitteredBackoff),
    get userAgentValue () {
        return (0, _utils.getAmplifyUserAgent)();
    },
    cache: 'no-store'
};

},{"@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","../../../constants.mjs":"f5cfo","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"f5cfo":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * The service name used to sign requests if the API requires authentication.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "COGNITO_IDP_SERVICE_NAME", ()=>COGNITO_IDP_SERVICE_NAME);
const COGNITO_IDP_SERVICE_NAME = 'cognito-idp';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fViGp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRespondToAuthChallengeClient", ()=>createRespondToAuthChallengeClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createRespondToAuthChallengeClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('RespondToAuthChallenge'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"inOun":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createVerifySoftwareTokenClient", ()=>createVerifySoftwareTokenClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createVerifySoftwareTokenClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('VerifySoftwareToken'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1urqd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createAssociateSoftwareTokenClient", ()=>createAssociateSoftwareTokenClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createAssociateSoftwareTokenClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('AssociateSoftwareToken'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2iL3Z":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCognitoUserPoolEndpointResolver", ()=>createCognitoUserPoolEndpointResolver);
var _utils = require("@aws-amplify/core/internals/utils");
var _cognitoUserPoolEndpointResolverMjs = require("../../../foundation/cognitoUserPoolEndpointResolver.mjs");
const createCognitoUserPoolEndpointResolver = ({ endpointOverride })=>(input)=>{
        if (endpointOverride) return {
            url: new (0, _utils.AmplifyUrl)(endpointOverride)
        };
        return (0, _cognitoUserPoolEndpointResolverMjs.cognitoUserPoolEndpointResolver)(input);
    };

},{"@aws-amplify/core/internals/utils":"dRREz","../../../foundation/cognitoUserPoolEndpointResolver.mjs":"7CCJM","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7CCJM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoUserPoolEndpointResolver", ()=>cognitoUserPoolEndpointResolver);
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const cognitoUserPoolEndpointResolver = ({ region })=>({
        url: new (0, _utils.AmplifyUrl)(`https://${(0, _constantsMjs.COGNITO_IDP_SERVICE_NAME)}.${region}.${(0, _awsClientUtils.getDnsSuffix)(region)}`)
    });

},{"@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"f5cfo","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"509rG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleWebAuthnSignInResult", ()=>handleWebAuthnSignInResult);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _cacheTokensMjs = require("../../../providers/cognito/tokenProvider/cacheTokens.mjs");
var _dispatchSignedInHubEventMjs = require("../../../providers/cognito/utils/dispatchSignedInHubEvent.mjs");
var _autoSignInStoreMjs = require("../../utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../utils/store/signInStore.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _errorsMjs1 = require("../../utils/passkey/errors.mjs");
var _getPasskeyMjs = require("../../utils/passkey/getPasskey.mjs");
var _getNewDeviceMetadataMjs = require("../../../providers/cognito/utils/getNewDeviceMetadata.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function handleWebAuthnSignInResult(challengeParameters) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { username, signInSession, signInDetails, challengeName } = (0, _signInStoreMjs.signInStore).getState();
    if (challengeName !== 'WEB_AUTHN' || !username) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: 'Unable to proceed due to invalid sign in state.'
    });
    const { CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions } = challengeParameters;
    (0, _errorsMjs1.assertPasskeyError)(!!credentialRequestOptions, (0, _errorsMjs1.PasskeyErrorCode).InvalidPasskeyAuthenticationOptions);
    const cred = await (0, _getPasskeyMjs.getPasskey)(JSON.parse(credentialRequestOptions));
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: authConfig.userPoolEndpoint
        })
    });
    const { ChallengeName: nextChallengeName, ChallengeParameters: nextChallengeParameters, AuthenticationResult: authenticationResult, Session: nextSession } = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(authConfig.userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, {
        ChallengeName: 'WEB_AUTHN',
        ChallengeResponses: {
            USERNAME: username,
            CREDENTIAL: JSON.stringify(cred)
        },
        ClientId: authConfig.userPoolClientId,
        Session: signInSession
    });
    (0, _signInStoreMjs.setActiveSignInState)({
        signInSession: nextSession,
        username,
        challengeName: nextChallengeName,
        signInDetails
    });
    if (authenticationResult) {
        await (0, _cacheTokensMjs.cacheCognitoTokens)({
            ...authenticationResult,
            username,
            NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                userPoolId: authConfig.userPoolId,
                userPoolEndpoint: authConfig.userPoolEndpoint,
                newDeviceMetadata: authenticationResult.NewDeviceMetadata,
                accessToken: authenticationResult.AccessToken
            }),
            signInDetails
        });
        (0, _signInStoreMjs.signInStore).dispatch({
            type: 'RESET_STATE'
        });
        await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
        return {
            isSignedIn: true,
            nextStep: {
                signInStep: 'DONE'
            }
        };
    }
    if (nextChallengeName === 'WEB_AUTHN') throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: 'Sequential WEB_AUTHN challenges returned from underlying service cannot be handled.'
    });
    return {
        challengeName: nextChallengeName,
        challengeParameters: nextChallengeParameters
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../common/AuthErrorStrings.mjs":"dhvVB","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../errors/AuthError.mjs":"eST5l","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../../providers/cognito/tokenProvider/cacheTokens.mjs":"hPE3v","../../../providers/cognito/utils/dispatchSignedInHubEvent.mjs":"1QBvv","../../utils/store/autoSignInStore.mjs":"8L9Z2","../../utils/store/signInStore.mjs":"8w0aF","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../utils/passkey/errors.mjs":"6RWlb","../../utils/passkey/getPasskey.mjs":"693j8","../../../providers/cognito/utils/getNewDeviceMetadata.mjs":"iZ9p7","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hPE3v":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cacheCognitoTokens", ()=>cacheCognitoTokens);
var _utils = require("@aws-amplify/core/internals/utils");
var _tokenProviderMjs = require("./tokenProvider.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function cacheCognitoTokens(AuthenticationResult) {
    if (AuthenticationResult.AccessToken) {
        const accessToken = (0, _utils.decodeJWT)(AuthenticationResult.AccessToken);
        const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;
        const currentTime = new Date().getTime();
        const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;
        let idToken;
        let refreshToken;
        let deviceMetadata;
        if (AuthenticationResult.RefreshToken) refreshToken = AuthenticationResult.RefreshToken;
        if (AuthenticationResult.IdToken) idToken = (0, _utils.decodeJWT)(AuthenticationResult.IdToken);
        if (AuthenticationResult?.NewDeviceMetadata) deviceMetadata = AuthenticationResult.NewDeviceMetadata;
        const tokens = {
            accessToken,
            idToken,
            refreshToken,
            clockDrift,
            deviceMetadata,
            username: AuthenticationResult.username
        };
        if (AuthenticationResult?.signInDetails) tokens.signInDetails = AuthenticationResult.signInDetails;
        await (0, _tokenProviderMjs.tokenOrchestrator).setTokens({
            tokens
        });
    } else // This would be a service error
    throw new (0, _utils.AmplifyError)({
        message: 'Invalid tokens',
        name: 'InvalidTokens',
        recoverySuggestion: 'Check Cognito UserPool settings'
    });
}

},{"@aws-amplify/core/internals/utils":"dRREz","./tokenProvider.mjs":"dIoqv","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dIoqv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoUserPoolsTokenProvider", ()=>cognitoUserPoolsTokenProvider);
parcelHelpers.export(exports, "tokenOrchestrator", ()=>tokenOrchestrator);
var _cognitoUserPoolsTokenProviderMjs = require("./CognitoUserPoolsTokenProvider.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * The default provider for the JWT access token and ID token issued from the configured Cognito user pool. It manages
 * the refresh and storage of the tokens. It stores the tokens in `window.localStorage` if available, and falls back to
 * in-memory storage if not.
 */ const cognitoUserPoolsTokenProvider = new (0, _cognitoUserPoolsTokenProviderMjs.CognitoUserPoolsTokenProvider)();
const { tokenOrchestrator } = cognitoUserPoolsTokenProvider;

},{"./CognitoUserPoolsTokenProvider.mjs":"9WeYx","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9WeYx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoUserPoolsTokenProvider", ()=>CognitoUserPoolsTokenProvider);
var _core = require("@aws-amplify/core");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _tokenStoreMjs = require("./TokenStore.mjs");
var _tokenOrchestratorMjs = require("./TokenOrchestrator.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class CognitoUserPoolsTokenProvider {
    constructor(){
        this.authTokenStore = new (0, _tokenStoreMjs.DefaultTokenStore)();
        this.authTokenStore.setKeyValueStorage((0, _core.defaultStorage));
        this.tokenOrchestrator = new (0, _tokenOrchestratorMjs.TokenOrchestrator)();
        this.tokenOrchestrator.setAuthTokenStore(this.authTokenStore);
        this.tokenOrchestrator.setTokenRefresher((0, _refreshAuthTokensMjs.refreshAuthTokens));
    }
    getTokens({ forceRefresh } = {
        forceRefresh: false
    }) {
        return this.tokenOrchestrator.getTokens({
            forceRefresh
        });
    }
    setKeyValueStorage(keyValueStorage) {
        this.authTokenStore.setKeyValueStorage(keyValueStorage);
    }
    setAuthConfig(authConfig) {
        this.authTokenStore.setAuthConfig(authConfig);
        this.tokenOrchestrator.setAuthConfig(authConfig);
    }
}

},{"@aws-amplify/core":"hJ80y","../utils/refreshAuthTokens.mjs":"67ciz","./TokenStore.mjs":"jgGDi","./TokenOrchestrator.mjs":"fgVXV","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"67ciz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "refreshAuthTokens", ()=>refreshAuthTokens);
parcelHelpers.export(exports, "refreshAuthTokensWithoutDedupe", ()=>refreshAuthTokensWithoutDedupe);
var _utils = require("@aws-amplify/core/internals/utils");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("./types.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _createGetTokensFromRefreshTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetTokensFromRefreshTokenClient.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const refreshAuthTokensFunction = async ({ tokens, authConfig, username })=>{
    (0, _utils.assertTokenProviderConfig)(authConfig?.Cognito);
    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;
    const region = (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId);
    (0, _typesMjs.assertAuthTokensWithRefreshToken)(tokens);
    const getTokensFromRefreshToken = (0, _createGetTokensFromRefreshTokenClientMjs.createGetTokensFromRefreshTokenClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { AuthenticationResult } = await getTokensFromRefreshToken({
        region
    }, {
        ClientId: userPoolClientId,
        RefreshToken: tokens.refreshToken,
        DeviceKey: tokens.deviceMetadata?.deviceKey
    });
    const accessToken = (0, _utils.decodeJWT)(AuthenticationResult?.AccessToken ?? '');
    const idToken = AuthenticationResult?.IdToken ? (0, _utils.decodeJWT)(AuthenticationResult.IdToken) : undefined;
    const { iat } = accessToken.payload;
    // This should never happen. If it does, it's a bug from the service.
    if (!iat) throw new (0, _authErrorMjs.AuthError)({
        name: 'iatNotFoundException',
        message: 'iat not found in access token'
    });
    const clockDrift = iat * 1000 - new Date().getTime();
    return {
        accessToken,
        idToken,
        clockDrift,
        refreshToken: AuthenticationResult?.RefreshToken ?? tokens.refreshToken,
        username
    };
};
const refreshAuthTokens = (0, _utils.deDupeAsyncFunction)(refreshAuthTokensFunction);
const refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;

},{"@aws-amplify/core/internals/utils":"dRREz","../../../foundation/parsers/regionParsers.mjs":"1DoVs","./types.mjs":"7EObU","../../../errors/AuthError.mjs":"eST5l","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetTokensFromRefreshTokenClient.mjs":"9NIwp","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9NIwp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetTokensFromRefreshTokenClient", ()=>createGetTokensFromRefreshTokenClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGetTokensFromRefreshTokenClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('GetTokensFromRefreshToken'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jgGDi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultTokenStore", ()=>DefaultTokenStore);
parcelHelpers.export(exports, "createKeysForAuthStorage", ()=>createKeysForAuthStorage);
parcelHelpers.export(exports, "getAuthStorageKeys", ()=>getAuthStorageKeys);
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _typesMjs = require("./types.mjs");
var _errorHelpersMjs = require("./errorHelpers.mjs");
var _constantsMjs = require("./constants.mjs");
class DefaultTokenStore {
    getKeyValueStorage() {
        if (!this.keyValueStorage) throw new (0, _authErrorMjs.AuthError)({
            name: 'KeyValueStorageNotFoundException',
            message: 'KeyValueStorage was not found in TokenStore'
        });
        return this.keyValueStorage;
    }
    setKeyValueStorage(keyValueStorage) {
        this.keyValueStorage = keyValueStorage;
    }
    setAuthConfig(authConfig) {
        this.authConfig = authConfig;
    }
    async loadTokens() {
        // TODO(v6): migration logic should be here
        // Reading V5 tokens old format
        try {
            const authKeys = await this.getAuthKeys();
            const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);
            if (!accessTokenString) throw new (0, _authErrorMjs.AuthError)({
                name: 'NoSessionFoundException',
                message: 'Auth session was not found. Make sure to call signIn.'
            });
            const accessToken = (0, _utils.decodeJWT)(accessTokenString);
            const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);
            const idToken = itString ? (0, _utils.decodeJWT)(itString) : undefined;
            const refreshToken = await this.getKeyValueStorage().getItem(authKeys.refreshToken) ?? undefined;
            const clockDriftString = await this.getKeyValueStorage().getItem(authKeys.clockDrift) ?? '0';
            const clockDrift = Number.parseInt(clockDriftString);
            const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);
            const tokens = {
                accessToken,
                idToken,
                refreshToken,
                deviceMetadata: await this.getDeviceMetadata() ?? undefined,
                clockDrift,
                username: await this.getLastAuthUser()
            };
            if (signInDetails) tokens.signInDetails = JSON.parse(signInDetails);
            return tokens;
        } catch (err) {
            return null;
        }
    }
    async storeTokens(tokens) {
        (0, _errorHelpersMjs.assert)(tokens !== undefined, (0, _errorHelpersMjs.TokenProviderErrorCode).InvalidAuthTokens);
        const lastAuthUser = tokens.username;
        await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);
        const authKeys = await this.getAuthKeys();
        await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());
        if (tokens.idToken) await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());
        else await this.getKeyValueStorage().removeItem(authKeys.idToken);
        if (tokens.refreshToken) await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);
        else await this.getKeyValueStorage().removeItem(authKeys.refreshToken);
        if (tokens.deviceMetadata) {
            if (tokens.deviceMetadata.deviceKey) await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);
            if (tokens.deviceMetadata.deviceGroupKey) await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);
            await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);
        }
        if (tokens.signInDetails) await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));
        else await this.getKeyValueStorage().removeItem(authKeys.signInDetails);
        await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);
    }
    async clearTokens() {
        const authKeys = await this.getAuthKeys();
        // Not calling clear because it can remove data that is not managed by AuthTokenStore
        await Promise.all([
            this.getKeyValueStorage().removeItem(authKeys.accessToken),
            this.getKeyValueStorage().removeItem(authKeys.idToken),
            this.getKeyValueStorage().removeItem(authKeys.clockDrift),
            this.getKeyValueStorage().removeItem(authKeys.refreshToken),
            this.getKeyValueStorage().removeItem(authKeys.signInDetails),
            this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()),
            this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)
        ]);
    }
    async getDeviceMetadata(username) {
        const authKeys = await this.getAuthKeys(username);
        const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);
        const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);
        const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);
        return randomPassword && deviceGroupKey && deviceKey ? {
            deviceKey,
            deviceGroupKey,
            randomPassword
        } : null;
    }
    async clearDeviceMetadata(username) {
        const authKeys = await this.getAuthKeys(username);
        await Promise.all([
            this.getKeyValueStorage().removeItem(authKeys.deviceKey),
            this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey),
            this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)
        ]);
    }
    async getAuthKeys(username) {
        (0, _utils.assertTokenProviderConfig)(this.authConfig?.Cognito);
        const lastAuthUser = username ?? await this.getLastAuthUser();
        return createKeysForAuthStorage((0, _constantsMjs.AUTH_KEY_PREFIX), `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);
    }
    getLastAuthUserKey() {
        (0, _utils.assertTokenProviderConfig)(this.authConfig?.Cognito);
        const identifier = this.authConfig.Cognito.userPoolClientId;
        return `${0, _constantsMjs.AUTH_KEY_PREFIX}.${identifier}.LastAuthUser`;
    }
    async getLastAuthUser() {
        const lastAuthUser = await this.getKeyValueStorage().getItem(this.getLastAuthUserKey()) ?? 'username';
        return lastAuthUser;
    }
    async setOAuthMetadata(metadata) {
        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
        await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));
    }
    async getOAuthMetadata() {
        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
        const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);
        return oauthMetadata && JSON.parse(oauthMetadata);
    }
}
const createKeysForAuthStorage = (provider, identifier)=>{
    return getAuthStorageKeys((0, _typesMjs.AuthTokenStorageKeys))(`${provider}`, identifier);
};
function getAuthStorageKeys(authKeys) {
    const keys = Object.values({
        ...authKeys
    });
    return (prefix, identifier)=>keys.reduce((acc, authKey)=>({
                ...acc,
                [authKey]: `${prefix}.${identifier}.${authKey}`
            }), {});
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../../errors/AuthError.mjs":"eST5l","./types.mjs":"bKQgl","./errorHelpers.mjs":"4wyMk","./constants.mjs":"1egCX","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bKQgl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthTokenStorageKeys", ()=>AuthTokenStorageKeys);
const AuthTokenStorageKeys = {
    accessToken: 'accessToken',
    idToken: 'idToken',
    oidcProvider: 'oidcProvider',
    clockDrift: 'clockDrift',
    refreshToken: 'refreshToken',
    deviceKey: 'deviceKey',
    randomPasswordKey: 'randomPasswordKey',
    deviceGroupKey: 'deviceGroupKey',
    signInDetails: 'signInDetails',
    oauthMetadata: 'oauthMetadata'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4wyMk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenProviderErrorCode", ()=>TokenProviderErrorCode);
parcelHelpers.export(exports, "assert", ()=>assert);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var TokenProviderErrorCode;
(function(TokenProviderErrorCode) {
    TokenProviderErrorCode["InvalidAuthTokens"] = "InvalidAuthTokens";
})(TokenProviderErrorCode || (TokenProviderErrorCode = {}));
const tokenValidationErrorMap = {
    [TokenProviderErrorCode.InvalidAuthTokens]: {
        message: 'Invalid tokens.',
        recoverySuggestion: 'Make sure the tokens are valid.'
    }
};
const assert = (0, _utils.createAssertionFunction)(tokenValidationErrorMap);

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1egCX":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AUTH_KEY_PREFIX", ()=>AUTH_KEY_PREFIX);
const AUTH_KEY_PREFIX = 'CognitoIdentityServiceProvider';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"fgVXV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenOrchestrator", ()=>TokenOrchestrator);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _oAuthStoreMjs = require("../utils/oauth/oAuthStore.mjs");
var _inflightPromiseMjs = require("../utils/oauth/inflightPromise.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class TokenOrchestrator {
    constructor(){
        this.waitForInflightOAuth = (0, _utils.isBrowser)() ? async ()=>{
            if (!await (0, _oAuthStoreMjs.oAuthStore).loadOAuthInFlight()) return;
            if (this.inflightPromise) return this.inflightPromise;
            // when there is valid oauth config and there is an inflight oauth flow, try
            // to block async calls that require fetching tokens before the oauth flow completes
            // e.g. getCurrentUser, fetchAuthSession etc.
            this.inflightPromise = new Promise((resolve, _reject)=>{
                (0, _inflightPromiseMjs.addInflightPromise)(resolve);
            });
            return this.inflightPromise;
        } : async ()=>{
        // no-op for non-browser environments
        };
    }
    setAuthConfig(authConfig) {
        (0, _oAuthStoreMjs.oAuthStore).setAuthConfig(authConfig.Cognito);
        this.authConfig = authConfig;
    }
    setTokenRefresher(tokenRefresher) {
        this.tokenRefresher = tokenRefresher;
    }
    setAuthTokenStore(tokenStore) {
        this.tokenStore = tokenStore;
    }
    getTokenStore() {
        if (!this.tokenStore) throw new (0, _authErrorMjs.AuthError)({
            name: 'EmptyTokenStoreException',
            message: 'TokenStore not set'
        });
        return this.tokenStore;
    }
    getTokenRefresher() {
        if (!this.tokenRefresher) throw new (0, _authErrorMjs.AuthError)({
            name: 'EmptyTokenRefresherException',
            message: 'TokenRefresher not set'
        });
        return this.tokenRefresher;
    }
    async getTokens(options) {
        let tokens;
        try {
            (0, _utils.assertTokenProviderConfig)(this.authConfig?.Cognito);
        } catch (_err) {
            // Token provider not configured
            return null;
        }
        await this.waitForInflightOAuth();
        this.inflightPromise = undefined;
        tokens = await this.getTokenStore().loadTokens();
        const username = await this.getTokenStore().getLastAuthUser();
        if (tokens === null) return null;
        const idTokenExpired = !!tokens?.idToken && (0, _utils.isTokenExpired)({
            expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1000,
            clockDrift: tokens.clockDrift ?? 0
        });
        const accessTokenExpired = (0, _utils.isTokenExpired)({
            expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1000,
            clockDrift: tokens.clockDrift ?? 0
        });
        if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {
            tokens = await this.refreshTokens({
                tokens,
                username
            });
            if (tokens === null) return null;
        }
        return {
            accessToken: tokens?.accessToken,
            idToken: tokens?.idToken,
            signInDetails: tokens?.signInDetails
        };
    }
    async refreshTokens({ tokens, username }) {
        try {
            const { signInDetails } = tokens;
            const newTokens = await this.getTokenRefresher()({
                tokens,
                authConfig: this.authConfig,
                username
            });
            newTokens.signInDetails = signInDetails;
            await this.setTokens({
                tokens: newTokens
            });
            (0, _core.Hub).dispatch('auth', {
                event: 'tokenRefresh'
            }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
            return newTokens;
        } catch (err) {
            return this.handleErrors(err);
        }
    }
    handleErrors(err) {
        (0, _assertServiceErrorMjs.assertServiceError)(err);
        if (err.name !== (0, _utils.AmplifyErrorCode).NetworkError) // TODO(v6): Check errors on client
        this.clearTokens();
        (0, _core.Hub).dispatch('auth', {
            event: 'tokenRefresh_failure',
            data: {
                error: err
            }
        }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
        if (err.name.startsWith('NotAuthorizedException')) return null;
        throw err;
    }
    async setTokens({ tokens }) {
        return this.getTokenStore().storeTokens(tokens);
    }
    async clearTokens() {
        return this.getTokenStore().clearTokens();
    }
    getDeviceMetadata(username) {
        return this.getTokenStore().getDeviceMetadata(username);
    }
    clearDeviceMetadata(username) {
        return this.getTokenStore().clearDeviceMetadata(username);
    }
    setOAuthMetadata(metadata) {
        return this.getTokenStore().setOAuthMetadata(metadata);
    }
    getOAuthMetadata() {
        return this.getTokenStore().getOAuthMetadata();
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../errors/AuthError.mjs":"eST5l","../utils/oauth/oAuthStore.mjs":"4J5M0","../utils/oauth/inflightPromise.mjs":"dn8pw","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4J5M0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oAuthStore", ()=>oAuthStore);
var _core = require("@aws-amplify/core");
var _signInWithRedirectStoreMjs = require("../signInWithRedirectStore.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const oAuthStore = new (0, _signInWithRedirectStoreMjs.DefaultOAuthStore)((0, _core.defaultStorage));

},{"@aws-amplify/core":"hJ80y","../signInWithRedirectStore.mjs":"ehcwH","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ehcwH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultOAuthStore", ()=>DefaultOAuthStore);
var _utils = require("@aws-amplify/core/internals/utils");
var _tokenStoreMjs = require("../tokenProvider/TokenStore.mjs");
var _typesMjs = require("./types.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';
const name = 'CognitoIdentityServiceProvider';
class DefaultOAuthStore {
    constructor(keyValueStorage){
        this.keyValueStorage = keyValueStorage;
    }
    async clearOAuthInflightData() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        await Promise.all([
            this.keyValueStorage.removeItem(authKeys.inflightOAuth),
            this.keyValueStorage.removeItem(authKeys.oauthPKCE),
            this.keyValueStorage.removeItem(authKeys.oauthState)
        ]);
    }
    async clearOAuthData() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        await this.clearOAuthInflightData();
        await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6
        return this.keyValueStorage.removeItem(authKeys.oauthSignIn);
    }
    loadOAuthState() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        return this.keyValueStorage.getItem(authKeys.oauthState);
    }
    storeOAuthState(state) {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        return this.keyValueStorage.setItem(authKeys.oauthState, state);
    }
    loadPKCE() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        return this.keyValueStorage.getItem(authKeys.oauthPKCE);
    }
    storePKCE(pkce) {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);
    }
    setAuthConfig(authConfigParam) {
        this.cognitoConfig = authConfigParam;
    }
    async loadOAuthInFlight() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        return await this.keyValueStorage.getItem(authKeys.inflightOAuth) === 'true';
    }
    async storeOAuthInFlight(inflight) {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);
    }
    async loadOAuthSignIn() {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);
        const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(',') ?? [];
        return {
            isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',
            preferPrivateSession: preferPrivateSession === 'true'
        };
    }
    async storeOAuthSignIn(oauthSignIn, preferPrivateSession = false) {
        (0, _utils.assertTokenProviderConfig)(this.cognitoConfig);
        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);
        await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn},${preferPrivateSession}`);
    }
}
const createKeysForAuthStorage = (provider, identifier)=>{
    return (0, _tokenStoreMjs.getAuthStorageKeys)((0, _typesMjs.OAuthStorageKeys))(provider, identifier);
};

},{"@aws-amplify/core/internals/utils":"dRREz","../tokenProvider/TokenStore.mjs":"jgGDi","./types.mjs":"7EObU","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dn8pw":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addInflightPromise", ()=>addInflightPromise);
parcelHelpers.export(exports, "resolveAndClearInflightPromises", ()=>resolveAndClearInflightPromises);
const inflightPromises = [];
const addInflightPromise = (resolver)=>{
    inflightPromises.push(resolver);
};
const resolveAndClearInflightPromises = ()=>{
    while(inflightPromises.length)inflightPromises.pop()?.();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1QBvv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ERROR_MESSAGE", ()=>ERROR_MESSAGE);
parcelHelpers.export(exports, "dispatchSignedInHubEvent", ()=>dispatchSignedInHubEvent);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _getCurrentUserMjs = require("../apis/getCurrentUser.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const ERROR_MESSAGE = 'Unable to get user session following successful sign-in.';
const dispatchSignedInHubEvent = async ()=>{
    try {
        (0, _core.Hub).dispatch('auth', {
            event: 'signedIn',
            data: await (0, _getCurrentUserMjs.getCurrentUser)()
        }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
    } catch (error) {
        if (error.name === (0, _constantsMjs.USER_UNAUTHENTICATED_EXCEPTION)) throw new (0, _authErrorMjs.AuthError)({
            name: (0, _constantsMjs.UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION),
            message: ERROR_MESSAGE,
            recoverySuggestion: 'This most likely is due to auth tokens not being persisted. If you are using cookie store, please ensure cookies can be correctly set from your server.'
        });
        throw error;
    }
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../apis/getCurrentUser.mjs":"d9HYR","../../../errors/constants.mjs":"8UaIu","../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8L9Z2":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "autoSignInStore", ()=>autoSignInStore);
function defaultState() {
    return {
        active: false
    };
}
const autoSignInReducer = (state, action)=>{
    switch(action.type){
        case 'SET_USERNAME':
            return {
                ...state,
                username: action.value
            };
        case 'SET_SESSION':
            return {
                ...state,
                session: action.value
            };
        case 'START':
            return {
                ...state,
                active: true
            };
        case 'RESET':
            return defaultState();
        default:
            return state;
    }
};
const createAutoSignInStore = (reducer)=>{
    let currentState = reducer(defaultState(), {
        type: 'RESET'
    });
    return {
        getState: ()=>currentState,
        dispatch: (action)=>{
            currentState = reducer(currentState, action);
        }
    };
};
const autoSignInStore = createAutoSignInStore(autoSignInReducer);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8w0aF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "persistSignInState", ()=>persistSignInState);
parcelHelpers.export(exports, "resetActiveSignInState", ()=>resetActiveSignInState);
parcelHelpers.export(exports, "setActiveSignInState", ()=>setActiveSignInState);
parcelHelpers.export(exports, "signInStore", ()=>signInStore);
var _core = require("@aws-amplify/core");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Minutes until stored session invalidates is defaulted to 3 minutes
// to maintain parity with Amazon Cognito user pools API behavior
const MS_TO_EXPIRY = 180000;
const TGT_STATE = 'CognitoSignInState';
const SIGN_IN_STATE_KEYS = {
    username: `${TGT_STATE}.username`,
    challengeName: `${TGT_STATE}.challengeName`,
    signInSession: `${TGT_STATE}.signInSession`,
    expiry: `${TGT_STATE}.expiry`
};
const signInReducer = (state, action)=>{
    switch(action.type){
        case 'SET_SIGN_IN_SESSION':
            persistSignInState({
                signInSession: action.value
            });
            return {
                ...state,
                signInSession: action.value
            };
        case 'SET_SIGN_IN_STATE':
            persistSignInState(action.value);
            return {
                ...action.value
            };
        case 'SET_CHALLENGE_NAME':
            persistSignInState({
                challengeName: action.value
            });
            return {
                ...state,
                challengeName: action.value
            };
        case 'SET_USERNAME':
            persistSignInState({
                username: action.value
            });
            return {
                ...state,
                username: action.value
            };
        case 'SET_INITIAL_STATE':
            return getInitialState();
        case 'RESET_STATE':
            clearPersistedSignInState();
            return getDefaultState();
        // this state is never reachable
        default:
            return state;
    }
};
const isExpired = (expiryDate)=>{
    const expiryTimestamp = Number(expiryDate);
    const currentTimestamp = Date.now();
    return expiryTimestamp <= currentTimestamp;
};
const resetActiveSignInState = ()=>{
    signInStore.dispatch({
        type: 'RESET_STATE'
    });
};
const clearPersistedSignInState = ()=>{
    for (const stateKey of Object.values(SIGN_IN_STATE_KEYS))(0, _core.syncSessionStorage).removeItem(stateKey);
};
const getDefaultState = ()=>({
        username: undefined,
        challengeName: undefined,
        signInSession: undefined
    });
// Hydrate signInStore from syncSessionStorage if the session has not expired
const getInitialState = ()=>{
    const expiry = (0, _core.syncSessionStorage).getItem(SIGN_IN_STATE_KEYS.expiry);
    if (!expiry || isExpired(expiry)) {
        clearPersistedSignInState();
        return getDefaultState();
    }
    const username = (0, _core.syncSessionStorage).getItem(SIGN_IN_STATE_KEYS.username) ?? undefined;
    const challengeName = (0, _core.syncSessionStorage).getItem(SIGN_IN_STATE_KEYS.challengeName) ?? undefined;
    const signInSession = (0, _core.syncSessionStorage).getItem(SIGN_IN_STATE_KEYS.signInSession) ?? undefined;
    return {
        username,
        challengeName,
        signInSession
    };
};
const createStore = (reducer)=>{
    let currentState = reducer(getDefaultState(), {
        type: 'SET_INITIAL_STATE'
    });
    return {
        getState: ()=>currentState,
        dispatch: (action)=>{
            currentState = reducer(currentState, action);
        }
    };
};
const signInStore = createStore(signInReducer);
function setActiveSignInState(state) {
    signInStore.dispatch({
        type: 'SET_SIGN_IN_STATE',
        value: state
    });
}
// Save local state into Session Storage
const persistSignInState = ({ challengeName, signInSession, username })=>{
    username && (0, _core.syncSessionStorage).setItem(SIGN_IN_STATE_KEYS.username, username);
    challengeName && (0, _core.syncSessionStorage).setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);
    if (signInSession) {
        (0, _core.syncSessionStorage).setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);
        // Updates expiry when session is passed
        (0, _core.syncSessionStorage).setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));
    }
};

},{"@aws-amplify/core":"hJ80y","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6RWlb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PasskeyError", ()=>PasskeyError);
parcelHelpers.export(exports, "PasskeyErrorCode", ()=>PasskeyErrorCode);
parcelHelpers.export(exports, "assertPasskeyError", ()=>assertPasskeyError);
parcelHelpers.export(exports, "handlePasskeyAuthenticationError", ()=>handlePasskeyAuthenticationError);
parcelHelpers.export(exports, "handlePasskeyRegistrationError", ()=>handlePasskeyRegistrationError);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
class PasskeyError extends (0, _utils.AmplifyError) {
    constructor(params){
        super(params);
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = PasskeyError;
        Object.setPrototypeOf(this, PasskeyError.prototype);
    }
}
var PasskeyErrorCode;
(function(PasskeyErrorCode) {
    // not supported
    PasskeyErrorCode["PasskeyNotSupported"] = "PasskeyNotSupported";
    // duplicate passkey
    PasskeyErrorCode["PasskeyAlreadyExists"] = "PasskeyAlreadyExists";
    // misconfigurations
    PasskeyErrorCode["InvalidPasskeyRegistrationOptions"] = "InvalidPasskeyRegistrationOptions";
    PasskeyErrorCode["InvalidPasskeyAuthenticationOptions"] = "InvalidPasskeyAuthenticationOptions";
    PasskeyErrorCode["RelyingPartyMismatch"] = "RelyingPartyMismatch";
    // failed credential creation / retrieval
    PasskeyErrorCode["PasskeyRegistrationFailed"] = "PasskeyRegistrationFailed";
    PasskeyErrorCode["PasskeyRetrievalFailed"] = "PasskeyRetrievalFailed";
    // cancel / aborts
    PasskeyErrorCode["PasskeyRegistrationCanceled"] = "PasskeyRegistrationCanceled";
    PasskeyErrorCode["PasskeyAuthenticationCanceled"] = "PasskeyAuthenticationCanceled";
    PasskeyErrorCode["PasskeyOperationAborted"] = "PasskeyOperationAborted";
})(PasskeyErrorCode || (PasskeyErrorCode = {}));
const notSupportedRecoverySuggestion = 'Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.';
const abortOrCancelRecoverySuggestion = 'User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.';
const misconfigurationRecoverySuggestion = 'Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.';
const passkeyErrorMap = {
    [PasskeyErrorCode.PasskeyNotSupported]: {
        message: 'Passkeys may not be supported on this device.',
        recoverySuggestion: notSupportedRecoverySuggestion
    },
    [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {
        message: 'Invalid passkey registration options.',
        recoverySuggestion: misconfigurationRecoverySuggestion
    },
    [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {
        message: 'Invalid passkey authentication options.',
        recoverySuggestion: misconfigurationRecoverySuggestion
    },
    [PasskeyErrorCode.PasskeyRegistrationFailed]: {
        message: 'Device failed to create passkey.',
        recoverySuggestion: notSupportedRecoverySuggestion
    },
    [PasskeyErrorCode.PasskeyRetrievalFailed]: {
        message: 'Device failed to retrieve passkey.',
        recoverySuggestion: 'Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP.'
    },
    [PasskeyErrorCode.PasskeyAlreadyExists]: {
        message: 'Passkey already exists in authenticator.',
        recoverySuggestion: 'Proceed with existing passkey or try again after deleting the credential.'
    },
    [PasskeyErrorCode.PasskeyRegistrationCanceled]: {
        message: 'Passkey registration ceremony has been canceled.',
        recoverySuggestion: abortOrCancelRecoverySuggestion
    },
    [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {
        message: 'Passkey authentication ceremony has been canceled.',
        recoverySuggestion: abortOrCancelRecoverySuggestion
    },
    [PasskeyErrorCode.PasskeyOperationAborted]: {
        message: 'Passkey operation has been aborted.',
        recoverySuggestion: abortOrCancelRecoverySuggestion
    },
    [PasskeyErrorCode.RelyingPartyMismatch]: {
        message: 'Relying party does not match current domain.',
        recoverySuggestion: 'Ensure relying party identifier matches current domain.'
    }
};
const assertPasskeyError = (0, _utils.createAssertionFunction)(passkeyErrorMap, PasskeyError);
/**
 * Handle Passkey Authentication Errors
 * https://w3c.github.io/webauthn/#sctn-get-request-exceptions
 *
 * @param err unknown
 * @returns PasskeyError
 */ const handlePasskeyAuthenticationError = (err)=>{
    if (err instanceof PasskeyError) return err;
    if (err instanceof Error) {
        if (err.name === 'NotAllowedError') {
            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];
            return new PasskeyError({
                name: PasskeyErrorCode.PasskeyAuthenticationCanceled,
                message,
                recoverySuggestion,
                underlyingError: err
            });
        }
    }
    return handlePasskeyError(err);
};
/**
 * Handle Passkey Registration Errors
 * https://w3c.github.io/webauthn/#sctn-create-request-exceptions
 *
 * @param err unknown
 * @returns PasskeyError
 */ const handlePasskeyRegistrationError = (err)=>{
    if (err instanceof PasskeyError) return err;
    if (err instanceof Error) {
        // Duplicate Passkey
        if (err.name === 'InvalidStateError') {
            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAlreadyExists];
            return new PasskeyError({
                name: PasskeyErrorCode.PasskeyAlreadyExists,
                message,
                recoverySuggestion,
                underlyingError: err
            });
        }
        // User Cancels Ceremony / Generic Catch All
        if (err.name === 'NotAllowedError') {
            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyRegistrationCanceled];
            return new PasskeyError({
                name: PasskeyErrorCode.PasskeyRegistrationCanceled,
                message,
                recoverySuggestion,
                underlyingError: err
            });
        }
    }
    return handlePasskeyError(err);
};
/**
 * Handles Overlapping Passkey Errors Between Registration & Authentication
 * https://w3c.github.io/webauthn/#sctn-create-request-exceptions
 * https://w3c.github.io/webauthn/#sctn-get-request-exceptions
 *
 * @param err unknown
 * @returns PasskeyError
 */ const handlePasskeyError = (err)=>{
    if (err instanceof Error) {
        // Passkey Operation Aborted
        if (err.name === 'AbortError') {
            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];
            return new PasskeyError({
                name: PasskeyErrorCode.PasskeyOperationAborted,
                message,
                recoverySuggestion,
                underlyingError: err
            });
        }
        // Relying Party / Domain Mismatch
        if (err.name === 'SecurityError') {
            const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];
            return new PasskeyError({
                name: PasskeyErrorCode.RelyingPartyMismatch,
                message,
                recoverySuggestion,
                underlyingError: err
            });
        }
    }
    return new PasskeyError({
        name: (0, _utils.AmplifyErrorCode).Unknown,
        message: 'An unknown error has occurred.',
        underlyingError: err
    });
};

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"693j8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPasskey", ()=>getPasskey);
var _errorsMjs = require("./errors.mjs");
var _getIsPasskeySupportedMjs = require("./getIsPasskeySupported.mjs");
var _serdeMjs = require("./serde.mjs");
var _indexMjs = require("./types/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const getPasskey = async (input)=>{
    try {
        const isPasskeySupported = (0, _getIsPasskeySupportedMjs.getIsPasskeySupported)();
        (0, _errorsMjs.assertPasskeyError)(isPasskeySupported, (0, _errorsMjs.PasskeyErrorCode).PasskeyNotSupported);
        const passkeyGetOptions = (0, _serdeMjs.deserializeJsonToPkcGetOptions)(input);
        const credential = await navigator.credentials.get({
            publicKey: passkeyGetOptions
        });
        (0, _indexMjs.assertCredentialIsPkcWithAuthenticatorAssertionResponse)(credential);
        return (0, _serdeMjs.serializePkcWithAssertionToJson)(credential);
    } catch (err) {
        throw (0, _errorsMjs.handlePasskeyAuthenticationError)(err);
    }
};

},{"./errors.mjs":"6RWlb","./getIsPasskeySupported.mjs":"iRDPx","./serde.mjs":"jVbNS","./types/index.mjs":"3im6d","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iRDPx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getIsPasskeySupported", ()=>getIsPasskeySupported);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Determines if passkey is supported in current context
 * Will return false if executed in non-secure context
 * @returns boolean
 */ const getIsPasskeySupported = ()=>{
    return (0, _utils.isBrowser)() && window.isSecureContext && 'credentials' in navigator && typeof window.PublicKeyCredential === 'function';
};

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jVbNS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializeJsonToPkcCreationOptions", ()=>deserializeJsonToPkcCreationOptions);
parcelHelpers.export(exports, "deserializeJsonToPkcGetOptions", ()=>deserializeJsonToPkcGetOptions);
parcelHelpers.export(exports, "serializePkcWithAssertionToJson", ()=>serializePkcWithAssertionToJson);
parcelHelpers.export(exports, "serializePkcWithAttestationToJson", ()=>serializePkcWithAttestationToJson);
var _convertArrayBufferToBase64UrlMjs = require("../../../foundation/convert/base64url/convertArrayBufferToBase64Url.mjs");
var _convertBase64UrlToArrayBufferMjs = require("../../../foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Deserializes Public Key Credential Creation Options JSON
 * @param input PasskeyCreateOptionsJson
 * @returns PublicKeyCredentialCreationOptions
 */ const deserializeJsonToPkcCreationOptions = (input)=>{
    const userIdBuffer = (0, _convertBase64UrlToArrayBufferMjs.convertBase64UrlToArrayBuffer)(input.user.id);
    const challengeBuffer = (0, _convertBase64UrlToArrayBufferMjs.convertBase64UrlToArrayBuffer)(input.challenge);
    const excludeCredentialsWithBuffer = (input.excludeCredentials || []).map((excludeCred)=>({
            ...excludeCred,
            id: (0, _convertBase64UrlToArrayBufferMjs.convertBase64UrlToArrayBuffer)(excludeCred.id)
        }));
    return {
        ...input,
        excludeCredentials: excludeCredentialsWithBuffer,
        challenge: challengeBuffer,
        user: {
            ...input.user,
            id: userIdBuffer
        }
    };
};
/**
 * Serializes a Public Key Credential With Attestation to JSON
 * @param input PasskeyCreateResult
 * @returns PasskeyCreateResultJson
 */ const serializePkcWithAttestationToJson = (input)=>{
    const response = {
        clientDataJSON: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.clientDataJSON),
        attestationObject: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.attestationObject),
        transports: input.response.getTransports(),
        publicKeyAlgorithm: input.response.getPublicKeyAlgorithm(),
        authenticatorData: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.getAuthenticatorData())
    };
    const publicKey = input.response.getPublicKey();
    if (publicKey) response.publicKey = (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(publicKey);
    const resultJson = {
        type: input.type,
        id: input.id,
        rawId: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.rawId),
        clientExtensionResults: input.getClientExtensionResults(),
        response
    };
    if (input.authenticatorAttachment) resultJson.authenticatorAttachment = input.authenticatorAttachment;
    return resultJson;
};
/**
 * Deserializes Public Key Credential Get Options JSON
 * @param input PasskeyGetOptionsJson
 * @returns PublicKeyCredentialRequestOptions
 */ const deserializeJsonToPkcGetOptions = (input)=>{
    const challengeBuffer = (0, _convertBase64UrlToArrayBufferMjs.convertBase64UrlToArrayBuffer)(input.challenge);
    const allowedCredentialsWithBuffer = (input.allowCredentials || []).map((allowedCred)=>({
            ...allowedCred,
            id: (0, _convertBase64UrlToArrayBufferMjs.convertBase64UrlToArrayBuffer)(allowedCred.id)
        }));
    return {
        ...input,
        challenge: challengeBuffer,
        allowCredentials: allowedCredentialsWithBuffer
    };
};
/**
 * Serializes a Public Key Credential With Attestation to JSON
 * @param input PasskeyGetResult
 * @returns PasskeyGetResultJson
 */ const serializePkcWithAssertionToJson = (input)=>{
    const response = {
        clientDataJSON: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.clientDataJSON),
        authenticatorData: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.authenticatorData),
        signature: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.signature)
    };
    if (input.response.userHandle) response.userHandle = (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.response.userHandle);
    const resultJson = {
        id: input.id,
        rawId: (0, _convertArrayBufferToBase64UrlMjs.convertArrayBufferToBase64Url)(input.rawId),
        type: input.type,
        clientExtensionResults: input.getClientExtensionResults(),
        response
    };
    if (input.authenticatorAttachment) resultJson.authenticatorAttachment = input.authenticatorAttachment;
    return resultJson;
};

},{"../../../foundation/convert/base64url/convertArrayBufferToBase64Url.mjs":"7GD1C","../../../foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs":"4xM0a","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7GD1C":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertArrayBufferToBase64Url", ()=>convertArrayBufferToBase64Url);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// https://datatracker.ietf.org/doc/html/rfc4648#page-7
/**
 * Converts an ArrayBuffer to a base64url encoded string
 * @param buffer - the ArrayBuffer instance of a Uint8Array
 * @returns string - a base64url encoded string
 */ const convertArrayBufferToBase64Url = (buffer)=>{
    return (0, _utils.base64Encoder).convert(new Uint8Array(buffer), {
        urlSafe: true,
        skipPadding: true
    });
};

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4xM0a":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "convertBase64UrlToArrayBuffer", ()=>convertBase64UrlToArrayBuffer);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Converts a base64url encoded string to an ArrayBuffer
 * @param base64url - a base64url encoded string
 * @returns ArrayBuffer
 */ const convertBase64UrlToArrayBuffer = (base64url)=>{
    return Uint8Array.from((0, _utils.base64Decoder).convert(base64url, {
        urlSafe: true
    }), (x)=>x.charCodeAt(0)).buffer;
};

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3im6d":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertValidCredentialCreationOptions", ()=>(0, _sharedMjs.assertValidCredentialCreationOptions));
parcelHelpers.export(exports, "assertCredentialIsPkcWithAuthenticatorAssertionResponse", ()=>assertCredentialIsPkcWithAuthenticatorAssertionResponse);
parcelHelpers.export(exports, "assertCredentialIsPkcWithAuthenticatorAttestationResponse", ()=>assertCredentialIsPkcWithAuthenticatorAttestationResponse);
var _errorsMjs = require("../errors.mjs");
var _sharedMjs = require("./shared.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential) {
    (0, _errorsMjs.assertPasskeyError)(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAttestationResponse, (0, _errorsMjs.PasskeyErrorCode).PasskeyRegistrationFailed);
}
function assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential) {
    (0, _errorsMjs.assertPasskeyError)(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAssertionResponse, (0, _errorsMjs.PasskeyErrorCode).PasskeyRetrievalFailed);
}

},{"../errors.mjs":"6RWlb","./shared.mjs":false,"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"xcBEp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "assertValidCredentialCreationOptions", ()=>assertValidCredentialCreationOptions);
var _errorsMjs = require("../errors.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function assertValidCredentialCreationOptions(credentialCreationOptions) {
    (0, _errorsMjs.assertPasskeyError)([
        !!credentialCreationOptions,
        !!credentialCreationOptions?.challenge,
        !!credentialCreationOptions?.user,
        !!credentialCreationOptions?.rp,
        !!credentialCreationOptions?.pubKeyCredParams
    ].every(Boolean), (0, _errorsMjs.PasskeyErrorCode).InvalidPasskeyRegistrationOptions);
}

},{"../errors.mjs":"6RWlb","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iZ9p7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNewDeviceMetadata", ()=>getNewDeviceMetadata);
var _utils = require("@aws-amplify/core/internals/utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createConfirmDeviceClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthenticationHelperMjs = require("./srp/getAuthenticationHelper.mjs");
var _getBytesFromHexMjs = require("./srp/getBytesFromHex.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * This function is used to kick off the device management flow.
 *
 * If an error is thrown while generating a hash device or calling the `ConfirmDevice`
 * client, then this API will ignore the error and return undefined. Otherwise the authentication
 * flow will not complete and the user won't be able to be signed in.
 *
 * @returns DeviceMetadata | undefined
 */ async function getNewDeviceMetadata({ userPoolId, userPoolEndpoint, newDeviceMetadata, accessToken }) {
    if (!newDeviceMetadata) return undefined;
    const userPoolName = userPoolId.split('_')[1] || '';
    const authenticationHelper = await (0, _getAuthenticationHelperMjs.getAuthenticationHelper)(userPoolName);
    const deviceKey = newDeviceMetadata?.DeviceKey;
    const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;
    try {
        await authenticationHelper.generateHashDevice(deviceGroupKey ?? '', deviceKey ?? '');
    } catch (errGenHash) {
        // TODO: log error here
        return undefined;
    }
    const deviceSecretVerifierConfig = {
        Salt: (0, _utils.base64Encoder).convert((0, _getBytesFromHexMjs.getBytesFromHex)(authenticationHelper.getSaltToHashDevices())),
        PasswordVerifier: (0, _utils.base64Encoder).convert((0, _getBytesFromHexMjs.getBytesFromHex)(authenticationHelper.getVerifierDevices()))
    };
    const randomPassword = authenticationHelper.getRandomPassword();
    try {
        const confirmDevice = (0, _createConfirmDeviceClientMjs.createConfirmDeviceClient)({
            endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                endpointOverride: userPoolEndpoint
            })
        });
        await confirmDevice({
            region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId)
        }, {
            AccessToken: accessToken,
            DeviceName: await (0, _utils.getDeviceName)(),
            DeviceKey: newDeviceMetadata?.DeviceKey,
            DeviceSecretVerifierConfig: deviceSecretVerifierConfig
        });
        return {
            deviceKey,
            deviceGroupKey,
            randomPassword
        };
    } catch (error) {
        // TODO: log error here
        return undefined;
    }
}

},{"@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs":"k8m33","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","./srp/getAuthenticationHelper.mjs":"jLFhO","./srp/getBytesFromHex.mjs":"jUhDa","@aws-crypto/sha256-js":"7twCg","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"k8m33":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConfirmDeviceClient", ()=>createConfirmDeviceClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createConfirmDeviceClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ConfirmDevice'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jLFhO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAuthenticationHelper", ()=>getAuthenticationHelper);
var _authenticationHelperMjs = require("./AuthenticationHelper/AuthenticationHelper.mjs");
var _authenticationHelperMjsDefault = parcelHelpers.interopDefault(_authenticationHelperMjs);
var _bigIntegerMjs = require("./BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
var _calculateAMjs = require("./calculate/calculateA.mjs");
var _constantsMjs = require("./constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _getHexFromBytesMjs = require("./getHexFromBytes.mjs");
var _getRandomBytesMjs = require("./getRandomBytes.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a new {@link AuthenticationHelper} instance with randomly generated BigInteger seed
 *
 * @param userPoolName Cognito user pool name.
 * @returns An {@link AuthenticationHelper} instance.
 *
 * @internal
 */ const getAuthenticationHelper = async (userPoolName)=>{
    const N = new (0, _bigIntegerMjsDefault.default)((0, _constantsMjs.INIT_N), 16);
    const g = new (0, _bigIntegerMjsDefault.default)('2', 16);
    const a = generateRandomBigInteger();
    const A = await (0, _calculateAMjs.calculateA)({
        a,
        g,
        N
    });
    return new (0, _authenticationHelperMjsDefault.default)({
        userPoolName,
        a,
        g,
        A,
        N
    });
};
/**
 * Generates a random BigInteger.
 *
 * @returns {BigInteger} a random value.
 */ const generateRandomBigInteger = ()=>{
    // This will be interpreted as a postive 128-bit integer
    const hexRandom = (0, _getHexFromBytesMjs.getHexFromBytes)((0, _getRandomBytesMjs.getRandomBytes)(128));
    // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)
    return new (0, _bigIntegerMjsDefault.default)(hexRandom, 16);
};

},{"./AuthenticationHelper/AuthenticationHelper.mjs":"hfuS4","./BigInteger/BigInteger.mjs":"2NqAB","./calculate/calculateA.mjs":"5LCH9","./constants.mjs":"iJTaO","@aws-crypto/sha256-js":"7twCg","./getHexFromBytes.mjs":"2U0j6","./getRandomBytes.mjs":"ilGLc","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hfuS4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>AuthenticationHelper);
var _authErrorMjs = require("../../../../../errors/AuthError.mjs");
var _indexMjs = require("../../textEncoder/index.mjs");
var _bigIntegerMjs = require("../BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
var _calculateSMjs = require("../calculate/calculateS.mjs");
var _calculateUMjs = require("../calculate/calculateU.mjs");
var _getBytesFromHexMjs = require("../getBytesFromHex.mjs");
var _getHashFromDataMjs = require("../getHashFromData.mjs");
var _getHashFromHexMjs = require("../getHashFromHex.mjs");
var _getHexFromBytesMjs = require("../getHexFromBytes.mjs");
var _getHkdfKeyMjs = require("../getHkdfKey.mjs");
var _getPaddedHexMjs = require("../getPaddedHex.mjs");
var _getRandomBytesMjs = require("../getRandomBytes.mjs");
var _getRandomStringMjs = require("../getRandomString.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/** @class */ class AuthenticationHelper {
    constructor({ userPoolName, a, g, A, N }){
        this.encoder = (0, _indexMjs.textEncoder);
        this.userPoolName = userPoolName;
        this.a = a;
        this.g = g;
        this.A = A;
        this.N = N;
        this.k = new (0, _bigIntegerMjsDefault.default)((0, _getHashFromHexMjs.getHashFromHex)(`${(0, _getPaddedHexMjs.getPaddedHex)(N)}${(0, _getPaddedHexMjs.getPaddedHex)(g)}`), 16);
    }
    /**
     * @returns {string} Generated random value included in password hash.
     */ getRandomPassword() {
        if (!this.randomPassword) throw new (0, _authErrorMjs.AuthError)({
            name: 'EmptyBigIntegerRandomPassword',
            message: 'random password is empty'
        });
        return this.randomPassword;
    }
    /**
     * @returns {string} Generated random value included in devices hash.
     */ getSaltToHashDevices() {
        if (!this.saltToHashDevices) throw new (0, _authErrorMjs.AuthError)({
            name: 'EmptyBigIntegersaltToHashDevices',
            message: 'saltToHashDevices is empty'
        });
        return this.saltToHashDevices;
    }
    /**
     * @returns {string} Value used to verify devices.
     */ getVerifierDevices() {
        if (!this.verifierDevices) throw new (0, _authErrorMjs.AuthError)({
            name: 'EmptyBigIntegerVerifierDevices',
            message: 'verifyDevices is empty'
        });
        return this.verifierDevices;
    }
    /**
     * Generate salts and compute verifier.
     *
     * @param {string} deviceGroupKey Devices to generate verifier for.
     * @param {string} username User to generate verifier for.
     *
     * @returns {Promise<void>}
     */ async generateHashDevice(deviceGroupKey, username) {
        this.randomPassword = (0, _getRandomStringMjs.getRandomString)();
        const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;
        const hashedString = (0, _getHashFromDataMjs.getHashFromData)(combinedString);
        const hexRandom = (0, _getHexFromBytesMjs.getHexFromBytes)((0, _getRandomBytesMjs.getRandomBytes)(16));
        // The random hex will be unambiguously represented as a postive integer
        this.saltToHashDevices = (0, _getPaddedHexMjs.getPaddedHex)(new (0, _bigIntegerMjsDefault.default)(hexRandom, 16));
        return new Promise((resolve, reject)=>{
            this.g.modPow(new (0, _bigIntegerMjsDefault.default)((0, _getHashFromHexMjs.getHashFromHex)(this.saltToHashDevices + hashedString), 16), this.N, (err, result)=>{
                if (err) {
                    reject(err);
                    return;
                }
                this.verifierDevices = (0, _getPaddedHexMjs.getPaddedHex)(result);
                resolve();
            });
        });
    }
    /**
     * Calculates the final HKDF key based on computed S value, computed U value and the key
     *
     * @param {String} username Username.
     * @param {String} password Password.
     * @param {AuthBigInteger} B Server B value.
     * @param {AuthBigInteger} salt Generated salt.
     */ async getPasswordAuthenticationKey({ username, password, serverBValue, salt }) {
        if (serverBValue.mod(this.N).equals((0, _bigIntegerMjsDefault.default).ZERO)) throw new Error('B cannot be zero.');
        const U = (0, _calculateUMjs.calculateU)({
            A: this.A,
            B: serverBValue
        });
        const usernamePassword = `${this.userPoolName}${username}:${password}`;
        const usernamePasswordHash = (0, _getHashFromDataMjs.getHashFromData)(usernamePassword);
        const x = new (0, _bigIntegerMjsDefault.default)((0, _getHashFromHexMjs.getHashFromHex)((0, _getPaddedHexMjs.getPaddedHex)(salt) + usernamePasswordHash), 16);
        const S = await (0, _calculateSMjs.calculateS)({
            a: this.a,
            g: this.g,
            k: this.k,
            x,
            B: serverBValue,
            N: this.N,
            U
        });
        const context = this.encoder.convert('Caldera Derived Key');
        const spacer = this.encoder.convert(String.fromCharCode(1));
        const info = new Uint8Array(context.byteLength + spacer.byteLength);
        info.set(context, 0);
        info.set(spacer, context.byteLength);
        const hkdfKey = (0, _getHkdfKeyMjs.getHkdfKey)((0, _getBytesFromHexMjs.getBytesFromHex)((0, _getPaddedHexMjs.getPaddedHex)(S)), (0, _getBytesFromHexMjs.getBytesFromHex)((0, _getPaddedHexMjs.getPaddedHex)(U)), info);
        return hkdfKey;
    }
}

},{"../../../../../errors/AuthError.mjs":"eST5l","../../textEncoder/index.mjs":"3QMNE","../BigInteger/BigInteger.mjs":"2NqAB","../calculate/calculateS.mjs":"je8qy","../calculate/calculateU.mjs":"7q91c","../getBytesFromHex.mjs":"jUhDa","../getHashFromData.mjs":"dghfl","../getHashFromHex.mjs":"MXUj6","../getHexFromBytes.mjs":"2U0j6","../getHkdfKey.mjs":"hWw1C","../getPaddedHex.mjs":"ghUB2","../getRandomBytes.mjs":"ilGLc","../getRandomString.mjs":"cmfb4","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3QMNE":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "textEncoder", ()=>textEncoder);
const textEncoder = {
    convert (input) {
        return new TextEncoder().encode(input);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2NqAB":[function(require,module,exports,__globalThis) {
/* eslint-disable */ // @ts-nocheck -> BigInteger is already a vended utility
// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/
//
// All public methods have been removed except the following:
//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)
//   toString (only radix 2, 4, 8, 16 and 32 supported)
//   negate
//   abs
//   compareTo
//   bitLength
//   mod
//   equals
//   add
//   subtract
//   multiply
//   divide
//   modPow
/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */ // (public) Constructor
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>BigInteger);
function BigInteger(a, b) {
    if (a != null) this.fromString(a, b);
}
// return new, unset BigInteger
function nbi() {
    return new BigInteger(null, null);
}
// Bits per digit
let dbits;
// JavaScript engine analysis
const canary = 0xdeadbeefcafe;
const j_lm = (canary & 0xffffff) === 0xefcafe;
// am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while(--n >= 0){
        const v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
    }
    return c;
}
// am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    const xl = x & 0x7fff;
    const xh = x >> 15;
    while(--n >= 0){
        let l = this[i] & 0x7fff;
        const h = this[i++] >> 15;
        const m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
    }
    return c;
}
// Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    const xl = x & 0x3fff;
    const xh = x >> 14;
    while(--n >= 0){
        let l = this[i] & 0x3fff;
        const h = this[i++] >> 14;
        const m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}
const inBrowser = typeof navigator !== 'undefined';
if (inBrowser && j_lm && navigator.appName === 'Microsoft Internet Explorer') {
    BigInteger.prototype.am = am2;
    dbits = 30;
} else if (inBrowser && j_lm && navigator.appName !== 'Netscape') {
    BigInteger.prototype.am = am1;
    dbits = 26;
} else {
    // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
const BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
// Digit conversions
const BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';
const BI_RC = [];
let rr, vv;
rr = '0'.charCodeAt(0);
for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;
rr = 'a'.charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
rr = 'A'.charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    const c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
}
// (protected) copy this to r
function bnpCopyTo(r) {
    for(let i = this.t - 1; i >= 0; --i)r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
}
// (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + this.DV;
    else this.t = 0;
}
// return bigint initialized to value
function nbv(i) {
    const r = nbi();
    r.fromInt(i);
    return r;
}
// (protected) set from string and radix
function bnpFromString(s, b) {
    let k;
    if (b === 16) k = 4;
    else if (b === 8) k = 3;
    else if (b === 2) k = 1;
    else if (b === 32) k = 5;
    else if (b === 4) k = 2;
    else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
    this.t = 0;
    this.s = 0;
    let i = s.length;
    let mi = false;
    let sh = 0;
    while(--i >= 0){
        const x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) === '-') mi = true;
            continue;
        }
        mi = false;
        if (sh === 0) this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
            this[this.t++] = x >> this.DB - sh;
        } else this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
}
// (protected) clamp off excess high words
function bnpClamp() {
    const c = this.s & this.DM;
    while(this.t > 0 && this[this.t - 1] == c)--this.t;
}
// (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return '-' + this.negate().toString(b);
    let k;
    if (b == 16) k = 4;
    else if (b === 8) k = 3;
    else if (b === 2) k = 1;
    else if (b === 32) k = 5;
    else if (b === 4) k = 2;
    else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
    const km = (1 << k) - 1;
    let d;
    let m = false;
    let r = '';
    let i = this.t;
    let p = this.DB - i * this.DB % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while(i >= 0){
            if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d |= this[--i] >> (p += this.DB - k);
            } else {
                d = this[i] >> (p -= k) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : '0';
}
// (public) -this
function bnNegate() {
    const r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
}
// (public) |this|
function bnAbs() {
    return this.s < 0 ? this.negate() : this;
}
// (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    let r = this.s - a.s;
    if (r != 0) return r;
    let i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;
    while(--i >= 0)if ((r = this[i] - a[i]) != 0) return r;
    return 0;
}
// returns bit length of the integer x
function nbits(x) {
    let r = 1;
    let t;
    if ((t = x >>> 16) !== 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) !== 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) !== 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) !== 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) !== 0) {
        x = t;
        r += 1;
    }
    return r;
}
// (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
// (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    let i;
    for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];
    for(i = n - 1; i >= 0; --i)r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
}
// (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for(let i = n; i < this.t; ++i)r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
}
// (protected) r = this << n
function bnpLShiftTo(n, r) {
    const bs = n % this.DB;
    const cbs = this.DB - bs;
    const bm = (1 << cbs) - 1;
    const ds = Math.floor(n / this.DB);
    let c = this.s << bs & this.DM;
    let i;
    for(i = this.t - 1; i >= 0; --i){
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
    }
    for(i = ds - 1; i >= 0; --i)r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
}
// (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    const ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    const bs = n % this.DB;
    const cbs = this.DB - bs;
    const bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for(let i = ds + 1; i < this.t; ++i){
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
}
// (protected) r = this - a
function bnpSubTo(a, r) {
    let i = 0;
    let c = 0;
    const m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
}
// (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    const x = this.abs();
    const y = a.abs();
    let i = x.t;
    r.t = i + y.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s !== a.s) BigInteger.ZERO.subTo(r, r);
}
// (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    const x = this.abs();
    let i = r.t = 2 * x.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < x.t - 1; ++i){
        const c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
}
// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    const pm = m.abs();
    if (pm.t <= 0) return;
    const pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r === null) r = nbi();
    const y = nbi();
    const ts = this.s;
    const ms = m.s;
    const nsh = this.DB - nbits(pm[pm.t - 1]);
    // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    } else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    const ys = y.t;
    const y0 = y[ys - 1];
    if (y0 === 0) return;
    const yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    const d1 = this.FV / yt;
    const d2 = (1 << this.F1) / yt;
    const e = 1 << this.F2;
    let i = r.t;
    let j = i - ys;
    const t = q === null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y);
    // "negative" y so we can replace sub with am later
    while(y.t < ys)y[y.t++] = 0;
    while(--j >= 0){
        // Estimate quotient digit
        let qd = r[--i] === y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
            // Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while(r[i] < --qd)r.subTo(t, r);
        }
    }
    if (q !== null) {
        r.drShiftTo(ys, q);
        if (ts !== ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r);
    // Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
}
// (public) this mod a
function bnMod(a) {
    const r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
}
// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    const x = this[0];
    if ((x & 1) === 0) return 0;
    let y = x & 3;
    // y == 1/x mod 2^2
    y = y * (2 - (x & 0xf) * y) & 0xf;
    // y == 1/x mod 2^4
    y = y * (2 - (x & 0xff) * y) & 0xff;
    // y == 1/x mod 2^8
    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;
    // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = y * (2 - x * y % this.DV) % this.DV;
    // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
    return this.compareTo(a) === 0;
}
// (protected) r = this + a
function bnpAddTo(a, r) {
    let i = 0;
    let c = 0;
    const m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
}
// (public) this + a
function bnAdd(a) {
    const r = nbi();
    this.addTo(a, r);
    return r;
}
// (public) this - a
function bnSubtract(a) {
    const r = nbi();
    this.subTo(a, r);
    return r;
}
// (public) this * a
function bnMultiply(a) {
    const r = nbi();
    this.multiplyTo(a, r);
    return r;
}
// (public) this / a
function bnDivide(a) {
    const r = nbi();
    this.divRemTo(a, r, null);
    return r;
}
// Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
}
// xR mod m
function montConvert(x) {
    const r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
}
// x/R mod m
function montRevert(x) {
    const r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
}
// x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while(x.t <= this.mt2)// pad x so am has enough room later
    x[x.t++] = 0;
    for(let i = 0; i < this.m.t; ++i){
        // faster way of calculating u0 = x[i]*mp mod DV
        let j = x[i] & 0x7fff;
        const u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
        // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
        // propagate carry
        while(x[j] >= x.DV){
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
}
// r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
}
// r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
// (public) this^e % m (HAC 14.85)
function bnModPow(e, m, callback) {
    let i = e.bitLength();
    let k;
    let r = nbv(1);
    const z = new Montgomery(m);
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6;
    // precomputation
    const g = [];
    let n = 3;
    const k1 = k - 1;
    const km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        const g2 = nbi();
        z.sqrTo(g[1], g2);
        while(n <= km){
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    let j = e.t - 1;
    let w;
    let is1 = true;
    let r2 = nbi();
    let t;
    i = nbits(e[j]) - 1;
    while(j >= 0){
        if (i >= k1) w = e[j] >> i - k1 & km;
        else {
            w = (e[j] & (1 << i + 1) - 1) << k1 - i;
            if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while((w & 1) === 0){
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {
            // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        } else {
            while(n > 1){
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while(j >= 0 && (e[j] & 1 << i) === 0){
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    const result = z.revert(r);
    callback(null, result);
    return result;
}
// protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
// public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
// "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"je8qy":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateS", ()=>calculateS);
const calculateS = async ({ a, g, k, x, B, N, U })=>{
    return new Promise((resolve, reject)=>{
        g.modPow(x, N, (outerErr, outerResult)=>{
            if (outerErr) {
                reject(outerErr);
                return;
            }
            B.subtract(k.multiply(outerResult)).modPow(a.add(U.multiply(x)), N, (innerErr, innerResult)=>{
                if (innerErr) {
                    reject(innerErr);
                    return;
                }
                resolve(innerResult.mod(N));
            });
        });
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7q91c":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateU", ()=>calculateU);
var _bigIntegerMjs = require("../BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
var _getHashFromHexMjs = require("../getHashFromHex.mjs");
var _getPaddedHexMjs = require("../getPaddedHex.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ const calculateU = ({ A, B })=>{
    const U = new (0, _bigIntegerMjsDefault.default)((0, _getHashFromHexMjs.getHashFromHex)((0, _getPaddedHexMjs.getPaddedHex)(A) + (0, _getPaddedHexMjs.getPaddedHex)(B)), 16);
    if (U.equals((0, _bigIntegerMjsDefault.default).ZERO)) throw new Error('U cannot be zero.');
    return U;
};

},{"../BigInteger/BigInteger.mjs":"2NqAB","../getHashFromHex.mjs":"MXUj6","../getPaddedHex.mjs":"ghUB2","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"MXUj6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashFromHex", ()=>getHashFromHex);
var _getBytesFromHexMjs = require("./getBytesFromHex.mjs");
var _getHashFromDataMjs = require("./getHashFromData.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Calculate a hash from a hex string
 * @param {string} hexStr Value to hash.
 * @returns {string} Hex-encoded hash.
 * @private
 */ const getHashFromHex = (hexStr)=>(0, _getHashFromDataMjs.getHashFromData)((0, _getBytesFromHexMjs.getBytesFromHex)(hexStr));

},{"./getBytesFromHex.mjs":"jUhDa","./getHashFromData.mjs":"dghfl","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jUhDa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getBytesFromHex", ()=>getBytesFromHex);
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Converts a hexadecimal encoded string to a Uint8Array of bytes.
 *
 * @param encoded The hexadecimal encoded string
 */ const getBytesFromHex = (encoded)=>{
    if (encoded.length % 2 !== 0) throw new Error('Hex encoded strings must have an even number length');
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in (0, _constantsMjs.HEX_TO_SHORT)) out[i / 2] = (0, _constantsMjs.HEX_TO_SHORT)[encodedByte];
        else throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
    return out;
};

},{"./constants.mjs":"iJTaO","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iJTaO":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HEX_TO_SHORT", ()=>HEX_TO_SHORT);
parcelHelpers.export(exports, "INIT_N", ()=>INIT_N);
parcelHelpers.export(exports, "SHORT_TO_HEX", ()=>SHORT_TO_HEX);
const
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = `0${encodedByte}`;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dghfl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHashFromData", ()=>getHashFromData);
var _sha256Js = require("@aws-crypto/sha256-js");
var _getHexFromBytesMjs = require("./getHexFromBytes.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Calculate a hash from a `SourceData`
 * @param {SourceData} data Value to hash.
 * @returns {string} Hex-encoded hash.
 * @private
 */ const getHashFromData = (data)=>{
    const sha256 = new (0, _sha256Js.Sha256)();
    sha256.update(data);
    const hashedData = sha256.digestSync();
    const hashHexFromUint8 = (0, _getHexFromBytesMjs.getHexFromBytes)(hashedData);
    return new Array(64 - hashHexFromUint8.length).join('0') + hashHexFromUint8;
};

},{"@aws-crypto/sha256-js":"7twCg","./getHexFromBytes.mjs":"2U0j6","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2U0j6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHexFromBytes", ()=>getHexFromBytes);
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Converts a Uint8Array of binary data to a hexadecimal encoded string.
 *
 * @param bytes The binary data to encode
 */ const getHexFromBytes = (bytes)=>{
    let out = '';
    for(let i = 0; i < bytes.byteLength; i++)out += (0, _constantsMjs.SHORT_TO_HEX)[bytes[i]];
    return out;
};

},{"./constants.mjs":"iJTaO","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ghUB2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPaddedHex", ()=>getPaddedHex);
var _bigIntegerMjs = require("./BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Tests if a hex string has it most significant bit set (case-insensitive regex)
 */ const HEX_MSB_REGEX = /^[89a-f]/i;
/**
 * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.
 *
 * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a
 * byte array containing the two's-complement representation of a BigInteger. The array contains
 * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.
 *
 * Examples showing how ambiguity is avoided by left padding with:
 * 	"00" (for positive values where the most-significant-bit is set)
 *  "FF" (for negative values where the most-significant-bit is set)
 *
 * padHex(bigInteger.fromInt(-236))  === "FF14"
 * padHex(bigInteger.fromInt(20))    === "14"
 *
 * padHex(bigInteger.fromInt(-200))  === "FF38"
 * padHex(bigInteger.fromInt(56))    === "38"
 *
 * padHex(bigInteger.fromInt(-20))   === "EC"
 * padHex(bigInteger.fromInt(236))   === "00EC"
 *
 * padHex(bigInteger.fromInt(-56))   === "C8"
 * padHex(bigInteger.fromInt(200))   === "00C8"
 *
 * @param {AuthBigInteger} bigInt Number to encode.
 * @returns {String} even-length hex string of the two's complement encoding.
 */ const getPaddedHex = (bigInt)=>{
    if (!(bigInt instanceof (0, _bigIntegerMjsDefault.default))) throw new Error('Not a BigInteger');
    const isNegative = bigInt.compareTo((0, _bigIntegerMjsDefault.default).ZERO) < 0;
    /* Get a hex string for abs(bigInt) */ let hexStr = bigInt.abs().toString(16);
    /* Pad hex to even length if needed */ hexStr = hexStr.length % 2 !== 0 ? `0${hexStr}` : hexStr;
    /* Prepend "00" if the most significant bit is set */ hexStr = HEX_MSB_REGEX.test(hexStr) ? `00${hexStr}` : hexStr;
    if (isNegative) {
        /* Flip the bits of the representation */ const invertedNibbles = hexStr.split('').map((x)=>{
            const invertedNibble = ~parseInt(x, 16) & 0xf;
            return '0123456789ABCDEF'.charAt(invertedNibble);
        }).join('');
        /* After flipping the bits, add one to get the 2's complement representation */ const flippedBitsBI = new (0, _bigIntegerMjsDefault.default)(invertedNibbles, 16).add((0, _bigIntegerMjsDefault.default).ONE);
        hexStr = flippedBitsBI.toString(16);
        /*
        For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128

        Any sequence of '1' bits on the left can always be substituted with a single '1' bit
        without changing the represented value.

        This only happens in the case when the input is 80...00
        */ if (hexStr.toUpperCase().startsWith('FF8')) hexStr = hexStr.substring(2);
    }
    return hexStr;
};

},{"./BigInteger/BigInteger.mjs":"2NqAB","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hWw1C":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHkdfKey", ()=>getHkdfKey);
var _sha256Js = require("@aws-crypto/sha256-js");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Standard HKDF algorithm.
 *
 * @param {Uint8Array} ikm Input key material.
 * @param {Uint8Array} salt Salt value.
 * @param {Uint8Array} info Context and application specific info.
 *
 * @returns {Uint8Array} Strong key material.
 *
 * @internal
 */ const getHkdfKey = (ikm, salt, info)=>{
    const awsCryptoHash = new (0, _sha256Js.Sha256)(salt);
    awsCryptoHash.update(ikm);
    const resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
    const awsCryptoHashHmac = new (0, _sha256Js.Sha256)(resultFromAWSCryptoPrk);
    awsCryptoHashHmac.update(info);
    const resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
    const hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
    return hashHexFromAWSCrypto.slice(0, 16);
};

},{"@aws-crypto/sha256-js":"7twCg","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ilGLc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRandomBytes", ()=>getRandomBytes);
var _utils = require("@aws-amplify/core/internals/utils");
var _getBytesFromHexMjs = require("./getBytesFromHex.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Returns a Uint8Array with a sequence of random nBytes
 *
 * @param {number} nBytes
 * @returns {Uint8Array} fixed-length sequence of random bytes
 */ const getRandomBytes = (nBytes)=>{
    const str = new (0, _utils.WordArray)().random(nBytes).toString();
    return (0, _getBytesFromHexMjs.getBytesFromHex)(str);
};

},{"@aws-amplify/core/internals/utils":"dRREz","./getBytesFromHex.mjs":"jUhDa","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cmfb4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRandomString", ()=>getRandomString);
var _utils = require("@aws-amplify/core/internals/utils");
var _getRandomBytesMjs = require("./getRandomBytes.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Helper function to generate a random string
 * @returns {string} a random value.
 *
 * @internal
 */ const getRandomString = ()=>(0, _utils.base64Encoder).convert((0, _getRandomBytesMjs.getRandomBytes)(40));

},{"@aws-amplify/core/internals/utils":"dRREz","./getRandomBytes.mjs":"ilGLc","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5LCH9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateA", ()=>calculateA);
var _bigIntegerMjs = require("../BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * @internal
 */ const calculateA = async ({ a, g, N })=>{
    return new Promise((resolve, reject)=>{
        g.modPow(a, N, (err, A)=>{
            if (err) {
                reject(err);
                return;
            }
            if (A.mod(N).equals((0, _bigIntegerMjsDefault.default).ZERO)) {
                reject(new Error('Illegal parameter. A mod N cannot be 0.'));
                return;
            }
            resolve(A);
        });
    });
};

},{"../BigInteger/BigInteger.mjs":"2NqAB","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8s3dg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handlePasswordSRP", ()=>handlePasswordSRP);
var _utils = require("@aws-amplify/core/internals/utils");
var _userContextDataMjs = require("../../../providers/cognito/utils/userContextData.mjs");
var _getAuthenticationHelperMjs = require("../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs");
var _constantsMjs = require("../../../providers/cognito/utils/srp/constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _createInitiateAuthClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs1 = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _handlePasswordVerifierChallengeMjs = require("../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs");
var _retryOnResourceNotFoundExceptionMjs = require("../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs");
var _setActiveSignInUsernameMjs = require("../../../providers/cognito/utils/setActiveSignInUsername.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Handles the Password SRP (Secure Remote Password) authentication flow.
 * This function can be used with both USER_SRP_AUTH and USER_AUTH flows.
 *
 * @param {Object} params - The parameters for the Password SRP authentication
 * @param {string} params.username - The username for authentication
 * @param {string} params.password - The user's password
 * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests
 * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration
 * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Token orchestrator for managing auth tokens
 * @param {AuthFlowType} params.authFlow - The type of authentication flow ('USER_SRP_AUTH' or 'USER_AUTH')
 * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred challenge type when using USER_AUTH flow
 *
 * @returns {Promise<RespondToAuthChallengeCommandOutput>} The authentication response
 */ async function handlePasswordSRP({ username, password, clientMetadata, config, tokenOrchestrator, authFlow, preferredChallenge }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const userPoolName = userPoolId?.split('_')[1] || '';
    const authenticationHelper = await (0, _getAuthenticationHelperMjs.getAuthenticationHelper)(userPoolName);
    const authParameters = {
        USERNAME: username,
        SRP_A: authenticationHelper.A.toString(16)
    };
    if (authFlow === 'USER_AUTH' && preferredChallenge) authParameters.PREFERRED_CHALLENGE = preferredChallenge;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReq = {
        AuthFlow: authFlow,
        AuthParameters: authParameters,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    const initiateAuth = (0, _createInitiateAuthClientMjs.createInitiateAuthClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const resp = await initiateAuth({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignIn)
    }, jsonReq);
    const { ChallengeParameters: challengeParameters, Session: session } = resp;
    const activeUsername = challengeParameters?.USERNAME ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    if (resp.ChallengeName === 'PASSWORD_VERIFIER') return (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)((0, _handlePasswordVerifierChallengeMjs.handlePasswordVerifierChallenge), [
        password,
        challengeParameters,
        clientMetadata,
        session,
        authenticationHelper,
        config,
        tokenOrchestrator
    ], activeUsername, tokenOrchestrator);
    return resp;
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../../providers/cognito/utils/userContextData.mjs":"lOoDf","../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs":"jLFhO","../../../providers/cognito/utils/srp/constants.mjs":"iJTaO","@aws-crypto/sha256-js":"7twCg","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs":"9g63I","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs":"9qspM","../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs":"7W4D7","../../../providers/cognito/utils/setActiveSignInUsername.mjs":"flc2V","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lOoDf":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUserContextData", ()=>getUserContextData);
function getUserContextData({ username, userPoolId, userPoolClientId }) {
    if (typeof window === 'undefined') return undefined;
    const amazonCognitoAdvancedSecurityData = window.AmazonCognitoAdvancedSecurityData;
    if (typeof amazonCognitoAdvancedSecurityData === 'undefined') return undefined;
    const advancedSecurityData = amazonCognitoAdvancedSecurityData.getData(username, userPoolId, userPoolClientId);
    if (advancedSecurityData) {
        const userContextData = {
            EncodedData: advancedSecurityData
        };
        return userContextData;
    }
    return {};
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9qspM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handlePasswordVerifierChallenge", ()=>handlePasswordVerifierChallenge);
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _bigIntegerMjs = require("./srp/BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
var _constantsMjs1 = require("./srp/constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _getNowStringMjs = require("./srp/getNowString.mjs");
var _getSignatureStringMjs = require("./srp/getSignatureString.mjs");
var _userContextDataMjs = require("./userContextData.mjs");
var _handleDeviceSRPAuthMjs = require("./handleDeviceSRPAuth.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config, tokenOrchestrator) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const userPoolName = userPoolId?.split('_')[1] || '';
    const serverBValue = new (0, _bigIntegerMjsDefault.default)(challengeParameters?.SRP_B, 16);
    const salt = new (0, _bigIntegerMjsDefault.default)(challengeParameters?.SALT, 16);
    const username = challengeParameters?.USER_ID_FOR_SRP;
    if (!username) throw new (0, _authErrorMjs.AuthError)({
        name: 'EmptyUserIdForSRPException',
        message: 'USER_ID_FOR_SRP was not found in challengeParameters'
    });
    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
        username,
        password,
        serverBValue,
        salt
    });
    const dateNow = (0, _getNowStringMjs.getNowString)();
    const challengeResponses = {
        USERNAME: username,
        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,
        TIMESTAMP: dateNow,
        PASSWORD_CLAIM_SIGNATURE: (0, _getSignatureStringMjs.getSignatureString)({
            username,
            userPoolName,
            challengeParameters,
            dateNow,
            hkdf
        })
    };
    const deviceMetadata = await tokenOrchestrator.getDeviceMetadata(username);
    if (deviceMetadata && deviceMetadata.deviceKey) challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReqResponseChallenge = {
        ChallengeName: 'PASSWORD_VERIFIER',
        ChallengeResponses: challengeResponses,
        ClientMetadata: clientMetadata,
        Session: session,
        ClientId: userPoolClientId,
        UserContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId)
    }, jsonReqResponseChallenge);
    if (response.ChallengeName === 'DEVICE_SRP_AUTH') return (0, _handleDeviceSRPAuthMjs.handleDeviceSRPAuth)({
        username,
        config,
        clientMetadata,
        session: response.Session,
        tokenOrchestrator
    });
    return response;
}

},{"../../../errors/AuthError.mjs":"eST5l","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","./srp/BigInteger/BigInteger.mjs":"2NqAB","./srp/constants.mjs":"iJTaO","@aws-crypto/sha256-js":"7twCg","./srp/getNowString.mjs":"3nsal","./srp/getSignatureString.mjs":"6ZN8k","./userContextData.mjs":"lOoDf","./handleDeviceSRPAuth.mjs":"6PsRG","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3nsal":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getNowString", ()=>getNowString);
const MONTH_NAMES = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
const WEEK_NAMES = [
    'Sun',
    'Mon',
    'Tue',
    'Wed',
    'Thu',
    'Fri',
    'Sat'
];
const getNowString = ()=>{
    const now = new Date();
    const weekDay = WEEK_NAMES[now.getUTCDay()];
    const month = MONTH_NAMES[now.getUTCMonth()];
    const day = now.getUTCDate();
    let hours = now.getUTCHours();
    if (hours < 10) hours = `0${hours}`;
    let minutes = now.getUTCMinutes();
    if (minutes < 10) minutes = `0${minutes}`;
    let seconds = now.getUTCSeconds();
    if (seconds < 10) seconds = `0${seconds}`;
    const year = now.getUTCFullYear();
    // ddd MMM D HH:mm:ss UTC YYYY
    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;
    return dateNow;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6ZN8k":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignatureString", ()=>getSignatureString);
var _sha256Js = require("@aws-crypto/sha256-js");
var _utils = require("@aws-amplify/core/internals/utils");
var _indexMjs = require("../textEncoder/index.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const getSignatureString = ({ userPoolName, username, challengeParameters, dateNow, hkdf })=>{
    const bufUPIDaToB = (0, _indexMjs.textEncoder).convert(userPoolName);
    const bufUNaToB = (0, _indexMjs.textEncoder).convert(username);
    const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);
    const bufDNaToB = (0, _indexMjs.textEncoder).convert(dateNow);
    const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);
    bufConcat.set(bufUPIDaToB, 0);
    bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);
    bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);
    bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);
    const awsCryptoHash = new (0, _sha256Js.Sha256)(hkdf);
    awsCryptoHash.update(bufConcat);
    const resultFromAWSCrypto = awsCryptoHash.digestSync();
    const signatureString = (0, _utils.base64Encoder).convert(resultFromAWSCrypto);
    return signatureString;
};
const urlB64ToUint8Array = (base64String)=>{
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');
    const rawData = (0, _utils.base64Decoder).convert(base64);
    const outputArray = new Uint8Array(rawData.length);
    for(let i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);
    return outputArray;
};

},{"@aws-crypto/sha256-js":"7twCg","@aws-amplify/core/internals/utils":"dRREz","../textEncoder/index.mjs":"3QMNE","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6PsRG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleDeviceSRPAuth", ()=>handleDeviceSRPAuth);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("./types.mjs");
var _getAuthenticationHelperMjs = require("./srp/getAuthenticationHelper.mjs");
var _constantsMjs1 = require("./srp/constants.mjs");
var _getNowStringMjs = require("./srp/getNowString.mjs");
var _getSignatureStringMjs = require("./srp/getSignatureString.mjs");
var _bigIntegerMjs = require("./srp/BigInteger/BigInteger.mjs");
var _bigIntegerMjsDefault = parcelHelpers.interopDefault(_bigIntegerMjs);
var _userContextDataMjs = require("./userContextData.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function handleDeviceSRPAuth({ username, config, clientMetadata, session, tokenOrchestrator }) {
    const { userPoolId, userPoolEndpoint } = config;
    const clientId = config.userPoolClientId;
    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);
    (0, _typesMjs.assertDeviceMetadata)(deviceMetadata);
    const authenticationHelper = await (0, _getAuthenticationHelperMjs.getAuthenticationHelper)(deviceMetadata.deviceGroupKey);
    const challengeResponses = {
        USERNAME: username,
        SRP_A: authenticationHelper.A.toString(16),
        DEVICE_KEY: deviceMetadata.deviceKey
    };
    const jsonReqResponseChallenge = {
        ChallengeName: 'DEVICE_SRP_AUTH',
        ClientId: clientId,
        ChallengeResponses: challengeResponses,
        ClientMetadata: clientMetadata,
        Session: session
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { ChallengeParameters: respondedChallengeParameters, Session } = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId)
    }, jsonReqResponseChallenge);
    return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config, tokenOrchestrator);
}
async function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId, userPoolEndpoint }, tokenOrchestrator) {
    const deviceMetadata = await tokenOrchestrator?.getDeviceMetadata(username);
    (0, _typesMjs.assertDeviceMetadata)(deviceMetadata);
    const serverBValue = new (0, _bigIntegerMjsDefault.default)(challengeParameters?.SRP_B, 16);
    const salt = new (0, _bigIntegerMjsDefault.default)(challengeParameters?.SALT, 16);
    const { deviceKey } = deviceMetadata;
    const { deviceGroupKey } = deviceMetadata;
    const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
        username: deviceMetadata.deviceKey,
        password: deviceMetadata.randomPassword,
        serverBValue,
        salt
    });
    const dateNow = (0, _getNowStringMjs.getNowString)();
    const challengeResponses = {
        USERNAME: challengeParameters?.USERNAME ?? username,
        PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,
        TIMESTAMP: dateNow,
        PASSWORD_CLAIM_SIGNATURE: (0, _getSignatureStringMjs.getSignatureString)({
            username: deviceKey,
            userPoolName: deviceGroupKey,
            challengeParameters,
            dateNow,
            hkdf
        }),
        DEVICE_KEY: deviceKey
    };
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const jsonReqResponseChallenge = {
        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',
        ClientId: userPoolClientId,
        ChallengeResponses: challengeResponses,
        Session: session,
        ClientMetadata: clientMetadata,
        UserContextData
    };
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    return respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId)
    }, jsonReqResponseChallenge);
}

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","./types.mjs":"7EObU","./srp/getAuthenticationHelper.mjs":"jLFhO","./srp/constants.mjs":"iJTaO","./srp/getNowString.mjs":"3nsal","./srp/getSignatureString.mjs":"6ZN8k","./srp/BigInteger/BigInteger.mjs":"2NqAB","./userContextData.mjs":"lOoDf","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7W4D7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryOnResourceNotFoundException", ()=>retryOnResourceNotFoundException);
var _authErrorMjs = require("../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * It will retry the function if the error is a `ResourceNotFoundException` and
 * will clean the device keys stored in the storage mechanism.
 *
 */ async function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator) {
    try {
        return await func(...args);
    } catch (error) {
        if (error instanceof (0, _authErrorMjs.AuthError) && error.name === 'ResourceNotFoundException' && error.message.includes('Device does not exist.')) {
            await tokenOrchestrator.clearDeviceMetadata(username);
            return func(...args);
        }
        throw error;
    }
}

},{"../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"flc2V":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setActiveSignInUsername", ()=>setActiveSignInUsername);
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function setActiveSignInUsername(username) {
    const { dispatch } = (0, _signInStoreMjs.signInStore);
    dispatch({
        type: 'SET_USERNAME',
        value: username
    });
}

},{"../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"80lVq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initiateSelectedChallenge", ()=>initiateSelectedChallenge);
var _utils = require("@aws-amplify/core/internals/utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Handles the SELECT_CHALLENGE response for authentication.
 * Initiates the selected authentication challenge based on user choice.
 *
 * @param {Object} params - The parameters for handling the selected challenge
 * @param {string} params.username - The username for authentication
 * @param {string} params.session - The current authentication session token
 * @param {string} params.selectedChallenge - The challenge type selected by the user
 * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration
 * @param {ClientMetadata} [params.clientMetadata] - Optional metadata to be sent with auth requests
 *
 * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response
 */ async function initiateSelectedChallenge({ username, session, selectedChallenge, config, clientMetadata }) {
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: config.userPoolEndpoint
        })
    });
    return respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(config.userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, {
        ChallengeName: 'SELECT_CHALLENGE',
        ChallengeResponses: {
            USERNAME: username,
            ANSWER: selectedChallenge
        },
        ClientId: config.userPoolClientId,
        Session: session,
        ClientMetadata: clientMetadata
    });
}

},{"@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aE0BD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleSelectChallengeWithPassword", ()=>handleSelectChallengeWithPassword);
var _utils = require("@aws-amplify/core/internals/utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _userContextDataMjs = require("../../../providers/cognito/utils/userContextData.mjs");
var _setActiveSignInUsernameMjs = require("../../../providers/cognito/utils/setActiveSignInUsername.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Handles the SELECT_CHALLENGE response specifically for Password authentication.
 * This function combines the SELECT_CHALLENGE flow with standard password authentication.
 *
 * @param {string} username - The username for authentication
 * @param {string} password - The user's password
 * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests
 * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration
 * @param {string} session - The current authentication session token
 *
 * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response
 */ async function handleSelectChallengeWithPassword(username, password, clientMetadata, config, session) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const authParameters = {
        ANSWER: 'PASSWORD',
        USERNAME: username,
        PASSWORD: password
    };
    const userContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, {
        ChallengeName: 'SELECT_CHALLENGE',
        ChallengeResponses: authParameters,
        ClientId: userPoolClientId,
        ClientMetadata: clientMetadata,
        Session: session,
        UserContextData: userContextData
    });
    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    return response;
}

},{"@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../../providers/cognito/utils/userContextData.mjs":"lOoDf","../../../providers/cognito/utils/setActiveSignInUsername.mjs":"flc2V","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aWT2K":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleSelectChallengeWithPasswordSRP", ()=>handleSelectChallengeWithPasswordSRP);
var _utils = require("@aws-amplify/core/internals/utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createRespondToAuthChallengeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _getAuthenticationHelperMjs = require("../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs");
var _constantsMjs1 = require("../../../providers/cognito/utils/srp/constants.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _userContextDataMjs = require("../../../providers/cognito/utils/userContextData.mjs");
var _setActiveSignInUsernameMjs = require("../../../providers/cognito/utils/setActiveSignInUsername.mjs");
var _retryOnResourceNotFoundExceptionMjs = require("../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs");
var _handlePasswordVerifierChallengeMjs = require("../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Handles the SELECT_CHALLENGE response specifically for Password SRP authentication.
 * This function combines the SELECT_CHALLENGE flow with Password SRP protocol.
 *
 * @param {string} username - The username for authentication
 * @param {string} password - The user's password
 * @param {ClientMetadata} [clientMetadata] - Optional metadata to be sent with auth requests
 * @param {CognitoUserPoolConfig} config - Cognito User Pool configuration
 * @param {string} session - The current authentication session token
 * @param {AuthTokenOrchestrator} tokenOrchestrator - Token orchestrator for managing auth tokens
 *
 * @returns {Promise<RespondToAuthChallengeCommandOutput>} The challenge response
 */ async function handleSelectChallengeWithPasswordSRP(username, password, clientMetadata, config, session, tokenOrchestrator) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const userPoolName = userPoolId.split('_')[1] || '';
    const authenticationHelper = await (0, _getAuthenticationHelperMjs.getAuthenticationHelper)(userPoolName);
    const authParameters = {
        ANSWER: 'PASSWORD_SRP',
        USERNAME: username,
        SRP_A: authenticationHelper.A.toString(16)
    };
    const userContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const respondToAuthChallenge = (0, _createRespondToAuthChallengeClientMjs.createRespondToAuthChallengeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await respondToAuthChallenge({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignIn)
    }, {
        ChallengeName: 'SELECT_CHALLENGE',
        ChallengeResponses: authParameters,
        ClientId: userPoolClientId,
        ClientMetadata: clientMetadata,
        Session: session,
        UserContextData: userContextData
    });
    const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(activeUsername);
    if (response.ChallengeName === 'PASSWORD_VERIFIER') return (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)((0, _handlePasswordVerifierChallengeMjs.handlePasswordVerifierChallenge), [
        password,
        response.ChallengeParameters,
        clientMetadata,
        response.Session,
        authenticationHelper,
        config,
        tokenOrchestrator
    ], activeUsername, tokenOrchestrator);
    return response;
}

},{"@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs":"fViGp","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../../providers/cognito/utils/srp/getAuthenticationHelper.mjs":"jLFhO","../../../providers/cognito/utils/srp/constants.mjs":"iJTaO","@aws-crypto/sha256-js":"7twCg","../../../providers/cognito/utils/userContextData.mjs":"lOoDf","../../../providers/cognito/utils/setActiveSignInUsername.mjs":"flc2V","../../../providers/cognito/utils/retryOnResourceNotFoundException.mjs":"7W4D7","../../../providers/cognito/utils/handlePasswordVerifierChallenge.mjs":"9qspM","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"h12Ro":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithCustomAuth", ()=>signInWithCustomAuth);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _retryOnResourceNotFoundExceptionMjs = require("../utils/retryOnResourceNotFoundException.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in using a custom authentication flow without password
 *
 * @param input -  The SignInWithCustomAuthInput object
 * @returns AuthSignInResult
 * @throws service: {@link InitiateAuthException } - Cognito service errors thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password
 *  are not defined.
 * @throws SignInWithCustomAuthOutput - Thrown when the token provider config is invalid.
 */ async function signInWithCustomAuth(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { username, password, options } = input;
    const signInDetails = {
        loginId: username,
        authFlowType: 'CUSTOM_WITHOUT_SRP'
    };
    const metadata = options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!password, (0, _validationMjs.AuthValidationErrorCode).CustomAuthSignInPassword);
    try {
        const { ChallengeName: retriedChallengeName, ChallengeParameters: retiredChallengeParameters, AuthenticationResult, Session } = await (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)((0, _signInHelpersMjs.handleCustomAuthFlowWithoutSRP), [
            username,
            metadata,
            authConfig,
            (0, _tokenProviderMjs.tokenOrchestrator)
        ], username, (0, _tokenProviderMjs.tokenOrchestrator));
        const activeUsername = (0, _signInHelpersMjs.getActiveSignInUsername)(username);
        // sets up local state used during the sign-in process
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: Session,
            username: activeUsername,
            challengeName: retriedChallengeName,
            signInDetails
        });
        if (AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                username: activeUsername,
                ...AuthenticationResult,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
                    accessToken: AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: retriedChallengeName,
            challengeParameters: retiredChallengeParameters
        });
    } catch (error) {
        (0, _signInStoreMjs.resetActiveSignInState)();
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/utils/assertServiceError.mjs":"fOoR8","../utils/signInHelpers.mjs":"jkbXB","../../../client/utils/store/signInStore.mjs":"8w0aF","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/retryOnResourceNotFoundException.mjs":"7W4D7","../utils/getNewDeviceMetadata.mjs":"iZ9p7","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bmZqN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithCustomSRPAuth", ()=>signInWithCustomSRPAuth);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in using a custom authentication flow with SRP
 *
 * @param input -  The SignInWithCustomSRPAuthInput object
 * @returns SignInWithCustomSRPAuthOutput
 * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito
 * service errors thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signInWithCustomSRPAuth(input) {
    const { username, password, options } = input;
    const signInDetails = {
        loginId: username,
        authFlowType: 'CUSTOM_WITH_SRP'
    };
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const metadata = options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!!password, (0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword);
    try {
        const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await (0, _signInHelpersMjs.handleCustomSRPAuthFlow)(username, password, metadata, authConfig, (0, _tokenProviderMjs.tokenOrchestrator));
        const activeUsername = (0, _signInHelpersMjs.getActiveSignInUsername)(username);
        // sets up local state used during the sign-in process
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: Session,
            username: activeUsername,
            challengeName: handledChallengeName,
            signInDetails
        });
        if (AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                username: activeUsername,
                ...AuthenticationResult,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
                    accessToken: AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: handledChallengeName,
            challengeParameters: handledChallengeParameters
        });
    } catch (error) {
        (0, _signInStoreMjs.resetActiveSignInState)();
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/utils/assertServiceError.mjs":"fOoR8","../utils/signInHelpers.mjs":"jkbXB","../../../client/utils/store/signInStore.mjs":"8w0aF","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/getNewDeviceMetadata.mjs":"iZ9p7","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hzJmY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithSRP", ()=>signInWithSRP);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in
 *
 * @param input - The SignInWithSRPInput object
 * @returns SignInWithSRPOutput
 * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors
 * thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signInWithSRP(input) {
    const { username, password } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const signInDetails = {
        loginId: username,
        authFlowType: 'USER_SRP_AUTH'
    };
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const clientMetaData = input.options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!!password, (0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword);
    try {
        const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await (0, _signInHelpersMjs.handleUserSRPAuthFlow)(username, password, clientMetaData, authConfig, (0, _tokenProviderMjs.tokenOrchestrator));
        const activeUsername = (0, _signInHelpersMjs.getActiveSignInUsername)(username);
        // sets up local state used during the sign-in process
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: Session,
            username: activeUsername,
            challengeName: handledChallengeName,
            signInDetails
        });
        if (AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                username: activeUsername,
                ...AuthenticationResult,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
                    accessToken: AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            (0, _autoSignInMjs.resetAutoSignIn)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: handledChallengeName,
            challengeParameters: handledChallengeParameters
        });
    } catch (error) {
        (0, _signInStoreMjs.resetActiveSignInState)();
        (0, _autoSignInMjs.resetAutoSignIn)();
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/utils/assertServiceError.mjs":"fOoR8","../utils/signInHelpers.mjs":"jkbXB","../../../client/utils/store/signInStore.mjs":"8w0aF","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/getNewDeviceMetadata.mjs":"iZ9p7","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"e8H7g":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "autoSignIn", ()=>autoSignIn);
parcelHelpers.export(exports, "resetAutoSignIn", ()=>resetAutoSignIn);
parcelHelpers.export(exports, "setAutoSignIn", ()=>setAutoSignIn);
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const initialAutoSignIn = async ()=>{
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _constantsMjs.AUTO_SIGN_IN_EXCEPTION),
        message: 'The autoSignIn flow has not started, or has been cancelled/completed.',
        recoverySuggestion: 'Please try to use the signIn API or log out before starting a new autoSignIn flow.'
    });
};
/**
 * Signs a user in automatically after finishing the sign-up process.
 *
 * This API will automatically sign a user in if the autoSignIn flow has been completed in the following cases:
 * - User confirmed their account with a verification code sent to their phone or email (default option).
 * - User confirmed their account with a verification link sent to their phone or email. In order to
 * enable this option you need to go to the Amazon Cognito [console](https://aws.amazon.com/pm/cognito),
 * look for your userpool, then go to the `Messaging` tab and enable `link` mode inside the `Verification message` option.
 * Finally you need to define the `signUpVerificationMethod` in your `Auth` config.
 *
 * @example
 * ```typescript
 *  Amplify.configure({
 *    Auth: {
 *     Cognito: {
 *    ...cognitoConfig,
 *    signUpVerificationMethod: "link" // the default value is "code"
 *   }
 *	}});
 * ```
 *
 * @throws AutoSignInException - Thrown when the autoSignIn flow has not started, or has been cancelled/completed.
 * @returns The signInOutput.
 *
 * @example
 * ```typescript
 *  // handleSignUp.ts
 * async function handleSignUp(
 *   username:string,
 *   password:string
 * ){
 *   try {
 *     const { nextStep } = await signUp({
 *       username,
 *       password,
 *       options: {
 *         userAttributes:{ email:'email@email.com'},
 *         autoSignIn: true // This enables the auto sign-in flow.
 *       },
 *     });
 *
 *     handleSignUpStep(nextStep);
 *
 *   } catch (error) {
 *     console.log(error);
 *   }
 * }
 *
 * // handleConfirmSignUp.ts
 * async function handleConfirmSignUp(username:string, confirmationCode:string) {
 *   try {
 *     const { nextStep } = await confirmSignUp({
 *       username,
 *       confirmationCode,
 *     });
 *
 *     handleSignUpStep(nextStep);
 *   } catch (error) {
 *     console.log(error);
 *   }
 * }
 *
 * // signUpUtils.ts
 * async function handleSignUpStep( step: SignUpOutput["nextStep"]) {
 * switch (step.signUpStep) {
 *   case "CONFIRM_SIGN_UP":
 *
 *    // Redirect end-user to confirm-sign up screen.
 *
 *   case "COMPLETE_AUTO_SIGN_IN":
 *	   const codeDeliveryDetails = step.codeDeliveryDetails;
 *     if (codeDeliveryDetails) {
 *      // Redirect user to confirm-sign-up with link screen.
 *     }
 *     const signInOutput = await autoSignIn();
 *   // handle sign-in steps
 * }
 *
 * ```
 */ // TODO(Eslint): can this be refactored not using `let` on exported member?
// eslint-disable-next-line import/no-mutable-exports
let autoSignIn = initialAutoSignIn;
/**
 * Sets the context of autoSignIn at run time.
 * @internal
 */ function setAutoSignIn(callback) {
    autoSignIn = callback;
}
/**
 * Resets the context
 *
 * @internal
 */ function resetAutoSignIn(resetCallback = true) {
    if (resetCallback) autoSignIn = initialAutoSignIn;
    (0, _autoSignInStoreMjs.autoSignInStore).dispatch({
        type: 'RESET'
    });
}

},{"../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","../../../errors/AuthError.mjs":"eST5l","../../../errors/constants.mjs":"8UaIu","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6llbb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithUserPassword", ()=>signInWithUserPassword);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _retryOnResourceNotFoundExceptionMjs = require("../utils/retryOnResourceNotFoundException.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in using USER_PASSWORD_AUTH AuthFlowType
 *
 * @param input - The SignInWithUserPasswordInput object
 * @returns SignInWithUserPasswordOutput
 * @throws service: {@link InitiateAuthException } - Cognito service error thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signInWithUserPassword(input) {
    const { username, password, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const signInDetails = {
        loginId: username,
        authFlowType: 'USER_PASSWORD_AUTH'
    };
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const metadata = options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!!password, (0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword);
    try {
        const { ChallengeName: retiredChallengeName, ChallengeParameters: retriedChallengeParameters, AuthenticationResult, Session } = await (0, _retryOnResourceNotFoundExceptionMjs.retryOnResourceNotFoundException)((0, _signInHelpersMjs.handleUserPasswordAuthFlow), [
            username,
            password,
            metadata,
            authConfig,
            (0, _tokenProviderMjs.tokenOrchestrator)
        ], username, (0, _tokenProviderMjs.tokenOrchestrator));
        const activeUsername = (0, _signInHelpersMjs.getActiveSignInUsername)(username);
        // sets up local state used during the sign-in process
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: Session,
            username: activeUsername,
            challengeName: retiredChallengeName,
            signInDetails
        });
        if (AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                ...AuthenticationResult,
                username: activeUsername,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
                    accessToken: AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            (0, _autoSignInMjs.resetAutoSignIn)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: retiredChallengeName,
            challengeParameters: retriedChallengeParameters
        });
    } catch (error) {
        (0, _signInStoreMjs.resetActiveSignInState)();
        (0, _autoSignInMjs.resetAutoSignIn)();
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../utils/signInHelpers.mjs":"jkbXB","../../../client/utils/store/signInStore.mjs":"8w0aF","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/retryOnResourceNotFoundException.mjs":"7W4D7","../utils/getNewDeviceMetadata.mjs":"iZ9p7","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jTXZx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithUserAuth", ()=>signInWithUserAuth);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _handleUserAuthFlowMjs = require("../../../client/flows/userAuth/handleUserAuthFlow.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs a user in through a registered email or phone number without a password by by receiving and entering an OTP.
 *
 * @param input - The SignInWithUserAuthInput object
 * @returns SignInWithUserAuthOutput
 * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException } - Cognito service errors
 * thrown during the sign-in process.
 * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password -- needs to change
 *  are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signInWithUserAuth(input) {
    const { username, password, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const signInDetails = {
        loginId: username,
        authFlowType: 'USER_AUTH'
    };
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const clientMetaData = options?.clientMetadata;
    const preferredChallenge = options?.preferredChallenge;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignInUsername);
    try {
        const handleUserAuthFlowInput = {
            username,
            config: authConfig,
            tokenOrchestrator: (0, _tokenProviderMjs.tokenOrchestrator),
            clientMetadata: clientMetaData,
            preferredChallenge,
            password
        };
        const autoSignInStoreState = (0, _autoSignInStoreMjs.autoSignInStore).getState();
        if (autoSignInStoreState.active && autoSignInStoreState.username === username) handleUserAuthFlowInput.session = autoSignInStoreState.session;
        const response = await (0, _handleUserAuthFlowMjs.handleUserAuthFlow)(handleUserAuthFlowInput);
        const activeUsername = (0, _signInHelpersMjs.getActiveSignInUsername)(username);
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: response.Session,
            username: activeUsername,
            challengeName: response.ChallengeName,
            signInDetails
        });
        if (response.AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                username: activeUsername,
                ...response.AuthenticationResult,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,
                    accessToken: response.AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            (0, _autoSignInMjs.resetAutoSignIn)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: response.ChallengeName,
            challengeParameters: response.ChallengeParameters,
            availableChallenges: 'AvailableChallenges' in response ? response.AvailableChallenges : undefined
        });
    } catch (error) {
        (0, _signInStoreMjs.resetActiveSignInState)();
        (0, _autoSignInMjs.resetAutoSignIn)();
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/utils/assertServiceError.mjs":"fOoR8","../utils/signInHelpers.mjs":"jkbXB","../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../../../client/flows/userAuth/handleUserAuthFlow.mjs":"dXelJ","../utils/getNewDeviceMetadata.mjs":"iZ9p7","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dXelJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleUserAuthFlow", ()=>handleUserAuthFlow);
var _utils = require("@aws-amplify/core/internals/utils");
var _userContextDataMjs = require("../../../providers/cognito/utils/userContextData.mjs");
var _createInitiateAuthClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../../../providers/cognito/types/errors.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _handlePasswordSRPMjs = require("../shared/handlePasswordSRP.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _setActiveSignInUsernameMjs = require("../../../providers/cognito/utils/setActiveSignInUsername.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Handles user authentication flow with configurable challenge preferences.
 * Supports AuthFactorType challenges through the USER_AUTH flow.
 *
 * @param {HandleUserAuthFlowInput} params - Authentication flow parameters
 * @param {string} params.username - The username for authentication
 * @param {Record<string, string>} [params.clientMetadata] - Optional metadata to pass to authentication service
 * @param {CognitoUserPoolConfig} params.config - Cognito User Pool configuration
 * @param {AuthTokenOrchestrator} params.tokenOrchestrator - Manages authentication tokens and device tracking
 * @param {AuthFactorType} [params.preferredChallenge] - Optional preferred authentication method
 * @param {string} [params.password] - Required when preferredChallenge is 'PASSWORD' or 'PASSWORD_SRP'
 *
 * @returns {Promise<InitiateAuthCommandOutput>} The authentication response from Cognito
 */ async function handleUserAuthFlow({ username, clientMetadata, config, tokenOrchestrator, preferredChallenge, password, session }) {
    const { userPoolId, userPoolClientId, userPoolEndpoint } = config;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const authParameters = {
        USERNAME: username
    };
    if (preferredChallenge) {
        if (preferredChallenge === 'PASSWORD_SRP') {
            (0, _assertValidationErrorMjs.assertValidationError)(!!password, (0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword);
            return (0, _handlePasswordSRPMjs.handlePasswordSRP)({
                username,
                password,
                clientMetadata,
                config,
                tokenOrchestrator,
                authFlow: 'USER_AUTH',
                preferredChallenge
            });
        }
        if (preferredChallenge === 'PASSWORD') {
            (0, _assertValidationErrorMjs.assertValidationError)(!!password, (0, _validationMjs.AuthValidationErrorCode).EmptySignInPassword);
            authParameters.PASSWORD = password;
        }
        authParameters.PREFERRED_CHALLENGE = preferredChallenge;
    }
    const jsonReq = {
        AuthFlow: 'USER_AUTH',
        AuthParameters: authParameters,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    };
    if (session) jsonReq.Session = session;
    const initiateAuth = (0, _createInitiateAuthClientMjs.createInitiateAuthClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await initiateAuth({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignIn)
    }, jsonReq);
    // Set the active username immediately after successful authentication attempt
    // If a user starts a new sign-in while another sign-in is incomplete,
    // this ensures we're tracking the correct user for subsequent auth challenges.
    (0, _setActiveSignInUsernameMjs.setActiveSignInUsername)(username);
    return response;
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../../providers/cognito/utils/userContextData.mjs":"lOoDf","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs":"9g63I","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../providers/cognito/types/errors.mjs":"2qQV1","../../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../shared/handlePasswordSRP.mjs":"8s3dg","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../providers/cognito/utils/setActiveSignInUsername.mjs":"flc2V","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"efr3r":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSignUpClient", ()=>createSignUpClient);
parcelHelpers.export(exports, "createSignUpClientDeserializer", ()=>createSignUpClientDeserializer);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _authErrorStringsMjs = require("../../../../common/AuthErrorStrings.mjs");
var _authErrorMjs = require("../../../../errors/AuthError.mjs");
var _validationMjs = require("../../../../errors/types/validation.mjs");
var _assertServiceErrorMjs = require("../../../../errors/utils/assertServiceError.mjs");
var _errorsMjs = require("../../../../providers/cognito/types/errors.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createSignUpClientDeserializer = ()=>async (response)=>{
        if (response.statusCode >= 300) {
            const error = await (0, _awsClientUtils.parseJsonError)(response);
            (0, _assertServiceErrorMjs.assertServiceError)(error);
            if (// Missing Password Error
            // 1 validation error detected: Value at 'password'failed to satisfy constraint: Member must not be null
            error.name === (0, _errorsMjs.SignUpException).InvalidParameterException && /'password'/.test(error.message) && /Member must not be null/.test(error.message)) {
                const name = (0, _validationMjs.AuthValidationErrorCode).EmptySignUpPassword;
                const { message, recoverySuggestion } = (0, _authErrorStringsMjs.validationErrorMap)[name];
                throw new (0, _authErrorMjs.AuthError)({
                    name,
                    message,
                    recoverySuggestion
                });
            }
            throw new (0, _authErrorMjs.AuthError)({
                name: error.name,
                message: error.message
            });
        }
        return (0, _awsClientUtils.parseJsonBody)(response);
    };
const createSignUpClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('SignUp'), createSignUpClientDeserializer(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../../common/AuthErrorStrings.mjs":"dhvVB","../../../../errors/AuthError.mjs":"eST5l","../../../../errors/types/validation.mjs":"8dvEu","../../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../../providers/cognito/types/errors.mjs":"2qQV1","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iTWkD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resetPassword", ()=>resetPassword);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _userContextDataMjs = require("../utils/userContextData.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createForgotPasswordClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Resets a user's password.
 *
 * @param input -  The ResetPasswordInput object.
 * @returns ResetPasswordOutput
 * @throws -{@link ForgotPasswordException }
 * Thrown due to an invalid confirmation code or password.
 * @throws -{@link AuthValidationErrorCode }
 * Thrown due to an empty username.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 **/ async function resetPassword(input) {
    const { username } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptyResetPasswordUsername);
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
    const clientMetadata = input.options?.clientMetadata;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const forgotPassword = (0, _createForgotPasswordClientMjs.createForgotPasswordClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const res = await forgotPassword({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ResetPassword)
    }, {
        Username: username,
        ClientMetadata: clientMetadata,
        ClientId: userPoolClientId,
        UserContextData
    });
    const codeDeliveryDetails = res.CodeDeliveryDetails;
    return {
        isPasswordReset: false,
        nextStep: {
            resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',
            codeDeliveryDetails: {
                deliveryMedium: codeDeliveryDetails?.DeliveryMedium,
                destination: codeDeliveryDetails?.Destination,
                attributeName: codeDeliveryDetails?.AttributeName
            }
        }
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/userContextData.mjs":"lOoDf","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs":"hqIyl","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hqIyl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createForgotPasswordClient", ()=>createForgotPasswordClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createForgotPasswordClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ForgotPassword'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jTFYv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confirmResetPassword", ()=>confirmResetPassword);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _userContextDataMjs = require("../utils/userContextData.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createConfirmForgotPasswordClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Confirms the new password and verification code to reset the password.
 *
 * @param input -  The ConfirmResetPasswordInput object.
 * @throws -{@link ConfirmForgotPasswordException }
 * Thrown due to an invalid confirmation code or password.
 * @throws -{@link AuthValidationErrorCode }
 * Thrown due to an empty confirmation code, password or username.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function confirmResetPassword(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
    const { username, newPassword } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!!newPassword, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordNewPassword);
    const code = input.confirmationCode;
    (0, _assertValidationErrorMjs.assertValidationError)(!!code, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmResetPasswordConfirmationCode);
    const metadata = input.options?.clientMetadata;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const confirmForgotPassword = (0, _createConfirmForgotPasswordClientMjs.createConfirmForgotPasswordClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await confirmForgotPassword({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(authConfig.userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmResetPassword)
    }, {
        Username: username,
        ConfirmationCode: code,
        Password: newPassword,
        ClientMetadata: metadata,
        ClientId: authConfig.userPoolClientId,
        UserContextData
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/userContextData.mjs":"lOoDf","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs":"iQiHL","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../../foundation/parsers/regionParsers.mjs":"1DoVs","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iQiHL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConfirmForgotPasswordClient", ()=>createConfirmForgotPasswordClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createConfirmForgotPasswordClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ConfirmForgotPassword'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6cliD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resendSignUpCode", ()=>resendSignUpCode);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _userContextDataMjs = require("../utils/userContextData.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createResendConfirmationCodeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Resend the confirmation code while signing up
 *
 * @param input -  The ResendSignUpCodeInput object
 * @returns ResendSignUpCodeOutput
 * @throws service: {@link ResendConfirmationException } - Cognito service errors thrown when resending the code.
 * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username are not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function resendSignUpCode(input) {
    const { username } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptySignUpUsername);
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
    const clientMetadata = input.options?.clientMetadata;
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const resendConfirmationCode = (0, _createResendConfirmationCodeClientMjs.createResendConfirmationCodeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { CodeDeliveryDetails } = await resendConfirmationCode({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(authConfig.userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ResendSignUpCode)
    }, {
        Username: username,
        ClientMetadata: clientMetadata,
        ClientId: authConfig.userPoolClientId,
        UserContextData
    });
    const { DeliveryMedium, AttributeName, Destination } = {
        ...CodeDeliveryDetails
    };
    return {
        destination: Destination,
        deliveryMedium: DeliveryMedium,
        attributeName: AttributeName ? AttributeName : undefined
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/types/validation.mjs":"8dvEu","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/userContextData.mjs":"lOoDf","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs":"8A3wP","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8A3wP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createResendConfirmationCodeClient", ()=>createResendConfirmationCodeClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createResendConfirmationCodeClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ResendConfirmationCode'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4yiTg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confirmSignUp", ()=>confirmSignUp);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _userContextDataMjs = require("../utils/userContextData.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createConfirmSignUpClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _autoSignInMjs = require("./autoSignIn.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Confirms a new user account.
 *
 * @param input -  The ConfirmSignUpInput object.
 * @returns ConfirmSignUpOutput
 * @throws -{@link ConfirmSignUpException }
 * Thrown due to an invalid confirmation code.
 * @throws -{@link AuthValidationErrorCode }
 * Thrown due to an empty confirmation code
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function confirmSignUp(input) {
    const { username, confirmationCode, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
    const clientMetadata = options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!username, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmSignUpUsername);
    (0, _assertValidationErrorMjs.assertValidationError)(!!confirmationCode, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmSignUpCode);
    const UserContextData = (0, _userContextDataMjs.getUserContextData)({
        username,
        userPoolId,
        userPoolClientId
    });
    const confirmSignUpClient = (0, _createConfirmSignUpClientMjs.createConfirmSignUpClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { Session: session } = await confirmSignUpClient({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(authConfig.userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmSignUp)
    }, {
        Username: username,
        ConfirmationCode: confirmationCode,
        ClientMetadata: clientMetadata,
        ForceAliasCreation: options?.forceAliasCreation,
        ClientId: authConfig.userPoolClientId,
        UserContextData
    });
    return new Promise((resolve, reject)=>{
        try {
            const signUpOut = {
                isSignUpComplete: true,
                nextStep: {
                    signUpStep: 'DONE'
                }
            };
            const autoSignInStoreState = (0, _autoSignInStoreMjs.autoSignInStore).getState();
            if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {
                resolve(signUpOut);
                (0, _autoSignInMjs.resetAutoSignIn)();
                return;
            }
            (0, _autoSignInStoreMjs.autoSignInStore).dispatch({
                type: 'SET_SESSION',
                value: session
            });
            const stopListener = (0, _utils.HubInternal).listen('auth-internal', ({ payload })=>{
                switch(payload.event){
                    case 'autoSignIn':
                        resolve({
                            isSignUpComplete: true,
                            nextStep: {
                                signUpStep: 'COMPLETE_AUTO_SIGN_IN'
                            }
                        });
                        stopListener();
                }
            });
            (0, _utils.HubInternal).dispatch('auth-internal', {
                event: 'confirmSignUp',
                data: signUpOut
            });
        } catch (error) {
            reject(error);
        }
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/types/validation.mjs":"8dvEu","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/userContextData.mjs":"lOoDf","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs":"6GoUS","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","./autoSignIn.mjs":"e8H7g","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6GoUS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConfirmSignUpClient", ()=>createConfirmSignUpClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _constantsMjs = require("./constants.mjs");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createConfirmSignUpClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ConfirmSignUp'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./constants.mjs":"dhcbk","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6yTEi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confirmSignIn", ()=>confirmSignIn);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _autoSignInStoreMjs = require("../../../client/utils/store/autoSignInStore.mjs");
var _signInStoreMjs = require("../../../client/utils/store/signInStore.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _cacheTokensMjs = require("../tokenProvider/cacheTokens.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _dispatchSignedInHubEventMjs = require("../utils/dispatchSignedInHubEvent.mjs");
var _getNewDeviceMetadataMjs = require("../utils/getNewDeviceMetadata.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Continues or completes the sign in process when required by the initial call to `signIn`.
 *
 * @param input -  The ConfirmSignInInput object
 * @returns ConfirmSignInOutput
 * @throws  -{@link VerifySoftwareTokenException }:
 * Thrown due to an invalid MFA token.
 * @throws  -{@link RespondToAuthChallengeException }:
 * Thrown due to an invalid auth challenge response.
 * @throws  -{@link AssociateSoftwareTokenException}:
 * Thrown due to a service error during the MFA setup process.
 * @throws  -{@link AuthValidationErrorCode }:
 * Thrown when `challengeResponse` is not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function confirmSignIn(input) {
    const { challengeResponse, options } = input;
    const { username, challengeName, signInSession, signInDetails } = (0, _signInStoreMjs.signInStore).getState();
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const clientMetaData = options?.clientMetadata;
    (0, _assertValidationErrorMjs.assertValidationError)(!!challengeResponse, (0, _validationMjs.AuthValidationErrorCode).EmptyChallengeResponse);
    if (!username || !challengeName || !signInSession) // TODO: remove this error message for production apps
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authErrorStringsMjs.AuthErrorCodes).SignInException,
        message: `
			An error occurred during the sign in process.

			This most likely occurred due to:
			1. signIn was not called before confirmSignIn.
			2. signIn threw an exception.
			3. page was refreshed during the sign in flow and session has expired.
			`,
        recoverySuggestion: "Make sure a successful call to signIn is made before calling confirmSignInand that the session has not expired."
    });
    try {
        const { Session, ChallengeName: handledChallengeName, AuthenticationResult, ChallengeParameters: handledChallengeParameters } = await (0, _signInHelpersMjs.handleChallengeName)(username, challengeName, signInSession, challengeResponse, authConfig, (0, _tokenProviderMjs.tokenOrchestrator), clientMetaData, options);
        // sets up local state used during the sign-in process
        (0, _signInStoreMjs.setActiveSignInState)({
            signInSession: Session,
            username,
            challengeName: handledChallengeName,
            signInDetails
        });
        if (AuthenticationResult) {
            await (0, _cacheTokensMjs.cacheCognitoTokens)({
                username,
                ...AuthenticationResult,
                NewDeviceMetadata: await (0, _getNewDeviceMetadataMjs.getNewDeviceMetadata)({
                    userPoolId: authConfig.userPoolId,
                    userPoolEndpoint: authConfig.userPoolEndpoint,
                    newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
                    accessToken: AuthenticationResult.AccessToken
                }),
                signInDetails
            });
            (0, _signInStoreMjs.resetActiveSignInState)();
            await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
            return {
                isSignedIn: true,
                nextStep: {
                    signInStep: 'DONE'
                }
            };
        }
        return (0, _signInHelpersMjs.getSignInResult)({
            challengeName: handledChallengeName,
            challengeParameters: handledChallengeParameters
        });
    } catch (error) {
        (0, _assertServiceErrorMjs.assertServiceError)(error);
        const result = (0, _signInHelpersMjs.getSignInResultFromError)(error.name);
        if (result) return result;
        throw error;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../client/utils/store/autoSignInStore.mjs":"8L9Z2","../../../client/utils/store/signInStore.mjs":"8w0aF","../../../errors/AuthError.mjs":"eST5l","../utils/signInHelpers.mjs":"jkbXB","../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../errors/types/validation.mjs":"8dvEu","../../../common/AuthErrorStrings.mjs":"dhvVB","../tokenProvider/cacheTokens.mjs":"hPE3v","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/types.mjs":"7EObU","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/dispatchSignedInHubEvent.mjs":"1QBvv","../utils/getNewDeviceMetadata.mjs":"iZ9p7","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8cFLI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getMFASettings", ()=>getMFASettings);
parcelHelpers.export(exports, "updateMFAPreference", ()=>updateMFAPreference);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createSetUserMFAPreferenceClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSetUserMFAPreferenceClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Updates the MFA preference of the user.
 *
 * @param input - The UpdateMFAPreferenceInput object.
 * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function updateMFAPreference(input) {
    const { sms, totp, email } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const setUserMFAPreference = (0, _createSetUserMFAPreferenceClientMjs.createSetUserMFAPreferenceClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await setUserMFAPreference({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).UpdateMFAPreference)
    }, {
        AccessToken: tokens.accessToken.toString(),
        SMSMfaSettings: getMFASettings(sms),
        SoftwareTokenMfaSettings: getMFASettings(totp),
        EmailMfaSettings: getMFASettings(email)
    });
}
function getMFASettings(mfaPreference) {
    if (mfaPreference === 'DISABLED') return {
        Enabled: false
    };
    else if (mfaPreference === 'PREFERRED') return {
        Enabled: true,
        PreferredMfa: true
    };
    else if (mfaPreference === 'ENABLED') return {
        Enabled: true
    };
    else if (mfaPreference === 'NOT_PREFERRED') return {
        Enabled: true,
        PreferredMfa: false
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createSetUserMFAPreferenceClient.mjs":"9Id46","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9Id46":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createSetUserMFAPreferenceClient", ()=>createSetUserMFAPreferenceClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createSetUserMFAPreferenceClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('SetUserMFAPreference'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7Yp9f":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchMFAPreference", ()=>fetchMFAPreference);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createGetUserClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Fetches the preferred MFA setting and enabled MFA settings for the user.
 *
 * @returns FetchMFAPreferenceOutput
 * @throws  -{@link GetUserException} : error thrown when the service fails to fetch MFA preference
 * and settings.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function fetchMFAPreference() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const getUser = (0, _createGetUserClientMjs.createGetUserClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { PreferredMfaSetting, UserMFASettingList } = await getUser({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).FetchMFAPreference)
    }, {
        AccessToken: tokens.accessToken.toString()
    });
    return {
        preferred: (0, _signInHelpersMjs.getMFAType)(PreferredMfaSetting),
        enabled: (0, _signInHelpersMjs.getMFATypes)(UserMFASettingList)
    };
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/signInHelpers.mjs":"jkbXB","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs":"71mRH","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"71mRH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetUserClient", ()=>createGetUserClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGetUserClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('GetUser'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"g77US":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "verifyTOTPSetup", ()=>verifyTOTPSetup);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createVerifySoftwareTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Verifies an OTP code retrieved from an associated authentication app.
 *
 * @param input - The VerifyTOTPSetupInput
 * @throws  -{@link VerifySoftwareTokenException }:
 * Thrown due to an invalid MFA token.
 * @throws  -{@link AuthValidationErrorCode }:
 * Thrown when `code` is not defined.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function verifyTOTPSetup(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { code, options } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!code, (0, _validationMjs.AuthValidationErrorCode).EmptyVerifyTOTPSetupCode);
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const verifySoftwareToken = (0, _createVerifySoftwareTokenClientMjs.createVerifySoftwareTokenClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await verifySoftwareToken({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).VerifyTOTPSetup)
    }, {
        AccessToken: tokens.accessToken.toString(),
        UserCode: code,
        FriendlyDeviceName: options?.friendlyDeviceName
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs":"inOun","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"7zTpS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updatePassword", ()=>updatePassword);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createChangePasswordClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createChangePasswordClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Updates user's password while authenticated.
 *
 * @param input - The UpdatePasswordInput object.
 * @throws - {@link ChangePasswordException} - Cognito service errors thrown when updating a password.
 * @throws - {@link AuthValidationErrorCode} - Validation errors thrown when oldPassword or newPassword are empty.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function updatePassword(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { oldPassword, newPassword } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!oldPassword, (0, _validationMjs.AuthValidationErrorCode).EmptyUpdatePassword);
    (0, _assertValidationErrorMjs.assertValidationError)(!!newPassword, (0, _validationMjs.AuthValidationErrorCode).EmptyUpdatePassword);
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const changePassword = (0, _createChangePasswordClientMjs.createChangePasswordClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await changePassword({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).UpdatePassword)
    }, {
        AccessToken: tokens.accessToken.toString(),
        PreviousPassword: oldPassword,
        ProposedPassword: newPassword
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createChangePasswordClient.mjs":"03Z85","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"03Z85":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createChangePasswordClient", ()=>createChangePasswordClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createChangePasswordClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ChangePassword'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"43zCQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setUpTOTP", ()=>setUpTOTP);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _createAssociateSoftwareTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Sets up TOTP for the user.
 *
 * @returns SetUpTOTPOutput
 * @throws -{@link AssociateSoftwareTokenException}
 * Thrown if a service occurs while setting up TOTP.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 **/ async function setUpTOTP() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const username = tokens.idToken?.payload['cognito:username'] ?? '';
    const associateSoftwareToken = (0, _createAssociateSoftwareTokenClientMjs.createAssociateSoftwareTokenClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { SecretCode } = await associateSoftwareToken({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SetUpTOTP)
    }, {
        AccessToken: tokens.accessToken.toString()
    });
    if (!SecretCode) // This should never happen.
    throw new (0, _authErrorMjs.AuthError)({
        name: (0, _errorsMjs.SETUP_TOTP_EXCEPTION),
        message: 'Failed to set up TOTP.'
    });
    return (0, _signInHelpersMjs.getTOTPSetupDetails)(SecretCode, JSON.stringify(username));
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/AuthError.mjs":"eST5l","../types/errors.mjs":"2qQV1","../utils/signInHelpers.mjs":"jkbXB","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs":"1urqd","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"95Cy7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateUserAttributes", ()=>updateUserAttributes);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../utils/types.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _apiHelpersMjs = require("../utils/apiHelpers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createUpdateUserAttributesClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Updates user's attributes while authenticated.
 *
 * @param input - The UpdateUserAttributesInput object
 * @returns UpdateUserAttributesOutput
 * @throws - {@link UpdateUserAttributesException}
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ const updateUserAttributes = async (input)=>{
    const { userAttributes, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const clientMetadata = options?.clientMetadata;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const updateUserAttributesClient = (0, _createUpdateUserAttributesClientMjs.createUpdateUserAttributesClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { CodeDeliveryDetailsList } = await updateUserAttributesClient({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).UpdateUserAttributes)
    }, {
        AccessToken: tokens.accessToken.toString(),
        ClientMetadata: clientMetadata,
        UserAttributes: (0, _apiHelpersMjs.toAttributeType)(userAttributes)
    });
    return {
        ...getConfirmedAttributes(userAttributes),
        ...getUnConfirmedAttributes(CodeDeliveryDetailsList)
    };
};
function getConfirmedAttributes(attributes) {
    const confirmedAttributes = {};
    Object.keys(attributes)?.forEach((key)=>{
        confirmedAttributes[key] = {
            isUpdated: true,
            nextStep: {
                updateAttributeStep: 'DONE'
            }
        };
    });
    return confirmedAttributes;
}
function getUnConfirmedAttributes(codeDeliveryDetailsList) {
    const unConfirmedAttributes = {};
    codeDeliveryDetailsList?.forEach((codeDeliveryDetails)=>{
        const { AttributeName, DeliveryMedium, Destination } = codeDeliveryDetails;
        if (AttributeName) unConfirmedAttributes[AttributeName] = {
            isUpdated: false,
            nextStep: {
                updateAttributeStep: 'CONFIRM_ATTRIBUTE_WITH_CODE',
                codeDeliveryDetails: {
                    attributeName: AttributeName,
                    deliveryMedium: DeliveryMedium,
                    destination: Destination
                }
            }
        };
    });
    return unConfirmedAttributes;
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/types.mjs":"7EObU","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/apiHelpers.mjs":"g2DMU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateUserAttributesClient.mjs":"70Pbk","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"70Pbk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUpdateUserAttributesClient", ()=>createUpdateUserAttributesClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createUpdateUserAttributesClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('UpdateUserAttributes'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kPSqX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateUserAttribute", ()=>updateUserAttribute);
var _updateUserAttributesMjs = require("./updateUserAttributes.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Updates user's attribute while authenticated.
 *
 * @param input - The UpdateUserAttributeInput object
 * @returns UpdateUserAttributeOutput
 * @throws - {@link UpdateUserAttributesException}
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ const updateUserAttribute = async (input)=>{
    const { userAttribute: { attributeKey, value }, options } = input;
    const output = await (0, _updateUserAttributesMjs.updateUserAttributes)({
        userAttributes: {
            [attributeKey]: value
        },
        options
    });
    return Object.values(output)[0];
};

},{"./updateUserAttributes.mjs":"95Cy7","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"a90Nu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "confirmUserAttribute", ()=>confirmUserAttribute);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _assertValidationErrorMjs = require("../../../errors/utils/assertValidationError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createVerifyUserAttributeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Confirms a user attribute with the confirmation code.
 *
 * @param input -  The ConfirmUserAttributeInput object
 * @throws  -{@link AuthValidationErrorCode } -
 * Thrown when `confirmationCode` is not defined.
 * @throws  -{@link VerifyUserAttributeException } - Thrown due to an invalid confirmation code or attribute.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function confirmUserAttribute(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { confirmationCode, userAttributeKey } = input;
    (0, _assertValidationErrorMjs.assertValidationError)(!!confirmationCode, (0, _validationMjs.AuthValidationErrorCode).EmptyConfirmUserAttributeCode);
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const verifyUserAttribute = (0, _createVerifyUserAttributeClientMjs.createVerifyUserAttributeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await verifyUserAttribute({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ConfirmUserAttribute)
    }, {
        AccessToken: tokens.accessToken.toString(),
        AttributeName: userAttributeKey,
        Code: confirmationCode
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/types/validation.mjs":"8dvEu","../../../errors/utils/assertValidationError.mjs":"bJ8zE","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs":"kR6HA","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kR6HA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createVerifyUserAttributeClient", ()=>createVerifyUserAttributeClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createVerifyUserAttributeClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('VerifyUserAttribute'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"jWEhZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signInWithRedirect", ()=>signInWithRedirect);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _enableOAuthListenerMjs = require("../utils/oauth/enableOAuthListener.mjs");
var _modelsMjs = require("../types/models.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _openAuthSessionMjs = require("../../../utils/openAuthSession.mjs");
var _signInHelpersMjs = require("../utils/signInHelpers.mjs");
var _generateCodeVerifierMjs = require("../utils/oauth/generateCodeVerifier.mjs");
var _generateStateMjs = require("../utils/oauth/generateState.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _oAuthStoreMjs = require("../utils/oauth/oAuthStore.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _getRedirectUrlMjs = require("../utils/oauth/getRedirectUrl.mjs");
var _handleFailureMjs = require("../utils/oauth/handleFailure.mjs");
var _completeOAuthFlowMjs = require("../utils/oauth/completeOAuthFlow.mjs");
var _authMjs = require("../../../types/Auth.mjs");
var _createOAuthErrorMjs = require("../utils/oauth/createOAuthError.mjs");
var _cancelOAuthFlowMjs = require("../utils/oauth/cancelOAuthFlow.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Signs in a user with OAuth. Redirects the application to an Identity Provider.
 *
 * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI
 *
 * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.
 * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.
 */ async function signInWithRedirect(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    (0, _utils.assertOAuthConfig)(authConfig);
    (0, _oAuthStoreMjs.oAuthStore).setAuthConfig(authConfig);
    if (!input?.options?.prompt) await (0, _signInHelpersMjs.assertUserNotAuthenticated)();
    let provider = 'COGNITO'; // Default
    if (typeof input?.provider === 'string') provider = (0, _modelsMjs.cognitoHostedUIIdentityProviderMap)[input.provider];
    else if (input?.provider?.custom) provider = input.provider.custom;
    return oauthSignIn({
        oauthConfig: authConfig.loginWith.oauth,
        clientId: authConfig.userPoolClientId,
        provider,
        customState: input?.customState,
        preferPrivateSession: input?.options?.preferPrivateSession,
        options: {
            loginHint: input?.options?.loginHint,
            lang: input?.options?.lang,
            nonce: input?.options?.nonce,
            prompt: input?.options?.prompt
        },
        authSessionOpener: input?.options?.authSessionOpener
    });
}
const oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options, authSessionOpener })=>{
    const { domain, redirectSignIn, responseType, scopes } = oauthConfig;
    const { loginHint, lang, nonce, prompt } = options ?? {};
    const randomState = (0, _generateStateMjs.generateState)();
    const openAuthSession$1 = authSessionOpener || (0, _openAuthSessionMjs.openAuthSession);
    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito
    single-encodes/decodes url on first sign in and double-encodes/decodes url
    when user already signed in. Using encodeURIComponent, Base32, Base64 add
    characters % or = which on further encoding becomes unsafe. '=' create issue
    for parsing query params.
    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */ const state = customState ? `${randomState}-${(0, _utils.urlSafeEncode)(customState)}` : randomState;
    const { value, method, toCodeChallenge } = (0, _generateCodeVerifierMjs.generateCodeVerifier)(128);
    const redirectUri = (0, _getRedirectUrlMjs.getRedirectUrl)(oauthConfig.redirectSignIn);
    if ((0, _utils.isBrowser)()) (0, _oAuthStoreMjs.oAuthStore).storeOAuthInFlight(true);
    (0, _oAuthStoreMjs.oAuthStore).storeOAuthState(state);
    (0, _oAuthStoreMjs.oAuthStore).storePKCE(value);
    const params = new URLSearchParams([
        [
            'redirect_uri',
            redirectUri
        ],
        [
            'response_type',
            responseType
        ],
        [
            'client_id',
            clientId
        ],
        [
            'identity_provider',
            provider
        ],
        [
            'scope',
            scopes.join(' ')
        ]
    ]);
    loginHint && params.append('login_hint', loginHint);
    lang && params.append('lang', lang);
    nonce && params.append('nonce', nonce);
    prompt && params.append('prompt', prompt.toLowerCase());
    params.append('state', state);
    if (responseType === 'code') {
        params.append('code_challenge', toCodeChallenge());
        params.append('code_challenge_method', method);
    }
    const oAuthUrl = new URL('/oauth2/authorize', `https://${domain}/`);
    oAuthUrl.search = params.toString();
    // this will only take effect in the following scenarios:
    // 1. the user cancels the OAuth flow on web via back button, and
    // 2. when bfcache is enabled
    (0, _cancelOAuthFlowMjs.listenForOAuthFlowCancellation)((0, _oAuthStoreMjs.oAuthStore));
    // the following is effective only in react-native as openAuthSession resolves only in react-native
    const { type, error, url } = await openAuthSession$1(oAuthUrl.href, redirectSignIn, preferPrivateSession) ?? {};
    try {
        if (type === 'error') throw (0, _createOAuthErrorMjs.createOAuthError)(String(error));
        if (type === 'success' && url) await (0, _completeOAuthFlowMjs.completeOAuthFlow)({
            currentUrl: url,
            clientId,
            domain,
            redirectUri,
            responseType,
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignInWithRedirect),
            preferPrivateSession
        });
    } catch (err) {
        await (0, _handleFailureMjs.handleFailure)(err);
        // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native
        throw err;
    }
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/oauth/enableOAuthListener.mjs":"8hnrV","../types/models.mjs":"6Uf0i","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../../../utils/openAuthSession.mjs":"2uS8e","../utils/signInHelpers.mjs":"jkbXB","../utils/oauth/generateCodeVerifier.mjs":"iWd9M","../utils/oauth/generateState.mjs":"ipvuU","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/oauth/oAuthStore.mjs":"4J5M0","../tokenProvider/tokenProvider.mjs":"dIoqv","../utils/oauth/getRedirectUrl.mjs":"9iGDZ","../utils/oauth/handleFailure.mjs":"lxc6F","../utils/oauth/completeOAuthFlow.mjs":"01pZW","../../../types/Auth.mjs":"8x37f","../utils/oauth/createOAuthError.mjs":"8aTFs","../utils/oauth/cancelOAuthFlow.mjs":"8dj51","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8hnrV":[function(require,module,exports,__globalThis) {
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _attemptCompleteOAuthFlowMjs = require("./attemptCompleteOAuthFlow.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// attach the side effect for handling the completion of an inflight oauth flow
// this side effect works only on Web
(0, _utils.isBrowser)() && (()=>{
    // add the listener to the singleton for triggering
    (0, _core.Amplify)[0, _utils.ADD_OAUTH_LISTENER]((0, _attemptCompleteOAuthFlowMjs.attemptCompleteOAuthFlow));
})();

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","./attemptCompleteOAuthFlow.mjs":"hgOKI"}],"hgOKI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "attemptCompleteOAuthFlow", ()=>attemptCompleteOAuthFlow);
var _utils = require("@aws-amplify/core/internals/utils");
var _getAuthUserAgentValueMjs = require("../../../../utils/getAuthUserAgentValue.mjs");
var _oAuthStoreMjs = require("./oAuthStore.mjs");
var _completeOAuthFlowMjs = require("./completeOAuthFlow.mjs");
var _getRedirectUrlMjs = require("./getRedirectUrl.mjs");
var _handleFailureMjs = require("./handleFailure.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const attemptCompleteOAuthFlow = async (authConfig)=>{
    try {
        (0, _utils.assertTokenProviderConfig)(authConfig);
        (0, _utils.assertOAuthConfig)(authConfig);
        (0, _oAuthStoreMjs.oAuthStore).setAuthConfig(authConfig);
    } catch (_) {
        // no-op
        // This should not happen as Amplify singleton checks the oauth config key
        // unless the oauth config object doesn't contain required properties
        return;
    }
    // No inflight OAuth
    if (!await (0, _oAuthStoreMjs.oAuthStore).loadOAuthInFlight()) return;
    try {
        const currentUrl = window.location.href;
        const { loginWith, userPoolClientId } = authConfig;
        const { domain, redirectSignIn, responseType } = loginWith.oauth;
        const redirectUri = (0, _getRedirectUrlMjs.getRedirectUrl)(redirectSignIn);
        await (0, _completeOAuthFlowMjs.completeOAuthFlow)({
            currentUrl,
            clientId: userPoolClientId,
            domain,
            redirectUri,
            responseType,
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignInWithRedirect)
        });
    } catch (err) {
        await (0, _handleFailureMjs.handleFailure)(err);
    }
};

},{"@aws-amplify/core/internals/utils":"dRREz","../../../../utils/getAuthUserAgentValue.mjs":"lBlCr","./oAuthStore.mjs":"4J5M0","./completeOAuthFlow.mjs":"01pZW","./getRedirectUrl.mjs":"9iGDZ","./handleFailure.mjs":"lxc6F","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"01pZW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "completeOAuthFlow", ()=>completeOAuthFlow);
var _utils = require("@aws-amplify/core/internals/utils");
var _core = require("@aws-amplify/core");
var _cacheTokensMjs = require("../../tokenProvider/cacheTokens.mjs");
var _dispatchSignedInHubEventMjs = require("../dispatchSignedInHubEvent.mjs");
var _refreshAuthTokensMjs = require("../refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../../tokenProvider/errorHelpers.mjs");
var _oAuthStoreMjs = require("./oAuthStore.mjs");
var _inflightPromiseMjs = require("./inflightPromise.mjs");
var _tokenProviderMjs = require("../../tokenProvider/tokenProvider.mjs");
var _createOAuthErrorMjs = require("./createOAuthError.mjs");
var _validateStateMjs = require("./validateState.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const completeOAuthFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, responseType, domain, preferPrivateSession })=>{
    const urlParams = new (0, _utils.AmplifyUrl)(currentUrl);
    const error = urlParams.searchParams.get('error');
    const errorMessage = urlParams.searchParams.get('error_description');
    if (error) throw (0, _createOAuthErrorMjs.createOAuthError)(errorMessage ?? error);
    if (responseType === 'code') return handleCodeFlow({
        currentUrl,
        userAgentValue,
        clientId,
        redirectUri,
        domain,
        preferPrivateSession
    });
    return handleImplicitFlow({
        currentUrl,
        redirectUri,
        preferPrivateSession
    });
};
const handleCodeFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, domain, preferPrivateSession })=>{
    /* Convert URL into an object with parameters as keys
{ redirect_uri: 'http://localhost:3000/', response_type: 'code', ...} */ const url = new (0, _utils.AmplifyUrl)(currentUrl);
    const code = url.searchParams.get('code');
    const state = url.searchParams.get('state');
    // if `code` or `state` is not presented in the redirect url, most likely
    // that the end user cancelled the inflight oauth flow by:
    // 1. clicking the back button of browser
    // 2. closing the provider hosted UI page and coming back to the app
    if (!code || !state) throw (0, _createOAuthErrorMjs.createOAuthError)('User cancelled OAuth flow.');
    // may throw error is being caught in attemptCompleteOAuthFlow.ts
    const validatedState = await (0, _validateStateMjs.validateState)(state);
    const oAuthTokenEndpoint = 'https://' + domain + '/oauth2/token';
    // TODO(v6): check hub events
    // dispatchAuthEvent(
    // 	'codeFlow',
    // 	{},
    // 	`Retrieving tokens from ${oAuthTokenEndpoint}`
    // );
    const codeVerifier = await (0, _oAuthStoreMjs.oAuthStore).loadPKCE();
    const oAuthTokenBody = {
        grant_type: 'authorization_code',
        code,
        client_id: clientId,
        redirect_uri: redirectUri,
        ...codeVerifier ? {
            code_verifier: codeVerifier
        } : {}
    };
    const body = Object.entries(oAuthTokenBody).map(([k, v])=>`${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');
    const { access_token, refresh_token: refreshToken, id_token, error, error_message: errorMessage, token_type, expires_in } = await (await fetch(oAuthTokenEndpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            [(0, _utils.USER_AGENT_HEADER)]: userAgentValue
        },
        body
    })).json();
    if (error) // error is being caught in attemptCompleteOAuthFlow.ts
    throw (0, _createOAuthErrorMjs.createOAuthError)(errorMessage ?? error);
    const username = (access_token && (0, _core.decodeJWT)(access_token).payload.username) ?? 'username';
    await (0, _cacheTokensMjs.cacheCognitoTokens)({
        username,
        AccessToken: access_token,
        IdToken: id_token,
        RefreshToken: refreshToken
    });
    return completeFlow({
        redirectUri,
        state: validatedState,
        preferPrivateSession
    });
};
const handleImplicitFlow = async ({ currentUrl, redirectUri, preferPrivateSession })=>{
    // hash is `null` if `#` doesn't exist on URL
    const url = new (0, _utils.AmplifyUrl)(currentUrl);
    const { id_token, access_token, state, token_type, expires_in, error_description, error } = (url.hash ?? '#').substring(1) // Remove # from returned code
    .split('&').map((pairings)=>pairings.split('=')).reduce((accum, [k, v])=>({
            ...accum,
            [k]: v
        }), {
        id_token: undefined,
        access_token: undefined,
        state: undefined,
        token_type: undefined,
        expires_in: undefined,
        error_description: undefined,
        error: undefined
    });
    if (error) throw (0, _createOAuthErrorMjs.createOAuthError)(error_description ?? error);
    if (!access_token) // error is being caught in attemptCompleteOAuthFlow.ts
    throw (0, _createOAuthErrorMjs.createOAuthError)('No access token returned from OAuth flow.');
    const validatedState = await (0, _validateStateMjs.validateState)(state);
    const username = (access_token && (0, _core.decodeJWT)(access_token).payload.username) ?? 'username';
    await (0, _cacheTokensMjs.cacheCognitoTokens)({
        username,
        AccessToken: access_token,
        IdToken: id_token
    });
    return completeFlow({
        redirectUri,
        state: validatedState,
        preferPrivateSession
    });
};
const completeFlow = async ({ redirectUri, state, preferPrivateSession })=>{
    await (0, _tokenProviderMjs.tokenOrchestrator).setOAuthMetadata({
        oauthSignIn: true
    });
    await (0, _oAuthStoreMjs.oAuthStore).clearOAuthData();
    await (0, _oAuthStoreMjs.oAuthStore).storeOAuthSignIn(true, preferPrivateSession);
    // this should be called before any call that involves `fetchAuthSession`
    // e.g. `getCurrentUser()` below, so it allows every inflight async calls to
    //  `fetchAuthSession` can be resolved
    (0, _inflightPromiseMjs.resolveAndClearInflightPromises)();
    // clear history before sending out final Hub events
    clearHistory(redirectUri);
    if (isCustomState(state)) (0, _core.Hub).dispatch('auth', {
        event: 'customOAuthState',
        data: (0, _utils.urlSafeDecode)(getCustomState(state))
    }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
    (0, _core.Hub).dispatch('auth', {
        event: 'signInWithRedirect'
    }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
    await (0, _dispatchSignedInHubEventMjs.dispatchSignedInHubEvent)();
};
const isCustomState = (state)=>{
    return /-/.test(state);
};
const getCustomState = (state)=>{
    return state.split('-').splice(1).join('-');
};
const clearHistory = (redirectUri)=>{
    if (typeof window !== 'undefined' && typeof window.history !== 'undefined') window.history.replaceState(window.history.state, '', redirectUri);
};

},{"@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core":"hJ80y","../../tokenProvider/cacheTokens.mjs":"hPE3v","../dispatchSignedInHubEvent.mjs":"1QBvv","../refreshAuthTokens.mjs":"67ciz","../../tokenProvider/errorHelpers.mjs":"4wyMk","./oAuthStore.mjs":"4J5M0","./inflightPromise.mjs":"dn8pw","../../tokenProvider/tokenProvider.mjs":"dIoqv","./createOAuthError.mjs":"8aTFs","./validateState.mjs":"er5P9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8aTFs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createOAuthError", ()=>createOAuthError);
var _errorsMjs = require("../../../../Errors.mjs");
var _authErrorStringsMjs = require("../../../../common/AuthErrorStrings.mjs");
var _authErrorMjs = require("../../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createOAuthError = (message, recoverySuggestion)=>new (0, _authErrorMjs.AuthError)({
        message: message ?? 'An error has occurred during the oauth process.',
        name: (0, _authErrorStringsMjs.AuthErrorCodes).OAuthSignInError,
        recoverySuggestion: recoverySuggestion ?? (0, _errorsMjs.authErrorMessages).oauthSignInError.log
    });

},{"../../../../Errors.mjs":"aAB8b","../../../../common/AuthErrorStrings.mjs":"dhvVB","../../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aAB8b":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthError", ()=>AuthError);
parcelHelpers.export(exports, "NoUserPoolError", ()=>NoUserPoolError);
parcelHelpers.export(exports, "authErrorMessages", ()=>authErrorMessages);
var _core = require("@aws-amplify/core");
var _authErrorStringsMjs = require("./common/AuthErrorStrings.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// TODO: delete this module when the Auth class is removed.
const logger = new (0, _core.ConsoleLogger)('AuthError');
class AuthError extends Error {
    constructor(type){
        const { message, log } = authErrorMessages[type];
        super(message);
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = AuthError;
        Object.setPrototypeOf(this, AuthError.prototype);
        this.name = 'AuthError';
        this.log = log || message;
        logger.error(this.log);
    }
}
class NoUserPoolError extends AuthError {
    constructor(type){
        super(type);
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        this.constructor = NoUserPoolError;
        Object.setPrototypeOf(this, NoUserPoolError.prototype);
        this.name = 'NoUserPoolError';
    }
}
const authErrorMessages = {
    oauthSignInError: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).OAUTH_ERROR,
        log: 'Make sure Cognito Hosted UI has been configured correctly'
    },
    noConfig: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).DEFAULT_MSG,
        log: `
            Error: Amplify has not been configured correctly.
            This error is typically caused by one of the following scenarios:

            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point
                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information
            
            2. There might be multiple conflicting versions of amplify packages in your node_modules.
				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)
        `
    },
    missingAuthConfig: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).DEFAULT_MSG,
        log: `
            Error: Amplify has not been configured correctly. 
            The configuration object is missing required auth properties.
            This error is typically caused by one of the following scenarios:

            1. Did you run \`amplify push\` after adding auth via \`amplify add auth\`?
                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information

            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.
        `
    },
    emptyUsername: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).EMPTY_USERNAME
    },
    // TODO: should include a list of valid sign-in types
    invalidUsername: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).INVALID_USERNAME
    },
    emptyPassword: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).EMPTY_PASSWORD
    },
    emptyCode: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).EMPTY_CODE
    },
    signUpError: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).SIGN_UP_ERROR,
        log: 'The first parameter should either be non-null string or object'
    },
    noMFA: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).NO_MFA
    },
    invalidMFA: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).INVALID_MFA
    },
    emptyChallengeResponse: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).EMPTY_CHALLENGE
    },
    noUserSession: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).NO_USER_SESSION
    },
    deviceConfig: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).DEVICE_CONFIG
    },
    networkError: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).NETWORK_ERROR
    },
    autoSignInError: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).AUTOSIGNIN_ERROR
    },
    default: {
        message: (0, _authErrorStringsMjs.AuthErrorStrings).DEFAULT_MSG
    }
};

},{"@aws-amplify/core":"hJ80y","./common/AuthErrorStrings.mjs":"dhvVB","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"er5P9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flowCancelledMessage", ()=>flowCancelledMessage);
parcelHelpers.export(exports, "validateState", ()=>validateState);
parcelHelpers.export(exports, "validationFailedMessage", ()=>validationFailedMessage);
parcelHelpers.export(exports, "validationRecoverySuggestion", ()=>validationRecoverySuggestion);
var _authErrorMjs = require("../../../../errors/AuthError.mjs");
var _authMjs = require("../../../../types/Auth.mjs");
var _oAuthStoreMjs = require("./oAuthStore.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const flowCancelledMessage = '`signInWithRedirect` has been canceled.';
const validationFailedMessage = 'An error occurred while validating the state.';
const validationRecoverySuggestion = 'Try to initiate an OAuth flow from Amplify';
const validateState = async (state)=>{
    const savedState = await (0, _oAuthStoreMjs.oAuthStore).loadOAuthState();
    // This is because savedState only exists if the flow was initiated by Amplify
    const validatedState = state === savedState ? savedState : undefined;
    if (!validatedState) throw new (0, _authErrorMjs.AuthError)({
        name: (0, _authMjs.AuthErrorTypes).OAuthSignInError,
        message: state === null ? flowCancelledMessage : validationFailedMessage,
        recoverySuggestion: state === null ? undefined : validationRecoverySuggestion
    });
    return validatedState;
};

},{"../../../../errors/AuthError.mjs":"eST5l","../../../../types/Auth.mjs":"8x37f","./oAuthStore.mjs":"4J5M0","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8x37f":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthErrorTypes", ()=>AuthErrorTypes);
var AuthErrorTypes;
(function(AuthErrorTypes) {
    AuthErrorTypes["NoConfig"] = "noConfig";
    AuthErrorTypes["MissingAuthConfig"] = "missingAuthConfig";
    AuthErrorTypes["EmptyUsername"] = "emptyUsername";
    AuthErrorTypes["InvalidUsername"] = "invalidUsername";
    AuthErrorTypes["EmptyPassword"] = "emptyPassword";
    AuthErrorTypes["EmptyCode"] = "emptyCode";
    AuthErrorTypes["SignUpError"] = "signUpError";
    AuthErrorTypes["NoMFA"] = "noMFA";
    AuthErrorTypes["InvalidMFA"] = "invalidMFA";
    AuthErrorTypes["EmptyChallengeResponse"] = "emptyChallengeResponse";
    AuthErrorTypes["NoUserSession"] = "noUserSession";
    AuthErrorTypes["Default"] = "default";
    AuthErrorTypes["DeviceConfig"] = "deviceConfig";
    AuthErrorTypes["NetworkError"] = "networkError";
    AuthErrorTypes["AutoSignInError"] = "autoSignInError";
    AuthErrorTypes["OAuthSignInError"] = "oauthSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9iGDZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRedirectUrl", ()=>getRedirectUrl);
var _constantsMjs = require("../../../../errors/constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/** @internal */ function getRedirectUrl(redirects, preferredRedirectUrl) {
    if (preferredRedirectUrl) {
        const redirectUrl = redirects?.find((redirect)=>redirect === preferredRedirectUrl);
        if (!redirectUrl) throw 0, _constantsMjs.invalidPreferredRedirectUrlException;
        return redirectUrl;
    } else {
        const redirectUrlFromTheSameOrigin = redirects?.find(isSameOriginAndPathName) ?? redirects?.find(isTheSameDomain);
        const redirectUrlFromDifferentOrigin = redirects?.find(isHttps) ?? redirects?.find(isHttp);
        if (redirectUrlFromTheSameOrigin) return redirectUrlFromTheSameOrigin;
        else if (redirectUrlFromDifferentOrigin) throw 0, _constantsMjs.invalidOriginException;
        throw 0, _constantsMjs.invalidRedirectException;
    }
}
// origin + pathname => https://example.com/app
const isSameOriginAndPathName = (redirect)=>redirect.startsWith(String(window.location.origin + (window.location.pathname || '/')));
// domain => outlook.live.com, github.com
const isTheSameDomain = (redirect)=>redirect.includes(String(window.location.hostname));
const isHttp = (redirect)=>redirect.startsWith('http://');
const isHttps = (redirect)=>redirect.startsWith('https://');

},{"../../../../errors/constants.mjs":"8UaIu","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lxc6F":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleFailure", ()=>handleFailure);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _oAuthStoreMjs = require("./oAuthStore.mjs");
var _inflightPromiseMjs = require("./inflightPromise.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const handleFailure = async (error)=>{
    (0, _inflightPromiseMjs.resolveAndClearInflightPromises)();
    await (0, _oAuthStoreMjs.oAuthStore).clearOAuthInflightData();
    (0, _core.Hub).dispatch('auth', {
        event: 'signInWithRedirect_failure',
        data: {
            error
        }
    }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","./oAuthStore.mjs":"4J5M0","./inflightPromise.mjs":"dn8pw","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6Uf0i":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoHostedUIIdentityProviderMap", ()=>cognitoHostedUIIdentityProviderMap);
const cognitoHostedUIIdentityProviderMap = {
    Google: 'Google',
    Facebook: 'Facebook',
    Amazon: 'LoginWithAmazon',
    Apple: 'SignInWithApple'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2uS8e":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "openAuthSession", ()=>openAuthSession);
const openAuthSession = async (url)=>{
    if (!window?.location) return;
    // enforce HTTPS
    window.location.href = url.replace('http://', 'https://');
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"iWd9M":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateCodeVerifier", ()=>generateCodeVerifier);
var _sha256Js = require("@aws-crypto/sha256-js");
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const CODE_VERIFIER_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
/**
 *
 * @param length Desired length of the code verifier.
 *
 * **NOTE:** According to the [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)
 * A code verifier must be with a length >= 43 and <= 128.
 *
 * @returns An object that contains the generated `codeVerifier` and a method
 * `toCodeChallenge` to generate the code challenge from the `codeVerifier`
 * following the spec of [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).
 */ const generateCodeVerifier = (length)=>{
    const randomBytes = new Uint8Array(length);
    (0, _utils.getCrypto)().getRandomValues(randomBytes);
    let value = '';
    let codeChallenge;
    for (const byte of randomBytes)value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);
    return {
        value,
        method: 'S256',
        toCodeChallenge () {
            if (codeChallenge) return codeChallenge;
            codeChallenge = generateCodeChallenge(value);
            return codeChallenge;
        }
    };
};
function generateCodeChallenge(codeVerifier) {
    const awsCryptoHash = new (0, _sha256Js.Sha256)();
    awsCryptoHash.update(codeVerifier);
    const codeChallenge = removePaddingChar((0, _utils.base64Encoder).convert(awsCryptoHash.digestSync(), {
        urlSafe: true
    }));
    return codeChallenge;
}
function removePaddingChar(base64Encoded) {
    return base64Encoded.replace(/=/g, '');
}

},{"@aws-crypto/sha256-js":"7twCg","@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ipvuU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateState", ()=>generateState);
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const generateState = ()=>{
    return (0, _utils.generateRandomString)(32);
};

},{"@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8dj51":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listenForOAuthFlowCancellation", ()=>listenForOAuthFlowCancellation);
var _createOAuthErrorMjs = require("./createOAuthError.mjs");
var _handleFailureMjs = require("./handleFailure.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const listenForOAuthFlowCancellation = (store)=>{
    async function handleCancelOAuthFlow(event) {
        const isBfcache = event.persisted;
        if (isBfcache && await store.loadOAuthInFlight()) {
            const error = (0, _createOAuthErrorMjs.createOAuthError)('User cancelled OAuth flow.');
            await (0, _handleFailureMjs.handleFailure)(error);
        }
        window.removeEventListener('pageshow', handleCancelOAuthFlow);
    }
    window.addEventListener('pageshow', handleCancelOAuthFlow);
};

},{"./createOAuthError.mjs":"8aTFs","./handleFailure.mjs":"lxc6F","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4tHdN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchUserAttributes", ()=>fetchUserAttributes);
var _core = require("@aws-amplify/core");
var _fetchUserAttributesMjs = require("./internal/fetchUserAttributes.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Fetches the current user attributes while authenticated.
 *
 * @throws - {@link GetUserException} - Cognito service errors thrown when the service is not able to get the user.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ const fetchUserAttributes = ()=>{
    return (0, _fetchUserAttributesMjs.fetchUserAttributes)((0, _core.Amplify));
};

},{"@aws-amplify/core":"hJ80y","./internal/fetchUserAttributes.mjs":"gNzCd","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gNzCd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchUserAttributes", ()=>fetchUserAttributes);
var _utils = require("@aws-amplify/core/internals/utils");
var _regionParsersMjs = require("../../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../../utils/types.mjs");
var _apiHelpersMjs = require("../../utils/apiHelpers.mjs");
var _getAuthUserAgentValueMjs = require("../../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../../errors/types/validation.mjs");
var _errorsMjs = require("../../types/errors.mjs");
var _createGetUserClientMjs = require("../../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const fetchUserAttributes = async (amplify)=>{
    const authConfig = amplify.getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _utils.fetchAuthSession)(amplify, {
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const getUser = (0, _createGetUserClientMjs.createGetUserClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { UserAttributes } = await getUser({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).FetchUserAttributes)
    }, {
        AccessToken: tokens.accessToken.toString()
    });
    return (0, _apiHelpersMjs.toAuthUserAttribute)(UserAttributes);
};

},{"@aws-amplify/core/internals/utils":"dRREz","../../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../utils/types.mjs":"7EObU","../../utils/apiHelpers.mjs":"g2DMU","../../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../../common/AuthErrorStrings.mjs":"dhvVB","../../../../errors/types/validation.mjs":"8dvEu","../../types/errors.mjs":"2qQV1","../../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs":"71mRH","../../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lVRrz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signOut", ()=>signOut);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _signInWithRedirectStoreMjs = require("../utils/signInWithRedirectStore.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _handleOAuthSignOutMjs = require("../utils/oauth/handleOAuthSignOut.mjs");
var _constantsMjs = require("../../../errors/constants.mjs");
var _errorsMjs = require("../../../Errors.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _authMjs = require("../../../types/Auth.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs1 = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _createRevokeTokenClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs1 = require("../types/errors.mjs");
var _createGlobalSignOutClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _core.ConsoleLogger)('Auth');
/**
 * Signs a user out
 *
 * @param input - The SignOutInput object
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function signOut(input) {
    const cognitoConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(cognitoConfig);
    if (input?.global) await globalSignOut(cognitoConfig);
    else await clientSignOut(cognitoConfig);
    let hasOAuthConfig;
    try {
        (0, _utils.assertOAuthConfig)(cognitoConfig);
        hasOAuthConfig = true;
    } catch (err) {
        hasOAuthConfig = false;
    }
    if (hasOAuthConfig) {
        const oAuthStore = new (0, _signInWithRedirectStoreMjs.DefaultOAuthStore)((0, _core.defaultStorage));
        oAuthStore.setAuthConfig(cognitoConfig);
        const { type } = await (0, _handleOAuthSignOutMjs.handleOAuthSignOut)(cognitoConfig, oAuthStore, (0, _tokenProviderMjs.tokenOrchestrator), input?.oauth?.redirectUrl) ?? {};
        if (type === 'error') throw new (0, _authErrorMjs.AuthError)({
            name: (0, _constantsMjs.OAUTH_SIGNOUT_EXCEPTION),
            message: `An error occurred when attempting to log out from OAuth provider.`
        });
    } else {
        // complete sign out
        (0, _tokenProviderMjs.tokenOrchestrator).clearTokens();
        await (0, _core.clearCredentials)();
        (0, _core.Hub).dispatch('auth', {
            event: 'signedOut'
        }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
    }
}
async function clientSignOut(cognitoConfig) {
    try {
        const { userPoolEndpoint, userPoolId, userPoolClientId } = cognitoConfig;
        const authTokens = await (0, _tokenProviderMjs.tokenOrchestrator).getTokenStore().loadTokens();
        (0, _typesMjs.assertAuthTokensWithRefreshToken)(authTokens);
        if (isSessionRevocable(authTokens.accessToken)) {
            const revokeToken = (0, _createRevokeTokenClientMjs.createRevokeTokenClient)({
                endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                    endpointOverride: userPoolEndpoint
                })
            });
            await revokeToken({
                region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
                userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignOut)
            }, {
                ClientId: userPoolClientId,
                Token: authTokens.refreshToken
            });
        }
    } catch (err) {
        // this shouldn't throw
        logger.debug('Client signOut error caught but will proceed with token removal');
    }
}
async function globalSignOut(cognitoConfig) {
    try {
        const { userPoolEndpoint, userPoolId } = cognitoConfig;
        const authTokens = await (0, _tokenProviderMjs.tokenOrchestrator).getTokenStore().loadTokens();
        (0, _typesMjs.assertAuthTokens)(authTokens);
        const globalSignOutClient = (0, _createGlobalSignOutClientMjs.createGlobalSignOutClient)({
            endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
                endpointOverride: userPoolEndpoint
            })
        });
        await globalSignOutClient({
            region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
            userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SignOut)
        }, {
            AccessToken: authTokens.accessToken.toString()
        });
    } catch (err) {
        // it should not throw
        logger.debug('Global signOut error caught but will proceed with token removal');
    }
}
const isSessionRevocable = (token)=>!!token?.payload?.origin_jti;

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/refreshAuthTokens.mjs":"67ciz","../../../errors/AuthError.mjs":"eST5l","../tokenProvider/errorHelpers.mjs":"4wyMk","../utils/signInWithRedirectStore.mjs":"ehcwH","../tokenProvider/tokenProvider.mjs":"dIoqv","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","@aws-crypto/sha256-js":"7twCg","../utils/oauth/handleOAuthSignOut.mjs":"45zYS","../../../errors/constants.mjs":"8UaIu","../../../Errors.mjs":"aAB8b","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../types/Auth.mjs":"8x37f","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs":"gvkzl","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs":"dzfR1","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"45zYS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handleOAuthSignOut", ()=>handleOAuthSignOut);
var _completeOAuthSignOutMjs = require("./completeOAuthSignOut.mjs");
var _oAuthSignOutRedirectMjs = require("./oAuthSignOutRedirect.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator, redirectUrl)=>{
    const { isOAuthSignIn } = await store.loadOAuthSignIn();
    const oauthMetadata = await tokenOrchestrator.getOAuthMetadata();
    // Clear everything before attempting to visted logout endpoint since the current application
    // state could be wiped away on redirect
    await (0, _completeOAuthSignOutMjs.completeOAuthSignOut)(store);
    // The isOAuthSignIn flag is propagated by the oAuthToken store which manages oauth keys in local storage only.
    // These keys are used to determine if a user is in an inflight or signedIn oauth states.
    // However, this behavior represents an issue when 2 apps share the same set of tokens in Cookie storage because the app that didn't
    // start the OAuth will not have access to the oauth keys.
    // A heuristic solution is to add oauth metadata to the tokenOrchestrator which will have access to the underlying
    // storage mechanism that is used by Amplify.
    if (isOAuthSignIn || oauthMetadata?.oauthSignIn) // On web, this will always end up being a void action
    return (0, _oAuthSignOutRedirectMjs.oAuthSignOutRedirect)(cognitoConfig, false, redirectUrl);
};

},{"./completeOAuthSignOut.mjs":"cTiXB","./oAuthSignOutRedirect.mjs":"1Xapf","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cTiXB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "completeOAuthSignOut", ()=>completeOAuthSignOut);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _refreshAuthTokensMjs = require("../refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../../tokenProvider/errorHelpers.mjs");
var _typesMjs = require("../types.mjs");
var _tokenProviderMjs = require("../../tokenProvider/tokenProvider.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const completeOAuthSignOut = async (store)=>{
    await store.clearOAuthData();
    (0, _tokenProviderMjs.tokenOrchestrator).clearTokens();
    await (0, _core.clearCredentials)();
    (0, _core.Hub).dispatch('auth', {
        event: 'signedOut'
    }, 'Auth', (0, _utils.AMPLIFY_SYMBOL));
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../refreshAuthTokens.mjs":"67ciz","../../tokenProvider/errorHelpers.mjs":"4wyMk","../types.mjs":"7EObU","../../tokenProvider/tokenProvider.mjs":"dIoqv","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1Xapf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "oAuthSignOutRedirect", ()=>oAuthSignOutRedirect);
var _utils = require("@aws-amplify/core/internals/utils");
var _openAuthSessionMjs = require("../../../../utils/openAuthSession.mjs");
var _getRedirectUrlMjs = require("./getRedirectUrl.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const oAuthSignOutRedirect = async (authConfig, preferPrivateSession = false, redirectUrl)=>{
    (0, _utils.assertOAuthConfig)(authConfig);
    const { loginWith, userPoolClientId } = authConfig;
    const { domain, redirectSignOut } = loginWith.oauth;
    const signoutUri = (0, _getRedirectUrlMjs.getRedirectUrl)(redirectSignOut, redirectUrl);
    const oAuthLogoutEndpoint = `https://${domain}/logout?${Object.entries({
        client_id: userPoolClientId,
        logout_uri: encodeURIComponent(signoutUri)
    }).map(([k, v])=>`${k}=${v}`).join('&')}`;
    return (0, _openAuthSessionMjs.openAuthSession)(oAuthLogoutEndpoint);
};

},{"@aws-amplify/core/internals/utils":"dRREz","../../../../utils/openAuthSession.mjs":"2uS8e","./getRedirectUrl.mjs":"9iGDZ","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gvkzl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRevokeTokenClient", ()=>createRevokeTokenClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createRevokeTokenClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('RevokeToken'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"dzfR1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGlobalSignOutClient", ()=>createGlobalSignOutClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGlobalSignOutClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('GlobalSignOut'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4fCPZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sendUserAttributeVerificationCode", ()=>sendUserAttributeVerificationCode);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../utils/types.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createGetUserAttributeVerificationCodeClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Resends user's confirmation code when updating attributes while authenticated.
 *
 * @param input - The SendUserAttributeVerificationCodeInput object
 * @returns SendUserAttributeVerificationCodeOutput
 * @throws - {@link GetUserAttributeVerificationException}
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ const sendUserAttributeVerificationCode = async (input)=>{
    const { userAttributeKey, options } = input;
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    const clientMetadata = options?.clientMetadata;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const getUserAttributeVerificationCode = (0, _createGetUserAttributeVerificationCodeClientMjs.createGetUserAttributeVerificationCodeClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { CodeDeliveryDetails } = await getUserAttributeVerificationCode({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).SendUserAttributeVerificationCode)
    }, {
        AccessToken: tokens.accessToken.toString(),
        ClientMetadata: clientMetadata,
        AttributeName: userAttributeKey
    });
    const { DeliveryMedium, AttributeName, Destination } = {
        ...CodeDeliveryDetails
    };
    return {
        destination: Destination,
        deliveryMedium: DeliveryMedium,
        attributeName: AttributeName
    };
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/types.mjs":"7EObU","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs":"4zVkv","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4zVkv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createGetUserAttributeVerificationCodeClient", ()=>createGetUserAttributeVerificationCodeClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createGetUserAttributeVerificationCodeClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('GetUserAttributeVerificationCode'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4cllT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deleteUserAttributes", ()=>deleteUserAttributes);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createDeleteUserAttributesClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserAttributesClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Deletes user attributes.
 *
 * @param input -  The DeleteUserAttributesInput object
 * @throws  -{@link DeleteUserAttributesException } - Thrown due to invalid attribute.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function deleteUserAttributes(input) {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userAttributeKeys } = input;
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)({
        forceRefresh: false
    });
    (0, _typesMjs.assertAuthTokens)(tokens);
    const deleteUserAttributesClient = (0, _createDeleteUserAttributesClientMjs.createDeleteUserAttributesClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await deleteUserAttributesClient({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).DeleteUserAttributes)
    }, {
        AccessToken: tokens.accessToken.toString(),
        UserAttributeNames: userAttributeKeys
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserAttributesClient.mjs":"bBYFg","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bBYFg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDeleteUserAttributesClient", ()=>createDeleteUserAttributesClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createDeleteUserAttributesClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('DeleteUserAttributes'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3j1FT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deleteUser", ()=>deleteUser);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createDeleteUserClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
var _signOutMjs = require("./signOut.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Deletes a user from the user pool while authenticated.
 *
 * @throws - {@link DeleteUserException}
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function deleteUser() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const serviceDeleteUser = (0, _createDeleteUserClientMjs.createDeleteUserClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await serviceDeleteUser({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).DeleteUser)
    }, {
        AccessToken: tokens.accessToken.toString()
    });
    await (0, _tokenProviderMjs.tokenOrchestrator).clearDeviceMetadata();
    await (0, _signOutMjs.signOut)();
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../tokenProvider/tokenProvider.mjs":"dIoqv","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteUserClient.mjs":"gw2v9","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","./signOut.mjs":"lVRrz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"gw2v9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDeleteUserClient", ()=>createDeleteUserClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _createEmptyResponseDeserializerMjs = require("./shared/serde/createEmptyResponseDeserializer.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createDeleteUserClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('DeleteUser'), (0, _createEmptyResponseDeserializerMjs.createEmptyResponseDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./shared/serde/createEmptyResponseDeserializer.mjs":"klipa","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"klipa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createEmptyResponseDeserializer", ()=>createEmptyResponseDeserializer);
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _assertServiceErrorMjs = require("../../../../../../errors/utils/assertServiceError.mjs");
var _authErrorMjs = require("../../../../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createEmptyResponseDeserializer = ()=>async (response)=>{
        if (response.statusCode >= 300) {
            const error = await (0, _awsClientUtils.parseJsonError)(response);
            (0, _assertServiceErrorMjs.assertServiceError)(error);
            throw new (0, _authErrorMjs.AuthError)({
                name: error.name,
                message: error.message
            });
        } else return undefined;
    };

},{"@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lni5S":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rememberDevice", ()=>rememberDevice);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../utils/types.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createUpdateDeviceStatusClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateDeviceStatusClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Marks device as remembered while authenticated.
 *
 * @throws - {@link UpdateDeviceStatusException} - Cognito service errors thrown when
 * setting device status to remembered using an invalid device key.
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function rememberDevice() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const deviceMetadata = await (0, _tokenProviderMjs.tokenOrchestrator)?.getDeviceMetadata();
    (0, _typesMjs.assertDeviceMetadata)(deviceMetadata);
    const updateDeviceStatus = (0, _createUpdateDeviceStatusClientMjs.createUpdateDeviceStatusClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await updateDeviceStatus({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).RememberDevice)
    }, {
        AccessToken: tokens.accessToken.toString(),
        DeviceKey: deviceMetadata.deviceKey,
        DeviceRememberedStatus: 'remembered'
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/types.mjs":"7EObU","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../tokenProvider/tokenProvider.mjs":"dIoqv","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createUpdateDeviceStatusClient.mjs":"aJZfS","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"aJZfS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createUpdateDeviceStatusClient", ()=>createUpdateDeviceStatusClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createUpdateDeviceStatusClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('UpdateDeviceStatus'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cn4qx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "forgetDevice", ()=>forgetDevice);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../utils/types.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _refreshAuthTokensMjs = require("../utils/refreshAuthTokens.mjs");
var _errorHelpersMjs = require("../tokenProvider/errorHelpers.mjs");
var _tokenProviderMjs = require("../tokenProvider/tokenProvider.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createForgetDeviceClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgetDeviceClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Forget a remembered device while authenticated.
 *
 * @param input - The ForgetDeviceInput object.
 * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when
 * forgetting device with invalid device key
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function forgetDevice(input) {
    const { device: { id: externalDeviceKey } = {
        id: undefined
    } } = input ?? {};
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const deviceMetadata = await (0, _tokenProviderMjs.tokenOrchestrator).getDeviceMetadata();
    const currentDeviceKey = deviceMetadata?.deviceKey;
    if (!externalDeviceKey) (0, _typesMjs.assertDeviceMetadata)(deviceMetadata);
    const serviceForgetDevice = (0, _createForgetDeviceClientMjs.createForgetDeviceClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await serviceForgetDevice({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ForgetDevice)
    }, {
        AccessToken: tokens.accessToken.toString(),
        DeviceKey: externalDeviceKey ?? currentDeviceKey
    });
    if (!externalDeviceKey || externalDeviceKey === currentDeviceKey) await (0, _tokenProviderMjs.tokenOrchestrator).clearDeviceMetadata();
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/types.mjs":"7EObU","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/refreshAuthTokens.mjs":"67ciz","../tokenProvider/errorHelpers.mjs":"4wyMk","../tokenProvider/tokenProvider.mjs":"dIoqv","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createForgetDeviceClient.mjs":"96QOs","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"96QOs":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createForgetDeviceClient", ()=>createForgetDeviceClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _createEmptyResponseDeserializerMjs = require("./shared/serde/createEmptyResponseDeserializer.mjs");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createForgetDeviceClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ForgetDevice'), (0, _createEmptyResponseDeserializerMjs.createEmptyResponseDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./shared/serde/createEmptyResponseDeserializer.mjs":"klipa","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"12PKW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fetchDevices", ()=>fetchDevices);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../utils/types.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../../errors/types/validation.mjs");
var _errorsMjs = require("../types/errors.mjs");
var _createListDevicesClientMjs = require("../../../foundation/factories/serviceClients/cognitoIdentityProvider/createListDevicesClient.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../factories/createCognitoUserPoolEndpointResolver.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Cognito Documentation for max device
// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax
const MAX_DEVICES = 60;
/**
 * Fetches devices that have been remembered using {@link rememberDevice}
 * for the currently authenticated user.
 *
 * @returns FetchDevicesOutput
 * @throws {@link ListDevicesException}
 * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.
 */ async function fetchDevices() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const listDevices = (0, _createListDevicesClientMjs.createListDevicesClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const response = await listDevices({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).FetchDevices)
    }, {
        AccessToken: tokens.accessToken.toString(),
        Limit: MAX_DEVICES
    });
    return parseDevicesResponse(response.Devices ?? []);
}
const parseDevicesResponse = async (devices)=>{
    return devices.map(({ DeviceKey: id = '', DeviceAttributes = [], DeviceCreateDate, DeviceLastModifiedDate, DeviceLastAuthenticatedDate })=>{
        let deviceName;
        const attributes = DeviceAttributes.reduce((attrs, { Name, Value })=>{
            if (Name && Value) {
                if (Name === 'device_name') deviceName = Value;
                attrs[Name] = Value;
            }
            return attrs;
        }, {});
        const result = {
            id,
            name: deviceName,
            attributes,
            createDate: DeviceCreateDate ? new Date(DeviceCreateDate * 1000) : undefined,
            lastModifiedDate: DeviceLastModifiedDate ? new Date(DeviceLastModifiedDate * 1000) : undefined,
            lastAuthenticatedDate: DeviceLastAuthenticatedDate ? new Date(DeviceLastAuthenticatedDate * 1000) : undefined
        };
        return result;
    });
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../utils/types.mjs":"7EObU","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../../common/AuthErrorStrings.mjs":"dhvVB","../../../errors/types/validation.mjs":"8dvEu","../types/errors.mjs":"2qQV1","../../../foundation/factories/serviceClients/cognitoIdentityProvider/createListDevicesClient.mjs":"h07NN","../factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"h07NN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createListDevicesClient", ()=>createListDevicesClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createListDevicesClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ListDevices'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9oJSi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoAWSCredentialsAndIdentityIdProvider", ()=>(0, _credentialsProviderMjs.CognitoAWSCredentialsAndIdentityIdProvider));
parcelHelpers.export(exports, "DefaultIdentityIdStore", ()=>(0, _identityIdStoreMjs.DefaultIdentityIdStore));
parcelHelpers.export(exports, "cognitoCredentialsProvider", ()=>cognitoCredentialsProvider);
var _core = require("@aws-amplify/core");
var _identityIdStoreMjs = require("./IdentityIdStore.mjs");
var _credentialsProviderMjs = require("./credentialsProvider.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Cognito specific implmentation of the CredentialsProvider interface
 * that manages setting and getting of AWS Credentials.
 *
 * @throws configuration expections: `InvalidIdentityPoolIdException`
 *  - Auth errors that may arise from misconfiguration.
 * @throws service expections: {@link GetCredentialsForIdentityException}, {@link GetIdException}
 *
 */ const cognitoCredentialsProvider = new (0, _credentialsProviderMjs.CognitoAWSCredentialsAndIdentityIdProvider)(new (0, _identityIdStoreMjs.DefaultIdentityIdStore)((0, _core.defaultStorage)));

},{"@aws-amplify/core":"hJ80y","./IdentityIdStore.mjs":"8UUhB","./credentialsProvider.mjs":"4h4LE","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8UUhB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultIdentityIdStore", ()=>DefaultIdentityIdStore);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _tokenStoreMjs = require("../tokenProvider/TokenStore.mjs");
var _typesMjs = require("./types.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _core.ConsoleLogger)('DefaultIdentityIdStore');
class DefaultIdentityIdStore {
    setAuthConfig(authConfigParam) {
        (0, _utils.assertIdentityPoolIdConfig)(authConfigParam.Cognito);
        this.authConfig = authConfigParam;
        this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);
    }
    constructor(keyValueStorage){
        this._authKeys = {};
        this._hasGuestIdentityId = false;
        this.keyValueStorage = keyValueStorage;
    }
    async loadIdentityId() {
        (0, _utils.assertIdentityPoolIdConfig)(this.authConfig?.Cognito);
        try {
            if (this._primaryIdentityId) return {
                id: this._primaryIdentityId,
                type: 'primary'
            };
            else {
                const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);
                if (storedIdentityId) {
                    this._hasGuestIdentityId = true;
                    return {
                        id: storedIdentityId,
                        type: 'guest'
                    };
                }
                return null;
            }
        } catch (err) {
            logger.log('Error getting stored IdentityId.', err);
            return null;
        }
    }
    async storeIdentityId(identity) {
        (0, _utils.assertIdentityPoolIdConfig)(this.authConfig?.Cognito);
        if (identity.type === 'guest') {
            this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);
            // Clear in-memory storage of primary identityId
            this._primaryIdentityId = undefined;
            this._hasGuestIdentityId = true;
        } else {
            this._primaryIdentityId = identity.id;
            // Clear locally stored guest id
            if (this._hasGuestIdentityId) {
                this.keyValueStorage.removeItem(this._authKeys.identityId);
                this._hasGuestIdentityId = false;
            }
        }
    }
    async clearIdentityId() {
        this._primaryIdentityId = undefined;
        await this.keyValueStorage.removeItem(this._authKeys.identityId);
    }
}
const createKeysForAuthStorage = (provider, identifier)=>{
    return (0, _tokenStoreMjs.getAuthStorageKeys)((0, _typesMjs.IdentityIdStorageKeys))(`com.amplify.${provider}`, identifier);
};

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../tokenProvider/TokenStore.mjs":"jgGDi","./types.mjs":"9NyXr","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9NyXr":[function(require,module,exports,__globalThis) {
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IdentityIdStorageKeys", ()=>IdentityIdStorageKeys);
const IdentityIdStorageKeys = {
    identityId: 'identityId'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"4h4LE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoAWSCredentialsAndIdentityIdProvider", ()=>CognitoAWSCredentialsAndIdentityIdProvider);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _typesMjs = require("../utils/types.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _createCognitoIdentityPoolEndpointResolverMjs = require("../factories/createCognitoIdentityPoolEndpointResolver.mjs");
var _identityIdProviderMjs = require("./IdentityIdProvider.mjs");
var _utilsMjs = require("./utils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const logger = new (0, _core.ConsoleLogger)('CognitoCredentialsProvider');
const CREDENTIALS_TTL = 3000000; // 50 min, can be modified on config if required in the future
class CognitoAWSCredentialsAndIdentityIdProvider {
    constructor(identityIdStore){
        this._nextCredentialsRefresh = 0;
        this._identityIdStore = identityIdStore;
    }
    async clearCredentialsAndIdentityId() {
        logger.debug('Clearing out credentials and identityId');
        this._credentialsAndIdentityId = undefined;
        await this._identityIdStore.clearIdentityId();
    }
    async clearCredentials() {
        logger.debug('Clearing out in-memory credentials');
        this._credentialsAndIdentityId = undefined;
    }
    async getCredentialsAndIdentityId(getCredentialsOptions) {
        const isAuthenticated = getCredentialsOptions.authenticated;
        const { tokens } = getCredentialsOptions;
        const { authConfig } = getCredentialsOptions;
        try {
            (0, _utils.assertIdentityPoolIdConfig)(authConfig?.Cognito);
        } catch  {
            // No identity pool configured, skipping
            return;
        }
        if (!isAuthenticated && !authConfig.Cognito.allowGuestAccess) // TODO(V6): return partial result like Native platforms
        return;
        const { forceRefresh } = getCredentialsOptions;
        const tokenHasChanged = this.hasTokenChanged(tokens);
        const identityId = await (0, _identityIdProviderMjs.cognitoIdentityIdProvider)({
            tokens,
            authConfig: authConfig.Cognito,
            identityIdStore: this._identityIdStore
        });
        // Clear cached credentials when forceRefresh is true OR the cache token has changed
        if (forceRefresh || tokenHasChanged) this.clearCredentials();
        if (!isAuthenticated) return this.getGuestCredentials(identityId, authConfig.Cognito);
        else {
            (0, _typesMjs.assertIdTokenInAuthTokens)(tokens);
            return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);
        }
    }
    async getGuestCredentials(identityId, authConfig) {
        // Return existing in-memory cached credentials only if it exists, is not past it's lifetime and is unauthenticated credentials
        if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === false) {
            logger.info('returning stored credentials as they neither past TTL nor expired.');
            return this._credentialsAndIdentityId;
        }
        // Clear to discard if any authenticated credentials are set and start with a clean slate
        this.clearCredentials();
        const region = (0, _regionParsersMjs.getRegionFromIdentityPoolId)(authConfig.identityPoolId);
        const getCredentialsForIdentity = (0, _core.createGetCredentialsForIdentityClient)({
            endpointResolver: (0, _createCognitoIdentityPoolEndpointResolverMjs.createCognitoIdentityPoolEndpointResolver)({
                endpointOverride: authConfig.identityPoolEndpoint
            })
        });
        // use identityId to obtain guest credentials
        // save credentials in-memory
        // No logins params should be passed for guest creds:
        // https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html
        let clientResult;
        try {
            clientResult = await getCredentialsForIdentity({
                region
            }, {
                IdentityId: identityId
            });
        } catch (e) {
            (0, _assertServiceErrorMjs.assertServiceError)(e);
            throw new (0, _authErrorMjs.AuthError)(e);
        }
        if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {
            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
            const res = {
                credentials: {
                    accessKeyId: clientResult.Credentials.AccessKeyId,
                    secretAccessKey: clientResult.Credentials.SecretKey,
                    sessionToken: clientResult.Credentials.SessionToken,
                    expiration: clientResult.Credentials.Expiration
                },
                identityId
            };
            if (clientResult.IdentityId) {
                res.identityId = clientResult.IdentityId;
                this._identityIdStore.storeIdentityId({
                    id: clientResult.IdentityId,
                    type: 'guest'
                });
            }
            this._credentialsAndIdentityId = {
                ...res,
                isAuthenticatedCreds: false
            };
            return res;
        } else throw new (0, _authErrorMjs.AuthError)({
            name: 'CredentialsNotFoundException',
            message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
        });
    }
    async credsForOIDCTokens(authConfig, authTokens, identityId) {
        if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === true) {
            logger.debug('returning stored credentials as they neither past TTL nor expired.');
            return this._credentialsAndIdentityId;
        }
        // Clear to discard if any unauthenticated credentials are set and start with a clean slate
        this.clearCredentials();
        const logins = authTokens.idToken ? (0, _utilsMjs.formLoginsMap)(authTokens.idToken.toString()) : {};
        const region = (0, _regionParsersMjs.getRegionFromIdentityPoolId)(authConfig.identityPoolId);
        const getCredentialsForIdentity = (0, _core.createGetCredentialsForIdentityClient)({
            endpointResolver: (0, _createCognitoIdentityPoolEndpointResolverMjs.createCognitoIdentityPoolEndpointResolver)({
                endpointOverride: authConfig.identityPoolEndpoint
            })
        });
        let clientResult;
        try {
            clientResult = await getCredentialsForIdentity({
                region
            }, {
                IdentityId: identityId,
                Logins: logins
            });
        } catch (e) {
            (0, _assertServiceErrorMjs.assertServiceError)(e);
            throw new (0, _authErrorMjs.AuthError)(e);
        }
        if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {
            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
            const res = {
                credentials: {
                    accessKeyId: clientResult.Credentials.AccessKeyId,
                    secretAccessKey: clientResult.Credentials.SecretKey,
                    sessionToken: clientResult.Credentials.SessionToken,
                    expiration: clientResult.Credentials.Expiration
                },
                identityId
            };
            if (clientResult.IdentityId) {
                res.identityId = clientResult.IdentityId;
                // note: the following call removes guest identityId from the persistent store (localStorage)
                this._identityIdStore.storeIdentityId({
                    id: clientResult.IdentityId,
                    type: 'primary'
                });
            }
            // Store the credentials in-memory along with the expiration
            this._credentialsAndIdentityId = {
                ...res,
                isAuthenticatedCreds: true,
                associatedIdToken: authTokens.idToken?.toString()
            };
            return res;
        } else throw new (0, _authErrorMjs.AuthError)({
            name: 'CredentialsException',
            message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
        });
    }
    isPastTTL() {
        return this._nextCredentialsRefresh === undefined ? true : this._nextCredentialsRefresh <= Date.now();
    }
    hasTokenChanged(tokens) {
        return !!tokens && !!this._credentialsAndIdentityId?.associatedIdToken && tokens.idToken?.toString() !== this._credentialsAndIdentityId.associatedIdToken;
    }
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../../errors/AuthError.mjs":"eST5l","../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../foundation/parsers/regionParsers.mjs":"1DoVs","../utils/types.mjs":"7EObU","@aws-amplify/core/internals/aws-client-utils":"5U21t","../factories/createCognitoIdentityPoolEndpointResolver.mjs":"8Zefk","./IdentityIdProvider.mjs":"1CyvQ","./utils.mjs":"3T1np","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"8Zefk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCognitoIdentityPoolEndpointResolver", ()=>createCognitoIdentityPoolEndpointResolver);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createCognitoIdentityPoolEndpointResolver = ({ endpointOverride })=>(input)=>{
        if (endpointOverride) return {
            url: new (0, _utils.AmplifyUrl)(endpointOverride)
        };
        return (0, _core.cognitoIdentityPoolEndpointResolver)(input);
    };

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"1CyvQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cognitoIdentityIdProvider", ()=>cognitoIdentityIdProvider);
var _core = require("@aws-amplify/core");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
var _assertServiceErrorMjs = require("../../../errors/utils/assertServiceError.mjs");
var _regionParsersMjs = require("../../../foundation/parsers/regionParsers.mjs");
var _utils = require("@aws-amplify/core/internals/utils");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _createCognitoIdentityPoolEndpointResolverMjs = require("../factories/createCognitoIdentityPoolEndpointResolver.mjs");
var _utilsMjs = require("./utils.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Provides a Cognito identityId
 *
 * @param tokens - The AuthTokens received after SignIn
 * @returns string
 * @throws configuration exceptions: `InvalidIdentityPoolIdException`
 *  - Auth errors that may arise from misconfiguration.
 * @throws service exceptions: {@link GetIdException }
 */ async function cognitoIdentityIdProvider({ tokens, authConfig, identityIdStore }) {
    identityIdStore.setAuthConfig({
        Cognito: authConfig
    });
    // will return null only if there is no identityId cached or if there is an error retrieving it
    const identityId = await identityIdStore.loadIdentityId();
    if (identityId) return identityId.id;
    const logins = tokens?.idToken ? (0, _utilsMjs.formLoginsMap)(tokens.idToken.toString()) : {};
    const generatedIdentityId = await generateIdentityId(logins, authConfig);
    // Store generated identityId
    identityIdStore.storeIdentityId({
        id: generatedIdentityId,
        type: tokens ? 'primary' : 'guest'
    });
    return generatedIdentityId;
}
async function generateIdentityId(logins, authConfig) {
    const identityPoolId = authConfig?.identityPoolId;
    const region = (0, _regionParsersMjs.getRegionFromIdentityPoolId)(identityPoolId);
    const getId = (0, _core.createGetIdClient)({
        endpointResolver: (0, _createCognitoIdentityPoolEndpointResolverMjs.createCognitoIdentityPoolEndpointResolver)({
            endpointOverride: authConfig.identityPoolEndpoint
        })
    });
    // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API
    let idResult;
    // for a first-time user, this will return a brand new identity
    // for a returning user, this will retrieve the previous identity assocaited with the logins
    try {
        idResult = (await getId({
            region
        }, {
            IdentityPoolId: identityPoolId,
            Logins: logins
        })).IdentityId;
    } catch (e) {
        (0, _assertServiceErrorMjs.assertServiceError)(e);
        throw new (0, _authErrorMjs.AuthError)(e);
    }
    if (!idResult) throw new (0, _authErrorMjs.AuthError)({
        name: 'GetIdResponseException',
        message: 'Received undefined response from getId operation',
        recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'
    });
    return idResult;
}

},{"@aws-amplify/core":"hJ80y","../../../errors/AuthError.mjs":"eST5l","../../../errors/utils/assertServiceError.mjs":"fOoR8","../../../foundation/parsers/regionParsers.mjs":"1DoVs","@aws-amplify/core/internals/utils":"dRREz","@aws-amplify/core/internals/aws-client-utils":"5U21t","../factories/createCognitoIdentityPoolEndpointResolver.mjs":"8Zefk","./utils.mjs":"3T1np","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3T1np":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formLoginsMap", ()=>formLoginsMap);
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("../../../errors/AuthError.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
function formLoginsMap(idToken) {
    const issuer = (0, _utils.decodeJWT)(idToken).payload.iss;
    const res = {};
    if (!issuer) throw new (0, _authErrorMjs.AuthError)({
        name: 'InvalidIdTokenException',
        message: 'Invalid Idtoken.'
    });
    const domainName = issuer.replace(/(^\w+:|^)\/\//, '');
    res[domainName] = idToken;
    return res;
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../../errors/AuthError.mjs":"eST5l","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bLlRO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _auth = require("@aws-amplify/auth");
parcelHelpers.exportAll(_auth, exports);

},{"@aws-amplify/auth":"2Ctc9","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"2Ctc9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "signUp", ()=>(0, _signUpMjs.signUp));
parcelHelpers.export(exports, "resetPassword", ()=>(0, _resetPasswordMjs.resetPassword));
parcelHelpers.export(exports, "confirmResetPassword", ()=>(0, _confirmResetPasswordMjs.confirmResetPassword));
parcelHelpers.export(exports, "signIn", ()=>(0, _signInMjs.signIn));
parcelHelpers.export(exports, "resendSignUpCode", ()=>(0, _resendSignUpCodeMjs.resendSignUpCode));
parcelHelpers.export(exports, "confirmSignUp", ()=>(0, _confirmSignUpMjs.confirmSignUp));
parcelHelpers.export(exports, "confirmSignIn", ()=>(0, _confirmSignInMjs.confirmSignIn));
parcelHelpers.export(exports, "updateMFAPreference", ()=>(0, _updateMFAPreferenceMjs.updateMFAPreference));
parcelHelpers.export(exports, "fetchMFAPreference", ()=>(0, _fetchMFAPreferenceMjs.fetchMFAPreference));
parcelHelpers.export(exports, "verifyTOTPSetup", ()=>(0, _verifyTOTPSetupMjs.verifyTOTPSetup));
parcelHelpers.export(exports, "updatePassword", ()=>(0, _updatePasswordMjs.updatePassword));
parcelHelpers.export(exports, "setUpTOTP", ()=>(0, _setUpTOTPMjs.setUpTOTP));
parcelHelpers.export(exports, "updateUserAttributes", ()=>(0, _updateUserAttributesMjs.updateUserAttributes));
parcelHelpers.export(exports, "updateUserAttribute", ()=>(0, _updateUserAttributeMjs.updateUserAttribute));
parcelHelpers.export(exports, "getCurrentUser", ()=>(0, _getCurrentUserMjs.getCurrentUser));
parcelHelpers.export(exports, "confirmUserAttribute", ()=>(0, _confirmUserAttributeMjs.confirmUserAttribute));
parcelHelpers.export(exports, "signInWithRedirect", ()=>(0, _signInWithRedirectMjs.signInWithRedirect));
parcelHelpers.export(exports, "fetchUserAttributes", ()=>(0, _fetchUserAttributesMjs.fetchUserAttributes));
parcelHelpers.export(exports, "signOut", ()=>(0, _signOutMjs.signOut));
parcelHelpers.export(exports, "sendUserAttributeVerificationCode", ()=>(0, _sendUserAttributeVerificationCodeMjs.sendUserAttributeVerificationCode));
parcelHelpers.export(exports, "deleteUserAttributes", ()=>(0, _deleteUserAttributesMjs.deleteUserAttributes));
parcelHelpers.export(exports, "deleteUser", ()=>(0, _deleteUserMjs.deleteUser));
parcelHelpers.export(exports, "rememberDevice", ()=>(0, _rememberDeviceMjs.rememberDevice));
parcelHelpers.export(exports, "forgetDevice", ()=>(0, _forgetDeviceMjs.forgetDevice));
parcelHelpers.export(exports, "fetchDevices", ()=>(0, _fetchDevicesMjs.fetchDevices));
parcelHelpers.export(exports, "autoSignIn", ()=>(0, _autoSignInMjs.autoSignIn));
parcelHelpers.export(exports, "decodeJWT", ()=>(0, _core.decodeJWT));
parcelHelpers.export(exports, "fetchAuthSession", ()=>(0, _core.fetchAuthSession));
parcelHelpers.export(exports, "AuthError", ()=>(0, _authErrorMjs.AuthError));
parcelHelpers.export(exports, "associateWebAuthnCredential", ()=>(0, _associateWebAuthnCredentialMjs.associateWebAuthnCredential));
parcelHelpers.export(exports, "listWebAuthnCredentials", ()=>(0, _listWebAuthnCredentialsMjs.listWebAuthnCredentials));
parcelHelpers.export(exports, "deleteWebAuthnCredential", ()=>(0, _deleteWebAuthnCredentialMjs.deleteWebAuthnCredential));
var _signUpMjs = require("./providers/cognito/apis/signUp.mjs");
var _resetPasswordMjs = require("./providers/cognito/apis/resetPassword.mjs");
var _confirmResetPasswordMjs = require("./providers/cognito/apis/confirmResetPassword.mjs");
var _signInMjs = require("./providers/cognito/apis/signIn.mjs");
var _resendSignUpCodeMjs = require("./providers/cognito/apis/resendSignUpCode.mjs");
var _confirmSignUpMjs = require("./providers/cognito/apis/confirmSignUp.mjs");
var _confirmSignInMjs = require("./providers/cognito/apis/confirmSignIn.mjs");
var _updateMFAPreferenceMjs = require("./providers/cognito/apis/updateMFAPreference.mjs");
var _fetchMFAPreferenceMjs = require("./providers/cognito/apis/fetchMFAPreference.mjs");
var _verifyTOTPSetupMjs = require("./providers/cognito/apis/verifyTOTPSetup.mjs");
var _updatePasswordMjs = require("./providers/cognito/apis/updatePassword.mjs");
var _setUpTOTPMjs = require("./providers/cognito/apis/setUpTOTP.mjs");
var _updateUserAttributesMjs = require("./providers/cognito/apis/updateUserAttributes.mjs");
var _updateUserAttributeMjs = require("./providers/cognito/apis/updateUserAttribute.mjs");
var _getCurrentUserMjs = require("./providers/cognito/apis/getCurrentUser.mjs");
var _confirmUserAttributeMjs = require("./providers/cognito/apis/confirmUserAttribute.mjs");
var _signInWithRedirectMjs = require("./providers/cognito/apis/signInWithRedirect.mjs");
var _fetchUserAttributesMjs = require("./providers/cognito/apis/fetchUserAttributes.mjs");
var _signOutMjs = require("./providers/cognito/apis/signOut.mjs");
var _sendUserAttributeVerificationCodeMjs = require("./providers/cognito/apis/sendUserAttributeVerificationCode.mjs");
var _deleteUserAttributesMjs = require("./providers/cognito/apis/deleteUserAttributes.mjs");
var _deleteUserMjs = require("./providers/cognito/apis/deleteUser.mjs");
var _rememberDeviceMjs = require("./providers/cognito/apis/rememberDevice.mjs");
var _forgetDeviceMjs = require("./providers/cognito/apis/forgetDevice.mjs");
var _fetchDevicesMjs = require("./providers/cognito/apis/fetchDevices.mjs");
var _autoSignInMjs = require("./providers/cognito/apis/autoSignIn.mjs");
var _core = require("@aws-amplify/core");
var _identityIdStoreMjs = require("./providers/cognito/credentialsProvider/IdentityIdStore.mjs");
var _credentialsProviderMjs = require("./providers/cognito/credentialsProvider/credentialsProvider.mjs");
var _refreshAuthTokensMjs = require("./providers/cognito/utils/refreshAuthTokens.mjs");
var _utils = require("@aws-amplify/core/internals/utils");
var _authErrorMjs = require("./errors/AuthError.mjs");
var _errorHelpersMjs = require("./providers/cognito/tokenProvider/errorHelpers.mjs");
var _typesMjs = require("./providers/cognito/utils/types.mjs");
var _tokenProviderMjs = require("./providers/cognito/tokenProvider/tokenProvider.mjs");
var _sha256Js = require("@aws-crypto/sha256-js");
var _constantsMjs = require("./errors/constants.mjs");
var _errorsMjs = require("./Errors.mjs");
var _authErrorStringsMjs = require("./common/AuthErrorStrings.mjs");
var _authMjs = require("./types/Auth.mjs");
var _associateWebAuthnCredentialMjs = require("./client/apis/associateWebAuthnCredential.mjs");
var _listWebAuthnCredentialsMjs = require("./client/apis/listWebAuthnCredentials.mjs");
var _deleteWebAuthnCredentialMjs = require("./client/apis/deleteWebAuthnCredential.mjs");

},{"./providers/cognito/apis/signUp.mjs":"cg2qr","./providers/cognito/apis/resetPassword.mjs":"iTWkD","./providers/cognito/apis/confirmResetPassword.mjs":"jTFYv","./providers/cognito/apis/signIn.mjs":"4wjGy","./providers/cognito/apis/resendSignUpCode.mjs":"6cliD","./providers/cognito/apis/confirmSignUp.mjs":"4yiTg","./providers/cognito/apis/confirmSignIn.mjs":"6yTEi","./providers/cognito/apis/updateMFAPreference.mjs":"8cFLI","./providers/cognito/apis/fetchMFAPreference.mjs":"7Yp9f","./providers/cognito/apis/verifyTOTPSetup.mjs":"g77US","./providers/cognito/apis/updatePassword.mjs":"7zTpS","./providers/cognito/apis/setUpTOTP.mjs":"43zCQ","./providers/cognito/apis/updateUserAttributes.mjs":"95Cy7","./providers/cognito/apis/updateUserAttribute.mjs":"kPSqX","./providers/cognito/apis/getCurrentUser.mjs":"d9HYR","./providers/cognito/apis/confirmUserAttribute.mjs":"a90Nu","./providers/cognito/apis/signInWithRedirect.mjs":"jWEhZ","./providers/cognito/apis/fetchUserAttributes.mjs":"4tHdN","./providers/cognito/apis/signOut.mjs":"lVRrz","./providers/cognito/apis/sendUserAttributeVerificationCode.mjs":"4fCPZ","./providers/cognito/apis/deleteUserAttributes.mjs":"4cllT","./providers/cognito/apis/deleteUser.mjs":"3j1FT","./providers/cognito/apis/rememberDevice.mjs":"lni5S","./providers/cognito/apis/forgetDevice.mjs":"cn4qx","./providers/cognito/apis/fetchDevices.mjs":"12PKW","./providers/cognito/apis/autoSignIn.mjs":"e8H7g","@aws-amplify/core":"hJ80y","./providers/cognito/credentialsProvider/IdentityIdStore.mjs":"8UUhB","./providers/cognito/credentialsProvider/credentialsProvider.mjs":"4h4LE","./providers/cognito/utils/refreshAuthTokens.mjs":"67ciz","@aws-amplify/core/internals/utils":"dRREz","./errors/AuthError.mjs":"eST5l","./providers/cognito/tokenProvider/errorHelpers.mjs":"4wyMk","./providers/cognito/utils/types.mjs":"7EObU","./providers/cognito/tokenProvider/tokenProvider.mjs":"dIoqv","@aws-crypto/sha256-js":"7twCg","./errors/constants.mjs":"8UaIu","./Errors.mjs":"aAB8b","./common/AuthErrorStrings.mjs":"dhvVB","./types/Auth.mjs":"8x37f","./client/apis/associateWebAuthnCredential.mjs":"9A0M6","./client/apis/listWebAuthnCredentials.mjs":"cEw74","./client/apis/deleteWebAuthnCredential.mjs":"kVQ4o","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"9A0M6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "associateWebAuthnCredential", ()=>associateWebAuthnCredential);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../providers/cognito/utils/types.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _regionParsersMjs = require("../../foundation/parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../utils/getAuthUserAgentValue.mjs");
var _registerPasskeyMjs = require("../utils/passkey/registerPasskey.mjs");
var _errorsMjs = require("../utils/passkey/errors.mjs");
var _sharedMjs = require("../utils/passkey/types/shared.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../errors/types/validation.mjs");
var _errorsMjs1 = require("../../providers/cognito/types/errors.mjs");
var _createStartWebAuthnRegistrationClientMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs");
var _createCompleteWebAuthnRegistrationClientMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Registers a new passkey for an authenticated user
 *
 * @returns Promise<void>
 * @throws - {@link PasskeyError}:
 * - Thrown when intermediate state is invalid
 * @throws - {@link AuthError}:
 * - Thrown when user is unauthenticated
 * @throws - {@link StartWebAuthnRegistrationException}
 * - Thrown due to a service error retrieving WebAuthn registration options
 * @throws - {@link CompleteWebAuthnRegistrationException}
 * - Thrown due to a service error when verifying WebAuthn registration result
 */ async function associateWebAuthnCredential() {
    const authConfig = (0, _core.Amplify).getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await (0, _core.fetchAuthSession)();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const startWebAuthnRegistration = (0, _createStartWebAuthnRegistrationClientMjs.createStartWebAuthnRegistrationClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { CredentialCreationOptions: credentialCreationOptions } = await startWebAuthnRegistration({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).StartWebAuthnRegistration)
    }, {
        AccessToken: tokens.accessToken.toString()
    });
    (0, _sharedMjs.assertValidCredentialCreationOptions)(credentialCreationOptions);
    const cred = await (0, _registerPasskeyMjs.registerPasskey)(credentialCreationOptions);
    const completeWebAuthnRegistration = (0, _createCompleteWebAuthnRegistrationClientMjs.createCompleteWebAuthnRegistrationClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await completeWebAuthnRegistration({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).CompleteWebAuthnRegistration)
    }, {
        AccessToken: tokens.accessToken.toString(),
        Credential: cred
    });
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../providers/cognito/utils/types.mjs":"7EObU","../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","../../foundation/parsers/regionParsers.mjs":"1DoVs","../../utils/getAuthUserAgentValue.mjs":"lBlCr","../utils/passkey/registerPasskey.mjs":"hn5sI","../utils/passkey/errors.mjs":"6RWlb","../utils/passkey/types/shared.mjs":"xcBEp","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../common/AuthErrorStrings.mjs":"dhvVB","../../errors/types/validation.mjs":"8dvEu","../../providers/cognito/types/errors.mjs":"2qQV1","../../foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs":"5mdqF","../../foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs":"bgpST","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"hn5sI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "registerPasskey", ()=>registerPasskey);
var _indexMjs = require("./types/index.mjs");
var _serdeMjs = require("./serde.mjs");
var _errorsMjs = require("./errors.mjs");
var _getIsPasskeySupportedMjs = require("./getIsPasskeySupported.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Registers a new passkey for user
 * @param input - PasskeyCreateOptionsJson
 * @returns serialized PasskeyCreateResult
 */ const registerPasskey = async (input)=>{
    try {
        const isPasskeySupported = (0, _getIsPasskeySupportedMjs.getIsPasskeySupported)();
        (0, _errorsMjs.assertPasskeyError)(isPasskeySupported, (0, _errorsMjs.PasskeyErrorCode).PasskeyNotSupported);
        const passkeyCreationOptions = (0, _serdeMjs.deserializeJsonToPkcCreationOptions)(input);
        const credential = await navigator.credentials.create({
            publicKey: passkeyCreationOptions
        });
        (0, _indexMjs.assertCredentialIsPkcWithAuthenticatorAttestationResponse)(credential);
        return (0, _serdeMjs.serializePkcWithAttestationToJson)(credential);
    } catch (err) {
        throw (0, _errorsMjs.handlePasskeyRegistrationError)(err);
    }
};

},{"./types/index.mjs":"3im6d","./serde.mjs":"jVbNS","./errors.mjs":"6RWlb","./getIsPasskeySupported.mjs":"iRDPx","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"5mdqF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createStartWebAuthnRegistrationClient", ()=>createStartWebAuthnRegistrationClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createStartWebAuthnRegistrationClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('StartWebAuthnRegistration'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"bgpST":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createCompleteWebAuthnRegistrationClient", ()=>createCompleteWebAuthnRegistrationClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createCompleteWebAuthnRegistrationClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('CompleteWebAuthnRegistration'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"cEw74":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listWebAuthnCredentials", ()=>listWebAuthnCredentials);
var _core = require("@aws-amplify/core");
var _listWebAuthnCredentialsMjs = require("../../foundation/apis/listWebAuthnCredentials.mjs");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../providers/cognito/utils/types.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../errors/types/validation.mjs");
var _errorsMjs = require("../../providers/cognito/types/errors.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Lists registered credentials for an authenticated user
 *
 * @param {ListWebAuthnCredentialsInput} input The list input parameters including page size and next token.
 * @returns Promise<ListWebAuthnCredentialsOutput>
 * @throws - {@link AuthError}:
 * - Thrown when user is unauthenticated
 * @throws - {@link ListWebAuthnCredentialsException}
 * - Thrown due to a service error when listing WebAuthn credentials
 */ async function listWebAuthnCredentials(input) {
    return (0, _listWebAuthnCredentialsMjs.listWebAuthnCredentials)((0, _core.Amplify), input);
}

},{"@aws-amplify/core":"hJ80y","../../foundation/apis/listWebAuthnCredentials.mjs":"ffFrI","@aws-amplify/core/internals/utils":"dRREz","../../providers/cognito/utils/types.mjs":"7EObU","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../common/AuthErrorStrings.mjs":"dhvVB","../../errors/types/validation.mjs":"8dvEu","../../providers/cognito/types/errors.mjs":"2qQV1","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"ffFrI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "listWebAuthnCredentials", ()=>listWebAuthnCredentials);
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../providers/cognito/utils/types.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../errors/types/validation.mjs");
var _errorsMjs = require("../../providers/cognito/types/errors.mjs");
var _createListWebAuthnCredentialsClientMjs = require("../factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function listWebAuthnCredentials(amplify, input) {
    const authConfig = amplify.getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await amplify.Auth.fetchAuthSession();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const listWebAuthnCredentialsResult = (0, _createListWebAuthnCredentialsClientMjs.createListWebAuthnCredentialsClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    const { Credentials: commandCredentials = [], NextToken: nextToken } = await listWebAuthnCredentialsResult({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).ListWebAuthnCredentials)
    }, {
        AccessToken: tokens.accessToken.toString(),
        MaxResults: input?.pageSize,
        NextToken: input?.nextToken
    });
    const credentials = commandCredentials.map((item)=>({
            credentialId: item.CredentialId,
            friendlyCredentialName: item.FriendlyCredentialName,
            relyingPartyId: item.RelyingPartyId,
            authenticatorAttachment: item.AuthenticatorAttachment,
            authenticatorTransports: item.AuthenticatorTransports,
            createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined
        }));
    return {
        credentials,
        nextToken
    };
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../providers/cognito/utils/types.mjs":"7EObU","../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../parsers/regionParsers.mjs":"1DoVs","../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../common/AuthErrorStrings.mjs":"dhvVB","../../errors/types/validation.mjs":"8dvEu","../../providers/cognito/types/errors.mjs":"2qQV1","../factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs":"6DBr5","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"6DBr5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createListWebAuthnCredentialsClient", ()=>createListWebAuthnCredentialsClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createListWebAuthnCredentialsClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('ListWebAuthnCredentials'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kVQ4o":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deleteWebAuthnCredential", ()=>deleteWebAuthnCredential);
var _core = require("@aws-amplify/core");
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../providers/cognito/utils/types.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../errors/types/validation.mjs");
var _errorsMjs = require("../../providers/cognito/types/errors.mjs");
var _deleteWebAuthnCredentialMjs = require("../../foundation/apis/deleteWebAuthnCredential.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
/**
 * Delete a registered credential for an authenticated user by credentialId
 * @param {DeleteWebAuthnCredentialInput} input The delete input parameters including the credentialId
 * @returns Promise<void>
 * @throws - {@link AuthError}:
 * - Thrown when user is unauthenticated
 * @throws - {@link DeleteWebAuthnCredentialException}
 * - Thrown due to a service error when deleting a WebAuthn credential
 */ async function deleteWebAuthnCredential(input) {
    return (0, _deleteWebAuthnCredentialMjs.deleteWebAuthnCredential)((0, _core.Amplify), input);
}

},{"@aws-amplify/core":"hJ80y","@aws-amplify/core/internals/utils":"dRREz","../../providers/cognito/utils/types.mjs":"7EObU","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../common/AuthErrorStrings.mjs":"dhvVB","../../errors/types/validation.mjs":"8dvEu","../../providers/cognito/types/errors.mjs":"2qQV1","../../foundation/apis/deleteWebAuthnCredential.mjs":"kTbte","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"kTbte":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deleteWebAuthnCredential", ()=>deleteWebAuthnCredential);
var _utils = require("@aws-amplify/core/internals/utils");
var _typesMjs = require("../../providers/cognito/utils/types.mjs");
var _createCognitoUserPoolEndpointResolverMjs = require("../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs");
var _core = require("@aws-amplify/core");
var _regionParsersMjs = require("../parsers/regionParsers.mjs");
var _getAuthUserAgentValueMjs = require("../../utils/getAuthUserAgentValue.mjs");
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _cognitoUserPoolTransferHandlerMjs = require("../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs");
var _constantsMjs = require("../factories/serviceClients/cognitoIdentityProvider/constants.mjs");
var _authErrorStringsMjs = require("../../common/AuthErrorStrings.mjs");
var _validationMjs = require("../../errors/types/validation.mjs");
var _errorsMjs = require("../../providers/cognito/types/errors.mjs");
var _createDeleteWebAuthnCredentialClientMjs = require("../factories/serviceClients/cognitoIdentityProvider/createDeleteWebAuthnCredentialClient.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
async function deleteWebAuthnCredential(amplify, input) {
    const authConfig = amplify.getConfig().Auth?.Cognito;
    (0, _utils.assertTokenProviderConfig)(authConfig);
    const { userPoolEndpoint, userPoolId } = authConfig;
    const { tokens } = await amplify.Auth.fetchAuthSession();
    (0, _typesMjs.assertAuthTokens)(tokens);
    const deleteWebAuthnCredentialResult = (0, _createDeleteWebAuthnCredentialClientMjs.createDeleteWebAuthnCredentialClient)({
        endpointResolver: (0, _createCognitoUserPoolEndpointResolverMjs.createCognitoUserPoolEndpointResolver)({
            endpointOverride: userPoolEndpoint
        })
    });
    await deleteWebAuthnCredentialResult({
        region: (0, _regionParsersMjs.getRegionFromUserPoolId)(userPoolId),
        userAgentValue: (0, _getAuthUserAgentValueMjs.getAuthUserAgentValue)((0, _utils.AuthAction).DeleteWebAuthnCredential)
    }, {
        AccessToken: tokens.accessToken.toString(),
        CredentialId: input.credentialId
    });
}

},{"@aws-amplify/core/internals/utils":"dRREz","../../providers/cognito/utils/types.mjs":"7EObU","../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs":"2iL3Z","@aws-amplify/core":"hJ80y","../parsers/regionParsers.mjs":"1DoVs","../../utils/getAuthUserAgentValue.mjs":"lBlCr","@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","@aws-amplify/core/internals/aws-client-utils":"5U21t","../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","../factories/serviceClients/cognitoIdentityProvider/constants.mjs":"dhcbk","../../common/AuthErrorStrings.mjs":"dhvVB","../../errors/types/validation.mjs":"8dvEu","../../providers/cognito/types/errors.mjs":"2qQV1","../factories/serviceClients/cognitoIdentityProvider/createDeleteWebAuthnCredentialClient.mjs":"3CZdL","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"3CZdL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDeleteWebAuthnCredentialClient", ()=>createDeleteWebAuthnCredentialClient);
var _composers = require("@aws-amplify/core/internals/aws-client-utils/composers");
var _cognitoUserPoolTransferHandlerMjs = require("./shared/handler/cognitoUserPoolTransferHandler.mjs");
var _createUserPoolSerializerMjs = require("./shared/serde/createUserPoolSerializer.mjs");
var _createUserPoolDeserializerMjs = require("./shared/serde/createUserPoolDeserializer.mjs");
var _awsClientUtils = require("@aws-amplify/core/internals/aws-client-utils");
var _utils = require("@aws-amplify/core/internals/utils");
var _constantsMjs = require("./constants.mjs");
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
const createDeleteWebAuthnCredentialClient = (config)=>(0, _composers.composeServiceApi)((0, _cognitoUserPoolTransferHandlerMjs.cognitoUserPoolTransferHandler), (0, _createUserPoolSerializerMjs.createUserPoolSerializer)('DeleteWebAuthnCredential'), (0, _createUserPoolDeserializerMjs.createUserPoolDeserializer)(), {
        ...(0, _constantsMjs.DEFAULT_SERVICE_CLIENT_API_CONFIG),
        ...config
    });

},{"@aws-amplify/core/internals/aws-client-utils/composers":"atnR1","./shared/handler/cognitoUserPoolTransferHandler.mjs":"jWExT","./shared/serde/createUserPoolSerializer.mjs":"qnlfC","./shared/serde/createUserPoolDeserializer.mjs":"i8vuQ","@aws-amplify/core/internals/aws-client-utils":"5U21t","@aws-amplify/core/internals/utils":"dRREz","./constants.mjs":"dhcbk","@parcel/transformer-js/src/esmodule-helpers.js":"fE9oC"}],"lMtgW":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"aws_project_region\":\"eu-central-1\",\"aws_cognito_identity_pool_id\":\"eu-central-1:b7605fa3-c401-4071-84b4-eb4383cb316e\",\"aws_cognito_region\":\"eu-central-1\",\"aws_user_pools_id\":\"eu-central-1_kQfNhi2r1\",\"aws_user_pools_web_client_id\":\"157pb1sto8hhegfjfqsnbf2vk3\",\"oauth\":{},\"aws_cognito_username_attributes\":[\"EMAIL\"],\"aws_cognito_social_providers\":[],\"aws_cognito_signup_attributes\":[\"EMAIL\"],\"aws_cognito_mfa_configuration\":\"OFF\",\"aws_cognito_mfa_types\":[\"SMS\"],\"aws_cognito_password_protection_settings\":{\"passwordPolicyMinLength\":8,\"passwordPolicyCharacters\":[]},\"aws_cognito_verification_mechanisms\":[\"EMAIL\"]}");

},{}],"jFQEh":[function(require,module,exports,__globalThis) {
module.exports = Promise.resolve(module.bundle.root("bLlRO"));

},{"bLlRO":"bLlRO"}]},["jWhgi","kTBnD"], "kTBnD", "parcelRequire2757", {})

//# sourceMappingURL=iyilikZinciri.3c14d121.js.map
